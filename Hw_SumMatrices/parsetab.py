
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if\n        \n        else_ifs : elsif open_parenthesis logic_expression close_parenthesis then inside_logic\n        else_ifs : else_ifs else_ifs\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : arithmetic_expression\n        logic_expression : compared_to_bool\n        logic_expression : arithmetic_expression logic_operand arithmetic_expression\n        logic_expression : logic_expression logic_operand logic_expression\n        logic_expression : not logic_expression\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operand : and\n        logic_operand : or\n        logic_operand : not\n        logic_operand : is_equal\n        logic_operand : is_not_equal\n        logic_operand : greater_than\n        logic_operand : greater_or_equal_than\n        logic_operand : less_than\n        logic_operand : less_or_equal_than\n        \n        compared_to_bool : arithmetic_expression is_equal bool_value\n        compared_to_bool : arithmetic_expression is_not_equal bool_value\n        compared_to_bool : bool_value is_equal arithmetic_expression\n        compared_to_bool : bool_value is_not_equal arithmetic_expression\n        compared_to_bool : bool_value\n        \n        arithmetic_expression : value\n        arithmetic_expression : value arithmetic_operand value\n        arithmetic_expression : arithmetic_expression arithmetic_operand arithmetic_expression\n        \n        arithmetic_operand : sum\n        arithmetic_operand : substraction\n        arithmetic_operand : multiplication\n        arithmetic_operand : division\n        arithmetic_operand : exponent\n        \n        value : real_value\n        value : functions\n        value : open_parenthesis arithmetic_expression close_parenthesis\n        value : ids_access\n        \n        ids_access : id\n        ids_access : id open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value\n        real_value : float_value\n        real_value : id\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let id equals logic_expression\n        assign : let id equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id open_parenthesis close_parenthesis\n        functions : id open_parenthesis arguments close_parenthesis\n        \n        arguments : ByVal value\n        arguments : ByRef id\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access\n        multiple_read : multiple_read comma multiple_read\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,138,139,140,141,142,143,144,145,149,153,154,159,162,164,165,167,171,173,176,177,178,180,183,185,186,191,192,197,199,200,201,209,211,212,213,214,219,222,],[-9,23,-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-9,-29,-28,-41,-42,-43,-44,-59,163,-23,-9,-11,-9,179,-24,184,-9,-17,190,-22,-9,-60,-9,198,-19,202,207,-9,-12,-18,217,-20,-9,-25,-61,-21,-13,]),'dim':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,151,154,159,162,164,167,173,174,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[9,9,9,9,9,9,9,9,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,9,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,9,-31,9,-29,-28,-41,-42,-43,-44,-59,9,-23,9,-11,9,-24,9,9,-17,9,9,-60,9,-19,9,-12,-18,-20,9,-25,-61,-13,]),'if':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,163,164,167,173,176,179,180,182,183,185,190,191,199,200,201,202,211,212,213,214,222,],[11,11,11,11,11,11,11,11,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,11,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,11,-31,11,-29,-28,-41,-42,-43,-44,-59,-23,11,-11,176,11,-24,11,-17,191,11,11,-60,11,201,-19,11,-12,-18,211,-20,11,-25,-61,-13,]),'while':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[12,12,12,12,12,12,12,12,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,12,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,12,-31,12,-29,-28,-41,-42,-43,-44,-59,-23,12,-11,12,-24,12,-17,12,12,-60,12,-19,12,-12,-18,-20,12,-25,-61,-13,]),'do':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[13,13,13,13,13,13,13,13,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,13,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,13,-31,13,-29,-28,-41,-42,-43,-44,-59,-23,13,-11,13,-24,13,-17,13,13,-60,13,-19,13,-12,-18,-20,13,-25,-61,-13,]),'for':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[14,14,14,14,14,14,14,14,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,14,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,14,-31,14,-29,-28,-41,-42,-43,-44,-59,-23,14,-11,14,-24,14,-17,14,14,-60,14,-19,14,-12,-18,-20,14,-25,-61,-13,]),'gosub':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[15,15,15,15,15,15,15,15,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,15,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,15,-31,15,-29,-28,-41,-42,-43,-44,-59,-23,15,-11,15,-24,15,-17,15,15,-60,15,-19,15,-12,-18,-20,15,-25,-61,-13,]),'dunkelCls':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[19,19,19,19,19,19,19,19,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,19,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,19,-31,19,-29,-28,-41,-42,-43,-44,-59,-23,19,-11,19,-24,19,-17,19,19,-60,19,-19,19,-12,-18,-20,19,-25,-61,-13,]),'let':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[20,20,20,20,20,20,20,20,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,20,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,20,-31,20,-29,-28,-41,-42,-43,-44,-59,-23,20,-11,20,-24,20,-17,20,20,-60,20,-19,20,-12,-18,-20,20,-25,-61,-13,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,21,22,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,57,59,60,61,63,64,65,66,69,70,71,72,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,97,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,147,148,149,154,157,159,162,164,167,168,173,176,180,181,182,183,185,191,195,199,200,201,204,211,212,213,214,222,],[10,10,10,10,10,10,10,30,10,35,36,-67,-83,-84,-85,37,48,52,48,48,-66,-86,76,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,52,-78,48,98,76,-26,-27,48,-45,48,48,48,76,48,-49,-50,-51,-52,-53,48,48,52,52,134,135,-10,-14,-15,-16,-79,76,76,48,-32,-33,-34,-35,-36,-37,-38,-39,-40,48,-35,-36,-30,48,48,10,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,10,-31,10,-29,-28,-41,-42,-43,-44,48,48,-59,-23,48,10,-11,10,-24,48,10,-17,10,48,10,-60,10,-19,48,10,-12,-18,213,-20,10,-25,-61,-13,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[21,21,21,21,21,21,21,21,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,21,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,21,-31,21,-29,-28,-41,-42,-43,-44,-59,-23,21,-11,21,-24,21,-17,21,21,-60,21,-19,21,-12,-18,-20,21,-25,-61,-13,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,134,138,139,140,141,142,143,144,145,149,154,159,162,164,167,173,176,180,182,183,185,191,199,200,201,211,212,213,214,222,],[22,22,22,22,22,22,22,22,-67,-83,-84,-85,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,22,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,22,-31,22,-29,-28,-41,-42,-43,-44,-59,-23,22,-11,22,-24,22,-17,22,22,-60,22,-19,22,-12,-18,-20,22,-25,-61,-13,]),'$end':([1,23,54,158,170,196,206,208,215,216,220,221,223,],[0,-1,-2,-73,-68,-73,-69,-73,-73,-70,-71,-73,-72,]),'loop':([3,4,5,6,7,8,13,16,17,18,19,24,25,26,27,28,29,34,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,138,140,141,142,143,144,145,149,154,162,167,176,183,191,200,201,211,213,214,222,],[-9,-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,68,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-29,-28,-41,-42,-43,-44,-59,-23,-11,-24,-17,-60,-19,-12,-18,-20,-25,-61,-13,]),'wend':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,119,122,123,124,126,127,128,129,130,132,133,138,140,141,142,143,144,145,146,149,154,162,167,176,183,191,200,201,211,213,214,222,],[-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-9,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-29,-28,-41,-42,-43,-44,154,-59,-23,-11,-24,-17,-60,-19,-12,-18,-20,-25,-61,-13,]),'return':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,134,138,140,141,142,143,144,145,149,150,154,162,167,176,183,191,200,201,211,213,214,222,],[-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-9,-31,-29,-28,-41,-42,-43,-44,-59,158,-23,-11,-24,-17,-60,-19,-12,-18,-20,-25,-61,-13,]),'else':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,138,139,140,141,142,143,144,145,149,153,154,162,165,167,176,178,183,191,200,201,211,212,213,214,219,222,],[-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-9,-29,-28,-41,-42,-43,-44,-59,164,-23,-11,180,-24,-17,-22,-60,-19,-12,-18,-20,-9,-25,-61,-21,-13,]),'elsif':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,138,139,140,141,142,143,144,145,149,153,154,162,165,167,176,178,183,191,200,201,211,212,213,214,219,222,],[-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-9,-29,-28,-41,-42,-43,-44,-59,166,-23,-11,166,-24,-17,166,-60,-19,-12,-18,-20,-9,-25,-61,-21,-13,]),'next':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,90,91,92,93,94,116,122,123,124,126,127,128,129,130,132,133,138,140,141,142,143,144,145,149,154,162,167,176,182,183,191,194,200,201,211,213,214,222,],[-9,-9,-9,-9,-9,-9,-67,-83,-84,-85,-3,-4,-5,-6,-7,-8,-66,-86,-88,-89,-46,-54,-55,-57,-63,-64,-58,-91,-93,-58,-78,-26,-27,-45,-10,-14,-15,-16,-79,-30,-74,-26,-90,-87,-56,-62,-48,-47,-94,-92,-31,-29,-28,-41,-42,-43,-44,-59,-23,-11,-24,-17,-9,-60,-19,204,-12,-18,-20,-25,-61,-13,]),'open_parenthesis':([10,11,12,21,22,32,33,39,48,53,59,61,65,69,70,71,72,76,77,78,79,80,81,82,83,84,85,86,97,99,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,120,135,147,148,157,166,168,181,195,],[31,32,33,39,53,61,61,72,31,53,97,99,61,97,61,97,72,31,97,-49,-50,-51,-52,-53,97,97,53,53,72,99,61,-32,-33,-34,-35,-36,-37,-38,-39,-40,97,-35,-36,97,97,147,151,61,97,97,181,97,61,97,]),'string':([21,22,39,71,],[40,50,40,40,]),'word_value':([21,32,33,39,59,61,65,69,70,71,72,77,78,79,80,81,82,83,84,97,99,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,136,147,148,157,168,175,181,195,210,],[46,46,46,46,46,46,46,46,46,46,46,46,-49,-50,-51,-52,-53,46,46,46,46,46,-32,-33,-34,-35,-36,-37,-38,-39,-40,46,-35,-36,46,46,152,46,46,46,46,189,46,46,218,]),'float_value':([21,32,33,39,59,61,65,69,70,71,72,77,78,79,80,81,82,83,84,97,99,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,147,148,157,168,181,195,],[47,47,47,47,47,47,47,47,47,47,47,47,-49,-50,-51,-52,-53,47,47,47,47,47,-32,-33,-34,-35,-36,-37,-38,-39,-40,47,-35,-36,47,47,47,47,47,47,47,47,]),'sub':([23,158,184,196,198,207,208,215,217,221,],[55,55,196,55,208,215,55,55,221,55,]),'as':([30,159,173,],[56,172,187,]),'close_parenthesis':([31,40,41,42,43,44,45,46,47,48,52,57,58,62,63,64,66,67,73,74,75,76,87,90,91,92,93,94,96,98,100,101,116,124,125,127,128,129,130,137,138,140,141,142,143,144,145,149,151,155,160,161,162,183,188,193,200,214,222,],[57,-88,-89,-46,-54,-55,-57,-63,-64,-58,-58,-78,94,102,-26,-27,-45,119,126,127,128,-58,128,-10,-14,-15,-16,-79,-80,-81,138,127,-30,-90,127,-56,-62,-48,-47,-82,-31,-29,-28,-41,-42,-43,-44,-59,159,167,173,-76,-11,-60,-77,203,-12,-61,-13,]),'ByVal':([31,95,],[59,59,]),'ByRef':([31,95,],[60,60,]),'not':([32,33,42,43,44,45,46,47,48,57,61,62,63,64,65,66,67,70,75,76,94,99,100,101,103,104,105,106,107,108,109,110,111,112,116,122,123,127,128,129,130,138,140,141,142,143,144,145,147,149,155,181,183,193,214,],[65,65,-46,-54,-55,-57,-63,-64,-58,-78,65,106,106,-27,65,-45,106,65,-57,-58,-79,65,106,106,65,-32,-33,-34,-35,-36,-37,-38,-39,-40,106,106,106,-56,-62,-48,-47,-31,106,-28,-41,-42,-43,-44,65,-59,106,65,-60,106,-61,]),'bool_value':([32,33,61,65,70,99,103,104,105,106,107,108,109,110,111,112,114,115,147,181,],[66,66,66,66,66,66,66,-32,-33,-34,-35,-36,-37,-38,-39,-40,142,143,66,66,]),'equals':([35,37,],[69,70,]),'comma':([38,40,41,42,43,44,45,46,47,48,49,50,51,52,57,58,73,74,75,76,90,91,92,93,94,96,98,124,127,128,129,130,132,133,137,149,160,161,162,183,188,200,214,222,],[71,-88,-89,-46,-54,-55,-57,-63,-64,-58,85,86,-93,-58,-78,95,71,-89,-57,-58,-10,-14,-15,-16,-79,-80,-81,71,-56,-62,-48,-47,85,85,95,-59,174,-76,-11,-60,174,-12,-61,-13,]),'sum':([41,42,43,44,45,46,47,48,57,63,74,75,76,94,101,121,123,125,127,128,129,130,131,141,144,145,149,156,169,182,183,205,214,],[78,78,-54,-55,-57,-63,-64,-58,-78,78,78,-57,-58,-79,78,78,78,78,-56,-62,78,-47,78,78,78,78,-59,78,78,78,-60,78,-61,]),'substraction':([41,42,43,44,45,46,47,48,57,63,74,75,76,94,101,121,123,125,127,128,129,130,131,141,144,145,149,156,169,182,183,205,214,],[79,79,-54,-55,-57,-63,-64,-58,-78,79,79,-57,-58,-79,79,79,79,79,-56,-62,79,-47,79,79,79,79,-59,79,79,79,-60,79,-61,]),'multiplication':([41,42,43,44,45,46,47,48,57,63,74,75,76,94,101,121,123,125,127,128,129,130,131,141,144,145,149,156,169,182,183,205,214,],[80,80,-54,-55,-57,-63,-64,-58,-78,80,80,-57,-58,-79,80,80,80,80,-56,-62,80,-47,80,80,80,80,-59,80,80,80,-60,80,-61,]),'division':([41,42,43,44,45,46,47,48,57,63,74,75,76,94,101,121,123,125,127,128,129,130,131,141,144,145,149,156,169,182,183,205,214,],[81,81,-54,-55,-57,-63,-64,-58,-78,81,81,-57,-58,-79,81,81,81,81,-56,-62,81,-47,81,81,81,81,-59,81,81,81,-60,81,-61,]),'exponent':([41,42,43,44,45,46,47,48,57,63,74,75,76,94,101,121,123,125,127,128,129,130,131,141,144,145,149,156,169,182,183,205,214,],[82,82,-54,-55,-57,-63,-64,-58,-78,82,82,-57,-58,-79,82,82,82,82,-56,-62,82,-47,82,82,82,82,-59,82,82,82,-60,82,-61,]),'is_equal':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,107,114,-27,117,107,-57,-58,-79,107,114,107,107,114,-56,-62,-48,-47,-31,107,-28,-41,-42,-43,-44,-59,107,-60,107,-61,]),'is_not_equal':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,108,115,-27,118,108,-57,-58,-79,108,115,108,108,115,-56,-62,-48,-47,-31,108,-28,-41,-42,-43,-44,-59,108,-60,108,-61,]),'and':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,104,104,-27,-45,104,-57,-58,-79,104,104,104,104,104,-56,-62,-48,-47,-31,104,-28,-41,-42,-43,-44,-59,104,-60,104,-61,]),'or':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,105,105,-27,-45,105,-57,-58,-79,105,105,105,105,105,-56,-62,-48,-47,-31,105,-28,-41,-42,-43,-44,-59,105,-60,105,-61,]),'greater_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,109,109,-27,-45,109,-57,-58,-79,109,109,109,109,109,-56,-62,-48,-47,-31,109,-28,-41,-42,-43,-44,-59,109,-60,109,-61,]),'greater_or_equal_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,110,110,-27,-45,110,-57,-58,-79,110,110,110,110,110,-56,-62,-48,-47,-31,110,-28,-41,-42,-43,-44,-59,110,-60,110,-61,]),'less_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,111,111,-27,-45,111,-57,-58,-79,111,111,111,111,111,-56,-62,-48,-47,-31,111,-28,-41,-42,-43,-44,-59,111,-60,111,-61,]),'less_or_equal_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,94,100,101,116,122,123,127,128,129,130,138,140,141,142,143,144,145,149,155,183,193,214,],[-46,-54,-55,-57,-63,-64,-58,-78,112,112,-27,-45,112,-57,-58,-79,112,112,112,112,112,-56,-62,-48,-47,-31,112,-28,-41,-42,-43,-44,-59,112,-60,112,-61,]),'to':([42,43,44,45,46,47,48,57,94,121,127,128,129,130,149,183,214,],[-46,-54,-55,-57,-63,-64,-58,-78,-79,148,-56,-62,-48,-47,-59,-60,-61,]),'close_brackets':([42,43,44,45,46,47,48,57,94,127,128,129,130,131,149,152,169,183,189,205,214,218,],[-46,-54,-55,-57,-63,-64,-58,-78,-79,-56,-62,-48,-47,149,-59,162,183,-60,200,214,-61,222,]),'step':([42,43,44,45,46,47,48,57,94,127,128,129,130,149,156,183,214,],[-46,-54,-55,-57,-63,-64,-58,-78,-79,-56,-62,-48,-47,-59,168,-60,-61,]),'open_brackets':([48,52,76,90,91,92,93,149,162,183,200,],[84,84,84,136,-14,-15,-16,157,175,195,210,]),'procedure':([55,],[88,]),'function':([55,],[89,]),'word':([56,172,187,],[91,91,91,]),'float':([56,172,187,],[92,92,92,]),'bool':([56,172,187,],[93,93,93,]),'until':([68,],[120,]),'then':([102,203,],[139,212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[2,24,25,26,27,28,29,34,146,150,153,171,177,186,192,194,197,209,219,]),'variable':([0,3,4,5,6,7,8,13,119,134,139,151,159,164,173,174,180,182,185,199,212,],[3,3,3,3,3,3,3,3,3,3,3,161,3,3,3,161,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'functions':([0,3,4,5,6,7,8,13,21,32,33,39,59,61,65,69,70,71,72,77,83,84,97,99,103,113,117,118,119,134,139,147,148,157,159,164,168,173,180,181,182,185,195,199,212,],[16,16,16,16,16,16,16,16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,16,16,16,44,44,44,16,16,44,16,16,44,16,16,44,16,16,]),'print':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'read':([0,3,4,5,6,7,8,13,119,134,139,159,164,173,180,182,185,199,212,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiple_print':([21,39,71,],[38,73,124,]),'arithmetic_expression':([21,32,33,39,61,65,69,70,71,72,77,84,97,99,103,113,117,118,147,148,157,168,181,195,],[41,63,63,74,101,63,121,123,41,125,129,131,125,101,63,141,144,145,63,156,169,182,63,205,]),'value':([21,32,33,39,59,61,65,69,70,71,72,77,83,84,97,99,103,113,117,118,147,148,157,168,181,195,],[42,42,42,42,96,42,42,42,42,42,42,42,130,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'real_value':([21,32,33,39,59,61,65,69,70,71,72,77,83,84,97,99,103,113,117,118,147,148,157,168,181,195,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ids_access':([21,22,32,33,39,53,59,61,65,69,70,71,72,77,83,84,85,86,97,99,103,113,117,118,147,148,157,168,181,195,],[45,51,45,45,75,87,45,75,45,45,45,45,75,45,45,45,51,51,75,75,45,45,45,45,45,45,45,45,45,45,]),'multiple_read':([22,85,86,],[49,132,133,]),'subroutines':([23,158,196,208,215,221,],[54,170,206,216,220,223,]),'arguments':([31,95,],[58,137,]),'logic_expression':([32,33,61,65,70,99,103,147,181,],[62,67,100,116,122,100,140,155,193,]),'compared_to_bool':([32,33,61,65,70,99,103,147,181,],[64,64,64,64,64,64,64,64,64,]),'arithmetic_operand':([41,42,63,74,101,121,123,125,129,131,141,144,145,156,169,182,205,],[77,83,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'variable_type':([56,172,187,],[90,185,199,]),'logic_operand':([62,63,67,100,101,116,122,123,140,155,193,],[103,113,103,103,113,103,103,113,103,103,103,]),'parameters':([151,174,],[160,188,]),'else_ifs':([153,165,178,],[165,178,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',39),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',40),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',48),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',49),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',50),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',51),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',52),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',53),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',54),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',59),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',60),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',61),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',62),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',86),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',87),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',88),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if','conditions',8,'p_conditions','Parser.py',94),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if','conditions',10,'p_conditions','Parser.py',95),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if','conditions',9,'p_conditions','Parser.py',96),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if','conditions',11,'p_conditions','Parser.py',97),
  ('else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic','else_ifs',6,'p_else_ifs','Parser.py',102),
  ('else_ifs -> else_ifs else_ifs','else_ifs',2,'p_else_ifs','Parser.py',103),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',108),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',109),
  ('loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',11,'p_loops','Parser.py',110),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',115),
  ('logic_expression -> compared_to_bool','logic_expression',1,'p_logic_expression','Parser.py',116),
  ('logic_expression -> arithmetic_expression logic_operand arithmetic_expression','logic_expression',3,'p_logic_expression','Parser.py',117),
  ('logic_expression -> logic_expression logic_operand logic_expression','logic_expression',3,'p_logic_expression','Parser.py',118),
  ('logic_expression -> not logic_expression','logic_expression',2,'p_logic_expression','Parser.py',119),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',120),
  ('logic_operand -> and','logic_operand',1,'p_logic_operand','Parser.py',125),
  ('logic_operand -> or','logic_operand',1,'p_logic_operand','Parser.py',126),
  ('logic_operand -> not','logic_operand',1,'p_logic_operand','Parser.py',127),
  ('logic_operand -> is_equal','logic_operand',1,'p_logic_operand','Parser.py',128),
  ('logic_operand -> is_not_equal','logic_operand',1,'p_logic_operand','Parser.py',129),
  ('logic_operand -> greater_than','logic_operand',1,'p_logic_operand','Parser.py',130),
  ('logic_operand -> greater_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',131),
  ('logic_operand -> less_than','logic_operand',1,'p_logic_operand','Parser.py',132),
  ('logic_operand -> less_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',133),
  ('compared_to_bool -> arithmetic_expression is_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',138),
  ('compared_to_bool -> arithmetic_expression is_not_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',139),
  ('compared_to_bool -> bool_value is_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',140),
  ('compared_to_bool -> bool_value is_not_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',141),
  ('compared_to_bool -> bool_value','compared_to_bool',1,'p_compared_to_bool','Parser.py',142),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',147),
  ('arithmetic_expression -> value arithmetic_operand value','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',148),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operand arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',149),
  ('arithmetic_operand -> sum','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',154),
  ('arithmetic_operand -> substraction','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',155),
  ('arithmetic_operand -> multiplication','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',156),
  ('arithmetic_operand -> division','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',157),
  ('arithmetic_operand -> exponent','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',158),
  ('value -> real_value','value',1,'p_value','Parser.py',164),
  ('value -> functions','value',1,'p_value','Parser.py',165),
  ('value -> open_parenthesis arithmetic_expression close_parenthesis','value',3,'p_value','Parser.py',166),
  ('value -> ids_access','value',1,'p_value','Parser.py',167),
  ('ids_access -> id','ids_access',1,'p_ids_access','Parser.py',172),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets','ids_access',4,'p_ids_access','Parser.py',173),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',7,'p_ids_access','Parser.py',174),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',10,'p_ids_access','Parser.py',175),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',176),
  ('real_value -> word_value','real_value',1,'p_real_value','Parser.py',181),
  ('real_value -> float_value','real_value',1,'p_real_value','Parser.py',182),
  ('real_value -> id','real_value',1,'p_real_value','Parser.py',183),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',188),
  ('calls -> functions','calls',1,'p_calls','Parser.py',189),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',194),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',195),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',196),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',197),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',198),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',199),
  ('assign -> let id equals logic_expression','assign',4,'p_assign','Parser.py',208),
  ('assign -> let id equals arithmetic_expression','assign',4,'p_assign','Parser.py',209),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',214),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',215),
  ('functions -> id open_parenthesis close_parenthesis','functions',3,'p_functions','Parser.py',220),
  ('functions -> id open_parenthesis arguments close_parenthesis','functions',4,'p_functions','Parser.py',221),
  ('arguments -> ByVal value','arguments',2,'p_arguments','Parser.py',226),
  ('arguments -> ByRef id','arguments',2,'p_arguments','Parser.py',227),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',228),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',233),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',234),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',235),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',240),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',241),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',246),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',247),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',248),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',253),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',254),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',259),
  ('multiple_read -> multiple_read comma multiple_read','multiple_read',3,'p_multiple_read','Parser.py',260),
]
