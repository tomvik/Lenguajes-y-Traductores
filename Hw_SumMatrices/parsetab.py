
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if\n        \n        else_ifs : elsif open_parenthesis logic_expression close_parenthesis then inside_logic\n        else_ifs : else_ifs else_ifs\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : value\n        logic_expression : not value\n        logic_expression : logic_expression arithmetic_operator value\n        logic_expression : logic_expression arithmetic_operator not value\n        logic_expression : bool_value ACTION_ADD_BOOL_VALUE\n        logic_expression : not bool_value ACTION_ADD_BOOL_VALUE\n\n        logic_expression : not ACTION_ADD_OPERATOR logic_expression \n        logic_expression : logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operator : and ACTION_ADD_OPERATOR\n        logic_operator : or ACTION_ADD_OPERATOR\n        logic_operator : is_equal ACTION_ADD_OPERATOR\n        logic_operator : is_not_equal ACTION_ADD_OPERATOR\n        logic_operator : greater_than ACTION_ADD_OPERATOR\n        logic_operator : greater_or_equal_than ACTION_ADD_OPERATOR\n        logic_operator : less_than ACTION_ADD_OPERATOR\n        logic_operator : less_or_equal_than ACTION_ADD_OPERATOR\n        \n        arithmetic_expression : value\n        arithmetic_expression : arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET\n        \n        arithmetic_operator : sum ACTION_ADD_OPERATOR\n        arithmetic_operator : substraction ACTION_ADD_OPERATOR\n        arithmetic_operator : multiplication ACTION_ADD_OPERATOR\n        arithmetic_operator : division ACTION_ADD_OPERATOR\n        arithmetic_operator : exponent ACTION_ADD_OPERATOR\n        \n        value : real_value\n        value : functions\n        value : ids_access\n        \n        ids_access : id ACTION_ADD_VAR_VALUE\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value ACTION_ADD_WORD_VALUE\n        real_value : float_value ACTION_ADD_FLOAT_VALUE\n        real_value : id ACTION_ADD_VAR_VALUE\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let ids_access equals logic_expression\n        assign : let ids_access equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis\n        functions : id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis\n        \n        arguments : ByVal value ACTION_ADD_FUNCTION_OPERAND\n        arguments : ByRef id ACTION_ADD_FUNCTION_OPERAND\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access \n        multiple_read : multiple_read comma ids_access\n        \n        ACTION_ADD_FOR_VALUE :\n        \n        ACTION_ADD_VAR_VALUE :\n        \n        ACTION_ADD_WORD_VALUE :\n        \n        ACTION_ADD_FLOAT_VALUE :\n        \n        ACTION_ADD_BOOL_VALUE :\n        \n        ACTION_ADD_OPERATOR :\n        \n        ACTION_ADD_FUNCTION_OPERAND :\n        \n        ACTION_ADD_FUNCTION :\n        \n        ACTION_ADD_PARAMETERS :\n        \n        ACTION_ADD_NOT_QUADRUPLET :\n        \n        ACTION_ADD_QUADRUPLET :\n        \n        ACTION_ADD_ONE_DIM_OPERAND :\n        \n        ACTION_ADD_TWO_DIM_OPERAND :\n        \n        ACTION_ADD_THREE_DIM_OPERAND :\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,136,137,138,140,149,150,155,159,163,164,165,166,169,171,174,176,177,179,182,184,186,189,190,191,193,198,199,204,205,208,210,212,213,214,219,223,225,226,233,234,235,238,239,],[-9,23,-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-9,-28,-100,-31,-32,-44,-74,175,-29,-33,-23,-101,-9,-11,-9,192,-24,-54,197,-9,-17,203,-22,-9,-9,211,-19,215,-102,221,-9,-12,-18,-55,231,-20,-9,-21,-25,-103,-13,-56,]),'dim':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,157,159,164,165,166,169,171,174,176,179,182,186,187,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[9,9,9,9,9,9,9,9,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,9,-69,-70,-26,-57,-85,-82,-100,-89,-87,9,-34,9,-28,-100,-31,-32,-44,9,-74,-29,-33,-23,-101,9,-11,9,-24,-54,9,9,-17,9,9,-19,9,-102,9,-12,-18,-55,-20,9,-25,-103,-13,-56,]),'if':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,175,176,179,182,186,189,192,193,198,203,204,207,208,212,213,214,215,219,225,226,234,235,238,239,],[11,11,11,11,11,11,11,11,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,11,-69,-70,-26,-57,-85,-82,-100,-89,-87,11,-34,11,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,11,-11,189,11,-24,-54,11,-17,204,11,11,214,-19,11,-102,11,-12,-18,225,-55,-20,11,-25,-103,-13,-56,]),'while':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[12,12,12,12,12,12,12,12,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,12,-69,-70,-26,-57,-85,-82,-100,-89,-87,12,-34,12,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,12,-11,12,-24,-54,12,-17,12,12,-19,12,-102,12,-12,-18,-55,-20,12,-25,-103,-13,-56,]),'do':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[13,13,13,13,13,13,13,13,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,13,-69,-70,-26,-57,-85,-82,-100,-89,-87,13,-34,13,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,13,-11,13,-24,-54,13,-17,13,13,-19,13,-102,13,-12,-18,-55,-20,13,-25,-103,-13,-56,]),'for':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[14,14,14,14,14,14,14,14,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,14,-69,-70,-26,-57,-85,-82,-100,-89,-87,14,-34,14,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,14,-11,14,-24,-54,14,-17,14,14,-19,14,-102,14,-12,-18,-55,-20,14,-25,-103,-13,-56,]),'gosub':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[15,15,15,15,15,15,15,15,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,15,-69,-70,-26,-57,-85,-82,-100,-89,-87,15,-34,15,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,15,-11,15,-24,-54,15,-17,15,15,-19,15,-102,15,-12,-18,-55,-20,15,-25,-103,-13,-56,]),'dunkelCls':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[19,19,19,19,19,19,19,19,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,19,-69,-70,-26,-57,-85,-82,-100,-89,-87,19,-34,19,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,19,-11,19,-24,-54,19,-17,19,19,-19,19,-102,19,-12,-18,-55,-20,19,-25,-103,-13,-56,]),'let':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[20,20,20,20,20,20,20,20,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,20,-69,-70,-26,-57,-85,-82,-100,-89,-87,20,-34,20,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,20,-11,20,-24,-54,20,-17,20,20,-19,20,-102,20,-12,-18,-55,-20,20,-25,-103,-13,-56,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,21,22,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,58,60,61,62,66,67,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,155,159,164,165,166,168,169,171,174,176,179,181,182,186,189,193,194,195,198,204,207,208,212,213,214,218,219,225,226,227,234,235,238,239,],[10,10,10,10,10,10,10,30,10,35,36,-62,-78,-79,-80,38,50,38,50,50,-61,-91,38,-81,72,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,72,-26,50,-94,50,-53,50,50,-95,-95,-95,-95,-95,-58,-59,-53,38,38,129,130,-10,-14,-15,-16,-73,50,135,50,50,-95,-95,-95,-95,-95,-95,-95,-95,-27,-94,50,-30,10,50,-69,-70,-26,50,-57,-85,-82,-100,-45,-46,-47,-48,-49,-89,-87,10,-34,10,-28,50,-100,-35,-36,-37,-38,-39,-40,-41,-42,-31,-32,50,-44,-74,-29,-33,-23,50,-101,10,-11,10,-24,50,-54,10,-17,10,50,50,10,-19,10,-102,10,-12,-18,50,-55,-20,10,234,-25,-103,-13,-56,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[21,21,21,21,21,21,21,21,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,21,-69,-70,-26,-57,-85,-82,-100,-89,-87,21,-34,21,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,21,-11,21,-24,-54,21,-17,21,21,-19,21,-102,21,-12,-18,-55,-20,21,-25,-103,-13,-56,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,129,136,137,138,140,149,150,155,159,164,165,166,169,171,174,176,179,182,186,189,193,198,204,207,208,212,213,214,219,225,226,234,235,238,239,],[22,22,22,22,22,22,22,22,-62,-78,-79,-80,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,22,-69,-70,-26,-57,-85,-82,-100,-89,-87,22,-34,22,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,22,-11,22,-24,-54,22,-17,22,22,-19,22,-102,22,-12,-18,-55,-20,22,-25,-103,-13,-56,]),'$end':([1,23,54,170,183,209,220,222,229,230,236,237,240,],[0,-1,-2,-68,-63,-68,-64,-68,-68,-65,-66,-68,-67,]),'loop':([3,4,5,6,7,8,13,16,17,18,19,24,25,26,27,28,29,34,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,136,138,140,149,150,155,159,164,165,166,169,174,179,182,189,204,208,213,214,219,225,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,64,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,-11,-24,-54,-17,-19,-102,-12,-18,-55,-20,-25,-103,-13,-56,]),'wend':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,110,113,114,115,117,118,119,121,127,128,136,138,140,149,150,151,155,159,164,165,166,169,174,179,182,189,204,208,213,214,219,225,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-9,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-28,-100,-31,-32,166,-44,-74,-29,-33,-23,-101,-11,-24,-54,-17,-19,-102,-12,-18,-55,-20,-25,-103,-13,-56,]),'return':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,129,136,138,140,149,150,155,156,159,164,165,166,169,174,179,182,189,204,208,213,214,219,225,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-9,-34,-28,-100,-31,-32,-44,170,-74,-29,-33,-23,-101,-11,-24,-54,-17,-19,-102,-12,-18,-55,-20,-25,-103,-13,-56,]),'else':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,136,137,138,140,149,150,155,159,163,164,165,166,169,174,177,179,182,189,191,204,208,213,214,219,225,226,233,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-9,-28,-100,-31,-32,-44,-74,176,-29,-33,-23,-101,-11,193,-24,-54,-17,-22,-19,-102,-12,-18,-55,-20,-9,-21,-25,-103,-13,-56,]),'elsif':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,136,137,138,140,149,150,155,159,163,164,165,166,169,174,177,179,182,189,191,204,208,213,214,219,225,226,233,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-9,-28,-100,-31,-32,-44,-74,178,-29,-33,-23,-101,-11,178,-24,-54,-17,178,-19,-102,-12,-18,-55,-20,-9,-21,-25,-103,-13,-56,]),'next':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,60,62,67,79,80,81,86,87,88,89,90,106,107,109,113,114,115,117,118,119,121,127,128,136,138,140,149,150,155,159,164,165,166,169,174,179,182,189,204,207,208,213,214,217,219,225,234,235,238,239,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-43,-50,-51,-52,-92,-93,-91,-86,-88,-26,-94,-53,-58,-59,-53,-10,-14,-15,-16,-73,-27,-94,-30,-69,-70,-26,-57,-85,-82,-100,-89,-87,-34,-28,-100,-31,-32,-44,-74,-29,-33,-23,-101,-11,-24,-54,-17,-19,-9,-102,-12,-18,227,-55,-20,-25,-103,-13,-56,]),'open_parenthesis':([10,11,12,20,21,22,31,32,33,39,41,50,58,61,66,69,72,73,74,75,76,77,78,82,83,92,96,97,98,99,100,101,102,103,104,105,108,111,112,116,122,123,124,125,126,130,139,141,142,143,144,145,146,147,148,152,168,178,181,194,195,218,],[-97,32,33,39,41,39,57,58,58,39,39,-97,58,39,58,39,-97,39,-95,-95,-95,-95,-95,39,39,39,39,58,-95,-95,-95,-95,-95,-95,-95,-95,58,152,39,39,-45,-46,-47,-48,-49,157,39,-35,-36,-37,-38,-39,-40,-41,-42,58,39,194,39,58,39,39,]),'string':([21,22,41,69,],[42,52,42,42,]),'word_value':([21,32,33,41,58,61,66,69,73,74,75,76,77,78,92,96,97,98,99,100,101,102,103,104,105,108,112,116,122,123,124,125,126,131,139,141,142,143,144,145,146,147,148,152,168,181,188,194,195,218,224,],[48,48,48,48,48,48,48,48,48,-95,-95,-95,-95,-95,48,48,48,-95,-95,-95,-95,-95,-95,-95,-95,48,48,48,-45,-46,-47,-48,-49,158,48,-35,-36,-37,-38,-39,-40,-41,-42,48,48,48,202,48,48,48,232,]),'float_value':([21,32,33,41,58,61,66,69,73,74,75,76,77,78,92,96,97,98,99,100,101,102,103,104,105,108,112,116,122,123,124,125,126,139,141,142,143,144,145,146,147,148,152,168,181,194,195,218,],[49,49,49,49,49,49,49,49,49,-95,-95,-95,-95,-95,49,49,49,-95,-95,-95,-95,-95,-95,-95,-95,49,49,49,-45,-46,-47,-48,-49,49,-35,-36,-37,-38,-39,-40,-41,-42,49,49,49,49,49,49,]),'sub':([23,170,197,209,211,221,222,229,231,237,],[55,55,209,55,222,229,55,55,237,55,]),'as':([30,171,186,],[56,185,200,]),'not':([32,33,58,61,66,74,75,76,77,78,96,97,98,99,100,101,102,103,104,105,108,122,123,124,125,126,141,142,143,144,145,146,147,148,152,194,],[61,61,61,-95,61,-95,-95,-95,-95,-95,139,61,-95,-95,-95,-95,-95,-95,-95,-95,61,-45,-46,-47,-48,-49,-35,-36,-37,-38,-39,-40,-41,-42,61,61,]),'bool_value':([32,33,58,61,66,97,98,99,100,101,102,103,104,105,108,141,142,143,144,145,146,147,148,152,194,],[62,62,62,107,62,62,-95,-95,-95,-95,-95,-95,-95,-95,62,-35,-36,-37,-38,-39,-40,-41,-42,62,62,]),'equals':([35,37,38,65,67,117,169,182,208,219,235,239,],[-90,66,-91,112,-53,-57,-101,-54,-102,-55,-103,-56,]),'open_brackets':([38,50,67,72,81,86,87,88,89,120,169,174,208,213,],[-91,-91,116,-91,116,131,-14,-15,-16,116,181,188,218,224,]),'comma':([38,40,42,43,44,45,46,47,48,49,50,51,52,53,67,70,71,72,79,80,81,86,87,88,89,90,91,117,118,120,121,127,128,134,135,155,159,160,161,162,169,172,173,174,182,201,208,213,219,235,238,239,],[-91,69,-83,-84,-43,-50,-51,-52,-92,-93,-91,82,83,-88,-53,69,-52,-91,-58,-59,-53,-10,-14,-15,-16,-73,133,-57,69,-53,-100,-89,82,-96,-96,-44,-74,133,-75,-76,-101,187,-71,-11,-54,187,-102,-12,-55,-103,-13,-56,]),'close_parenthesis':([38,42,43,44,45,46,47,48,49,50,57,59,60,62,63,67,68,70,71,72,79,80,81,86,87,88,89,90,91,94,106,107,109,117,118,120,121,132,134,135,136,138,140,149,150,155,157,159,160,161,162,164,165,167,169,172,173,174,182,201,206,208,213,219,235,238,239,],[-91,-83,-84,-43,-50,-51,-52,-92,-93,-91,90,95,-26,-94,110,-53,117,119,117,-91,-58,-59,-53,-10,-14,-15,-16,-73,-98,136,-27,-94,-30,-57,-85,-53,-100,159,-96,-96,-34,-28,-100,-31,-32,-44,171,-74,-77,-75,-76,-29,-33,179,-101,186,-71,-11,-54,-72,216,-102,-12,-55,-103,-13,-56,]),'sum':([43,44,45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,114,115,117,120,121,136,138,140,149,150,153,154,155,159,164,165,167,169,180,182,196,206,207,208,219,228,235,239,],[74,-43,-50,-51,-52,-92,-93,-91,74,-26,-94,74,-52,-91,-58,-59,-53,-73,74,-27,-94,-30,74,74,-26,-57,-53,-100,-34,-28,74,-31,74,74,74,-44,-74,-29,-33,74,-101,74,-54,74,74,74,-102,-55,74,-103,-56,]),'substraction':([43,44,45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,114,115,117,120,121,136,138,140,149,150,153,154,155,159,164,165,167,169,180,182,196,206,207,208,219,228,235,239,],[75,-43,-50,-51,-52,-92,-93,-91,75,-26,-94,75,-52,-91,-58,-59,-53,-73,75,-27,-94,-30,75,75,-26,-57,-53,-100,-34,-28,75,-31,75,75,75,-44,-74,-29,-33,75,-101,75,-54,75,75,75,-102,-55,75,-103,-56,]),'multiplication':([43,44,45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,114,115,117,120,121,136,138,140,149,150,153,154,155,159,164,165,167,169,180,182,196,206,207,208,219,228,235,239,],[76,-43,-50,-51,-52,-92,-93,-91,76,-26,-94,76,-52,-91,-58,-59,-53,-73,76,-27,-94,-30,76,76,-26,-57,-53,-100,-34,-28,76,-31,76,76,76,-44,-74,-29,-33,76,-101,76,-54,76,76,76,-102,-55,76,-103,-56,]),'division':([43,44,45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,114,115,117,120,121,136,138,140,149,150,153,154,155,159,164,165,167,169,180,182,196,206,207,208,219,228,235,239,],[77,-43,-50,-51,-52,-92,-93,-91,77,-26,-94,77,-52,-91,-58,-59,-53,-73,77,-27,-94,-30,77,77,-26,-57,-53,-100,-34,-28,77,-31,77,77,77,-44,-74,-29,-33,77,-101,77,-54,77,77,77,-102,-55,77,-103,-56,]),'exponent':([43,44,45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,114,115,117,120,121,136,138,140,149,150,153,154,155,159,164,165,167,169,180,182,196,206,207,208,219,228,235,239,],[78,-43,-50,-51,-52,-92,-93,-91,78,-26,-94,78,-52,-91,-58,-59,-53,-73,78,-27,-94,-30,78,78,-26,-57,-53,-100,-34,-28,78,-31,78,78,78,-44,-74,-29,-33,78,-101,78,-54,78,78,78,-102,-55,78,-103,-56,]),'to':([44,45,46,47,48,49,50,79,80,81,90,117,121,153,155,159,169,182,208,219,235,239,],[-43,-50,-51,-52,-92,-93,-91,-58,-59,-53,-73,-57,-100,168,-44,-74,-101,-54,-102,-55,-103,-56,]),'close_brackets':([44,45,46,47,48,49,50,79,80,81,90,117,121,154,155,158,159,169,182,196,202,208,219,228,232,235,239,],[-43,-50,-51,-52,-92,-93,-91,-58,-59,-53,-73,-57,-100,169,-44,174,-74,-101,-54,208,213,-102,-55,235,238,-103,-56,]),'step':([44,45,46,47,48,49,50,79,80,81,90,117,121,155,159,169,180,182,208,219,235,239,],[-43,-50,-51,-52,-92,-93,-91,-58,-59,-53,-73,-57,-100,-44,-74,-101,195,-54,-102,-55,-103,-56,]),'and':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,98,-26,-94,98,-52,-91,-58,-59,-53,-73,98,-27,-94,-30,98,-26,-57,-53,-34,-28,98,-31,98,-74,-29,-33,98,-101,-54,98,-102,-55,-103,-56,]),'or':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,99,-26,-94,99,-52,-91,-58,-59,-53,-73,99,-27,-94,-30,99,-26,-57,-53,-34,-28,99,-31,99,-74,-29,-33,99,-101,-54,99,-102,-55,-103,-56,]),'is_equal':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,100,-26,-94,100,-52,-91,-58,-59,-53,-73,100,-27,-94,-30,100,-26,-57,-53,-34,-28,100,-31,100,-74,-29,-33,100,-101,-54,100,-102,-55,-103,-56,]),'is_not_equal':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,101,-26,-94,101,-52,-91,-58,-59,-53,-73,101,-27,-94,-30,101,-26,-57,-53,-34,-28,101,-31,101,-74,-29,-33,101,-101,-54,101,-102,-55,-103,-56,]),'greater_than':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,102,-26,-94,102,-52,-91,-58,-59,-53,-73,102,-27,-94,-30,102,-26,-57,-53,-34,-28,102,-31,102,-74,-29,-33,102,-101,-54,102,-102,-55,-103,-56,]),'greater_or_equal_than':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,103,-26,-94,103,-52,-91,-58,-59,-53,-73,103,-27,-94,-30,103,-26,-57,-53,-34,-28,103,-31,103,-74,-29,-33,103,-101,-54,103,-102,-55,-103,-56,]),'less_than':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,104,-26,-94,104,-52,-91,-58,-59,-53,-73,104,-27,-94,-30,104,-26,-57,-53,-34,-28,104,-31,104,-74,-29,-33,104,-101,-54,104,-102,-55,-103,-56,]),'less_or_equal_than':([45,46,47,48,49,50,59,60,62,63,71,72,79,80,81,90,94,106,107,109,113,115,117,120,136,138,140,149,150,159,164,165,167,169,182,206,208,219,235,239,],[-50,-51,-52,-92,-93,-91,105,-26,-94,105,-52,-91,-58,-59,-53,-73,105,-27,-94,-30,105,-26,-57,-53,-34,-28,105,-31,105,-74,-29,-33,105,-101,-54,105,-102,-55,-103,-56,]),'procedure':([55,],[84,]),'function':([55,],[85,]),'word':([56,185,200,],[87,87,87,]),'float':([56,185,200,],[88,88,88,]),'bool':([56,185,200,],[89,89,89,]),'ByVal':([57,133,],[92,92,]),'ByRef':([57,133,],[93,93,]),'until':([64,],[111,]),'then':([95,216,],[137,226,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[2,24,25,26,27,28,29,34,151,156,163,184,190,199,205,210,217,223,233,]),'variable':([0,3,4,5,6,7,8,13,110,129,137,157,171,176,186,187,193,198,207,212,226,],[3,3,3,3,3,3,3,3,3,3,3,173,3,3,3,173,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'functions':([0,3,4,5,6,7,8,13,21,32,33,41,58,61,66,69,73,92,96,97,108,110,112,116,129,137,139,152,168,171,176,181,186,193,194,195,198,207,212,218,226,],[16,16,16,16,16,16,16,16,46,46,46,46,46,46,46,46,46,46,46,46,46,16,46,46,16,16,46,46,46,16,16,46,16,16,46,46,16,16,16,46,16,]),'print':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'read':([0,3,4,5,6,7,8,13,110,129,137,171,176,186,193,198,207,212,226,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ACTION_ADD_FUNCTION':([10,50,72,],[31,31,31,]),'ids_access':([20,21,22,32,33,39,41,58,61,66,69,73,82,83,92,96,97,108,112,116,139,152,168,181,194,195,218,],[37,47,53,47,47,68,71,71,47,47,47,47,127,53,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'multiple_print':([21,41,69,],[40,70,118,]),'arithmetic_expression':([21,41,66,69,112,116,168,181,195,218,],[43,43,114,43,153,154,180,196,207,228,]),'value':([21,32,33,41,58,61,66,69,73,92,96,97,108,112,116,139,152,168,181,194,195,218,],[44,60,60,44,60,106,115,44,121,134,138,60,60,44,44,164,60,44,44,60,44,44,]),'real_value':([21,32,33,41,58,61,66,69,73,92,96,97,108,112,116,139,152,168,181,194,195,218,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'multiple_read':([22,83,],[51,128,]),'subroutines':([23,170,209,222,229,237,],[54,183,220,230,236,240,]),'logic_expression':([32,33,58,66,97,108,152,194,],[59,63,94,113,140,150,167,206,]),'ACTION_ADD_FOR_VALUE':([35,],[65,]),'ACTION_ADD_VAR_VALUE':([38,50,72,],[67,81,120,]),'arithmetic_operator':([43,59,63,94,113,114,140,150,153,154,167,180,196,206,207,228,],[73,96,96,96,96,73,96,96,73,73,96,73,73,96,73,73,]),'ACTION_ADD_WORD_VALUE':([48,],[79,]),'ACTION_ADD_FLOAT_VALUE':([49,],[80,]),'variable_type':([56,185,200,],[86,198,212,]),'arguments':([57,133,],[91,160,]),'logic_operator':([59,63,94,113,140,150,167,206,],[97,97,97,97,97,97,97,97,]),'ACTION_ADD_OPERATOR':([61,74,75,76,77,78,98,99,100,101,102,103,104,105,],[108,122,123,124,125,126,141,142,143,144,145,146,147,148,]),'ACTION_ADD_BOOL_VALUE':([62,107,],[109,149,]),'ACTION_ADD_PARAMETERS':([91,],[132,]),'ACTION_ADD_QUADRUPLET':([121,140,],[155,165,]),'ACTION_ADD_FUNCTION_OPERAND':([134,135,],[161,162,]),'parameters':([157,187,],[172,201,]),'else_ifs':([163,177,191,],[177,191,191,]),'ACTION_ADD_ONE_DIM_OPERAND':([169,],[182,]),'ACTION_ADD_TWO_DIM_OPERAND':([208,],[219,]),'ACTION_ADD_THREE_DIM_OPERAND':([235,],[239,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',48),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',49),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',57),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',58),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',59),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',60),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',61),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',62),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',63),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',68),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',69),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',70),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',71),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',95),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',96),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',97),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if','conditions',8,'p_conditions','Parser.py',103),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if','conditions',10,'p_conditions','Parser.py',104),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if','conditions',9,'p_conditions','Parser.py',105),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if','conditions',11,'p_conditions','Parser.py',106),
  ('else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic','else_ifs',6,'p_else_ifs','Parser.py',111),
  ('else_ifs -> else_ifs else_ifs','else_ifs',2,'p_else_ifs','Parser.py',112),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',117),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',118),
  ('loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',12,'p_loops','Parser.py',119),
  ('logic_expression -> value','logic_expression',1,'p_logic_expression','Parser.py',124),
  ('logic_expression -> not value','logic_expression',2,'p_logic_expression','Parser.py',125),
  ('logic_expression -> logic_expression arithmetic_operator value','logic_expression',3,'p_logic_expression','Parser.py',126),
  ('logic_expression -> logic_expression arithmetic_operator not value','logic_expression',4,'p_logic_expression','Parser.py',127),
  ('logic_expression -> bool_value ACTION_ADD_BOOL_VALUE','logic_expression',2,'p_logic_expression','Parser.py',128),
  ('logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE','logic_expression',3,'p_logic_expression','Parser.py',129),
  ('logic_expression -> not ACTION_ADD_OPERATOR logic_expression','logic_expression',3,'p_logic_expression','Parser.py',131),
  ('logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET','logic_expression',4,'p_logic_expression','Parser.py',132),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',133),
  ('logic_operator -> and ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',138),
  ('logic_operator -> or ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',139),
  ('logic_operator -> is_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',140),
  ('logic_operator -> is_not_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',141),
  ('logic_operator -> greater_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',142),
  ('logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',143),
  ('logic_operator -> less_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',144),
  ('logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',145),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',150),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET','arithmetic_expression',4,'p_arithmetic_expression','Parser.py',151),
  ('arithmetic_operator -> sum ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',156),
  ('arithmetic_operator -> substraction ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',157),
  ('arithmetic_operator -> multiplication ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',158),
  ('arithmetic_operator -> division ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',159),
  ('arithmetic_operator -> exponent ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',160),
  ('value -> real_value','value',1,'p_value','Parser.py',166),
  ('value -> functions','value',1,'p_value','Parser.py',167),
  ('value -> ids_access','value',1,'p_value','Parser.py',168),
  ('ids_access -> id ACTION_ADD_VAR_VALUE','ids_access',2,'p_ids_access','Parser.py',173),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND','ids_access',6,'p_ids_access','Parser.py',174),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND','ids_access',9,'p_ids_access','Parser.py',175),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND','ids_access',12,'p_ids_access','Parser.py',176),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',177),
  ('real_value -> word_value ACTION_ADD_WORD_VALUE','real_value',2,'p_real_value','Parser.py',182),
  ('real_value -> float_value ACTION_ADD_FLOAT_VALUE','real_value',2,'p_real_value','Parser.py',183),
  ('real_value -> id ACTION_ADD_VAR_VALUE','real_value',2,'p_real_value','Parser.py',184),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',189),
  ('calls -> functions','calls',1,'p_calls','Parser.py',190),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',195),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',196),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',197),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',198),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',199),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',200),
  ('assign -> let ids_access equals logic_expression','assign',4,'p_assign','Parser.py',217),
  ('assign -> let ids_access equals arithmetic_expression','assign',4,'p_assign','Parser.py',218),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',230),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',231),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis','functions',4,'p_functions','Parser.py',236),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis','functions',6,'p_functions','Parser.py',237),
  ('arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',242),
  ('arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',243),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',244),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',249),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',250),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',251),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',256),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',257),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',262),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',263),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',264),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',269),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',270),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',275),
  ('multiple_read -> multiple_read comma ids_access','multiple_read',3,'p_multiple_read','Parser.py',276),
  ('ACTION_ADD_FOR_VALUE -> <empty>','ACTION_ADD_FOR_VALUE',0,'p_action_add_for_value','Parser.py',281),
  ('ACTION_ADD_VAR_VALUE -> <empty>','ACTION_ADD_VAR_VALUE',0,'p_action_add_var_value','Parser.py',291),
  ('ACTION_ADD_WORD_VALUE -> <empty>','ACTION_ADD_WORD_VALUE',0,'p_action_add_word_value','Parser.py',299),
  ('ACTION_ADD_FLOAT_VALUE -> <empty>','ACTION_ADD_FLOAT_VALUE',0,'p_action_add_float_value','Parser.py',305),
  ('ACTION_ADD_BOOL_VALUE -> <empty>','ACTION_ADD_BOOL_VALUE',0,'p_action_add_bool_value','Parser.py',311),
  ('ACTION_ADD_OPERATOR -> <empty>','ACTION_ADD_OPERATOR',0,'p_action_add_operator','Parser.py',317),
  ('ACTION_ADD_FUNCTION_OPERAND -> <empty>','ACTION_ADD_FUNCTION_OPERAND',0,'p_action_add_function_operand','Parser.py',324),
  ('ACTION_ADD_FUNCTION -> <empty>','ACTION_ADD_FUNCTION',0,'p_action_add_function','Parser.py',330),
  ('ACTION_ADD_PARAMETERS -> <empty>','ACTION_ADD_PARAMETERS',0,'p_action_add_parameters','Parser.py',335),
  ('ACTION_ADD_NOT_QUADRUPLET -> <empty>','ACTION_ADD_NOT_QUADRUPLET',0,'p_action_add_not_quadruplet','Parser.py',340),
  ('ACTION_ADD_QUADRUPLET -> <empty>','ACTION_ADD_QUADRUPLET',0,'p_action_add_quadruplet','Parser.py',347),
  ('ACTION_ADD_ONE_DIM_OPERAND -> <empty>','ACTION_ADD_ONE_DIM_OPERAND',0,'p_action_add_one_dim_operand','Parser.py',367),
  ('ACTION_ADD_TWO_DIM_OPERAND -> <empty>','ACTION_ADD_TWO_DIM_OPERAND',0,'p_action_add_two_dim_operand','Parser.py',377),
  ('ACTION_ADD_THREE_DIM_OPERAND -> <empty>','ACTION_ADD_THREE_DIM_OPERAND',0,'p_action_add_three_dim_operand','Parser.py',388),
]
