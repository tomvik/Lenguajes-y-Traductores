
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF\n        conditions : if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF\n        conditions : if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else_ifs end if ACTION_FILL_JUMP_END_IF\n        conditions : if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF\n        \n        else_ifs : elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF\n        else_ifs : else_ifs else_ifs\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : arithmetic_expression        \n        logic_expression : logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operator : and ACTION_ADD_OPERATOR\n        logic_operator : or ACTION_ADD_OPERATOR\n        logic_operator : is_equal ACTION_ADD_OPERATOR\n        logic_operator : is_not_equal ACTION_ADD_OPERATOR\n        logic_operator : greater_than ACTION_ADD_OPERATOR\n        logic_operator : greater_or_equal_than ACTION_ADD_OPERATOR\n        logic_operator : less_than ACTION_ADD_OPERATOR\n        logic_operator : less_or_equal_than ACTION_ADD_OPERATOR\n        \n        arithmetic_expression : value\n        arithmetic_expression : arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET\n        arithmetic_expression : open_parenthesis arithmetic_expression close_parenthesis\n        \n        arithmetic_operator : sum ACTION_ADD_OPERATOR\n        arithmetic_operator : substraction ACTION_ADD_OPERATOR\n        arithmetic_operator : multiplication ACTION_ADD_OPERATOR\n        arithmetic_operator : division ACTION_ADD_OPERATOR\n        arithmetic_operator : exponent ACTION_ADD_OPERATOR\n        \n        possible_values : real_value\n        possible_values : functions\n        possible_values : ids_access\n        \n        value : possible_values\n        value : not possible_values ACTION_ADD_NOT_OPERAND\n        value : open_parenthesis value close_parenthesis\n        \n        ids_access : id ACTION_ADD_VAR_VALUE\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value ACTION_ADD_WORD_VALUE\n        real_value : float_value ACTION_ADD_FLOAT_VALUE\n        real_value : bool_value ACTION_ADD_BOOL_VALUE\n        real_value : id ACTION_ADD_VAR_VALUE\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let ids_access equals logic_expression\n        assign : let ids_access equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis\n        functions : id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis\n        \n        arguments : ByVal value ACTION_ADD_FUNCTION_OPERAND\n        arguments : ByRef id ACTION_ADD_FUNCTION_OPERAND\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access \n        multiple_read : multiple_read comma ids_access\n        \n        ACTION_ADD_FOR_VALUE :\n        \n        ACTION_ADD_VAR_VALUE :\n        \n        ACTION_ADD_WORD_VALUE :\n        \n        ACTION_ADD_FLOAT_VALUE :\n        \n        ACTION_ADD_BOOL_VALUE :\n        \n        ACTION_ADD_OPERATOR :\n        \n        ACTION_ADD_FUNCTION_OPERAND :\n        \n        ACTION_ADD_FUNCTION :\n        \n        ACTION_ADD_PARAMETERS :\n        \n        ACTION_ADD_NOT_OPERAND :\n        \n        ACTION_ADD_QUADRUPLET :\n        \n        ACTION_ADD_ONE_DIM_OPERAND :\n        \n        ACTION_ADD_TWO_DIM_OPERAND :\n        \n        ACTION_ADD_THREE_DIM_OPERAND :\n        \n        ACTION_ADD_QUADRUPLET_EMPTY_JUMP :\n        \n        ACTION_NEW_IF :\n        \n        ACTION_QUADRUPLET_EMPTY_JUMP_END_IF  :\n        \n        ACTION_FILL_JUMP :\n        \n        ACTION_FILL_JUMP_END_IF :\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,142,143,144,157,162,166,167,168,171,173,176,177,178,181,183,185,188,192,193,197,199,201,203,204,205,206,207,211,215,218,219,221,229,230,231,232,234,235,238,239,241,242,244,246,249,250,252,253,254,255,],[-9,23,-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-103,-99,-38,-73,-9,-27,-23,-100,-9,-11,-104,-24,-52,191,-9,-105,-9,202,-106,-101,213,-9,-12,217,-106,220,-53,227,-9,-22,-106,-107,240,-107,-9,-25,-102,-13,-17,-19,247,-54,-107,-18,-107,-20,-9,-105,-21,]),'dim':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,160,162,166,167,168,171,173,176,178,181,185,186,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[9,9,9,9,9,9,9,9,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,9,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,9,-28,-103,-99,-38,9,-73,9,-27,-23,-100,9,-11,-24,-52,9,9,9,9,-101,9,-12,-106,-53,9,-106,-107,-107,9,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,9,]),'if':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,217,218,220,221,229,231,232,234,235,238,239,240,241,244,246,247,249,250,252,253,],[11,11,11,11,11,11,11,11,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,11,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,11,-28,-103,-99,-38,-73,11,-27,-23,-100,11,-11,-24,-52,11,11,11,-101,11,-12,-106,-53,229,11,231,-106,-107,-107,11,-25,-102,-13,-17,246,-19,-54,-107,250,-18,-107,-20,11,]),'while':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[12,12,12,12,12,12,12,12,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,12,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,12,-28,-103,-99,-38,-73,12,-27,-23,-100,12,-11,-24,-52,12,12,12,-101,12,-12,-106,-53,12,-106,-107,-107,12,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,12,]),'do':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[13,13,13,13,13,13,13,13,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,13,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,13,-28,-103,-99,-38,-73,13,-27,-23,-100,13,-11,-24,-52,13,13,13,-101,13,-12,-106,-53,13,-106,-107,-107,13,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,13,]),'for':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[14,14,14,14,14,14,14,14,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,14,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,14,-28,-103,-99,-38,-73,14,-27,-23,-100,14,-11,-24,-52,14,14,14,-101,14,-12,-106,-53,14,-106,-107,-107,14,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,14,]),'gosub':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[15,15,15,15,15,15,15,15,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,15,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,15,-28,-103,-99,-38,-73,15,-27,-23,-100,15,-11,-24,-52,15,15,15,-101,15,-12,-106,-53,15,-106,-107,-107,15,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,15,]),'dunkelCls':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[19,19,19,19,19,19,19,19,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,19,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,19,-28,-103,-99,-38,-73,19,-27,-23,-100,19,-11,-24,-52,19,19,19,-101,19,-12,-106,-53,19,-106,-107,-107,19,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,19,]),'let':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[20,20,20,20,20,20,20,20,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,20,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,20,-28,-103,-99,-38,-73,20,-27,-23,-100,20,-11,-24,-52,20,20,20,-101,20,-12,-106,-53,20,-106,-107,-107,20,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,20,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,21,22,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,61,63,67,68,70,71,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,122,123,125,126,127,128,129,130,131,132,133,134,135,142,143,144,145,146,147,148,149,150,151,152,154,157,162,166,167,168,170,171,173,176,178,180,181,185,189,192,198,199,203,204,206,210,211,218,221,223,229,231,232,233,234,235,238,239,241,244,246,249,250,252,253,],[10,10,10,10,10,10,10,30,10,35,36,-61,-77,-78,-79,38,53,38,53,53,-60,-90,38,-80,76,-82,-83,-37,-48,53,-45,-46,-47,-91,-92,-93,-90,-85,-87,76,-26,53,-51,53,76,53,-94,-94,-94,-94,-94,-98,-56,-57,-58,-51,38,38,135,136,-10,-14,-15,-16,-72,53,141,53,-94,-94,-94,-94,-94,-94,-94,-94,10,53,-68,-26,53,-55,-84,-81,-39,-50,-99,76,-40,-41,-42,-43,-44,-49,-88,-86,10,-28,-103,-99,-29,-30,-31,-32,-33,-34,-35,-36,53,-38,-73,10,-27,-23,53,-100,10,-11,-24,53,-52,10,53,10,10,-101,10,-12,-106,53,-53,10,-106,234,-107,-107,10,53,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,10,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[21,21,21,21,21,21,21,21,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,21,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,21,-28,-103,-99,-38,-73,21,-27,-23,-100,21,-11,-24,-52,21,21,21,-101,21,-12,-106,-53,21,-106,-107,-107,21,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,21,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,135,142,143,144,157,162,166,167,168,171,173,176,178,181,185,192,198,199,203,204,206,211,218,221,229,231,232,234,235,238,239,241,244,246,249,250,252,253,],[22,22,22,22,22,22,22,22,-61,-77,-78,-79,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,22,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,22,-28,-103,-99,-38,-73,22,-27,-23,-100,22,-11,-24,-52,22,22,22,-101,22,-12,-106,-53,22,-106,-107,-107,22,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,22,]),'$end':([1,23,57,172,182,200,212,214,225,226,236,237,245,],[0,-1,-2,-67,-62,-67,-63,-67,-67,-64,-65,-67,-66,]),'loop':([3,4,5,6,7,8,13,16,17,18,19,24,25,26,27,28,29,34,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,142,144,157,162,167,168,171,176,178,181,199,204,211,229,231,234,235,238,239,241,244,246,249,250,252,],[-9,-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,65,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-99,-38,-73,-27,-23,-100,-11,-24,-52,-101,-12,-53,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,]),'wend':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,112,115,116,118,119,121,122,123,125,132,133,134,142,144,153,157,162,167,168,171,176,178,181,199,204,211,229,231,234,235,238,239,241,244,246,249,250,252,],[-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-9,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-99,168,-38,-73,-27,-23,-100,-11,-24,-52,-101,-12,-53,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,]),'return':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,135,142,144,157,159,162,167,168,171,176,178,181,199,204,211,229,231,234,235,238,239,241,244,246,249,250,252,],[-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-9,-28,-99,-38,172,-73,-27,-23,-100,-11,-24,-52,-101,-12,-53,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,]),'else':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,142,143,144,157,162,166,167,168,171,176,177,178,181,188,197,199,204,207,211,219,229,231,234,235,238,239,241,244,246,249,250,252,253,254,255,],[-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-103,-99,-38,-73,-9,-27,-23,-100,-11,-104,-24,-52,-105,206,-101,-12,221,-53,-22,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,-9,-105,-21,]),'elsif':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,142,143,144,157,162,166,167,168,171,176,177,178,181,188,197,199,204,207,211,219,229,231,234,235,238,239,241,244,246,249,250,252,253,254,255,],[-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-103,-99,-38,-73,-9,-27,-23,-100,-11,-104,-24,-52,-105,208,-101,-12,208,-53,208,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,-9,-105,-21,]),'next':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,47,48,49,50,51,52,53,54,56,63,68,83,84,85,86,87,92,93,94,95,96,115,116,118,119,121,122,123,125,132,133,134,142,144,157,162,167,168,171,176,178,181,198,199,204,209,211,229,231,234,235,238,239,241,244,246,249,250,252,],[-9,-9,-9,-9,-9,-9,-61,-77,-78,-79,-3,-4,-5,-6,-7,-8,-60,-90,-80,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,-85,-87,-26,-51,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-68,-26,-55,-84,-81,-39,-50,-99,-49,-88,-86,-28,-99,-38,-73,-27,-23,-100,-11,-24,-52,-9,-101,-12,223,-53,-107,-107,-25,-102,-13,-17,-19,-54,-107,-18,-107,-20,]),'open_parenthesis':([10,11,12,20,21,22,31,32,33,39,41,46,53,61,67,70,71,76,77,78,79,80,81,82,88,89,98,103,104,105,106,107,108,109,110,111,113,114,117,126,127,128,129,130,131,136,145,146,147,148,149,150,151,152,154,170,180,189,208,210,222,233,],[-96,32,33,39,41,39,60,61,61,39,71,39,-96,61,61,71,71,-96,126,-94,-94,-94,-94,-94,39,39,126,61,-94,-94,-94,-94,-94,-94,-94,-94,154,71,71,126,-40,-41,-42,-43,-44,160,-29,-30,-31,-32,-33,-34,-35,-36,61,71,71,71,-106,71,233,61,]),'string':([21,22,41,70,],[42,55,42,42,]),'not':([21,32,33,41,61,67,70,71,77,78,79,80,81,82,98,103,104,105,106,107,108,109,110,111,114,117,126,127,128,129,130,131,145,146,147,148,149,150,151,152,154,170,180,189,210,233,],[46,46,46,46,46,46,46,46,46,-94,-94,-94,-94,-94,46,46,-94,-94,-94,-94,-94,-94,-94,-94,46,46,46,-40,-41,-42,-43,-44,-29,-30,-31,-32,-33,-34,-35,-36,46,46,46,46,46,46,]),'word_value':([21,32,33,41,46,61,67,70,71,77,78,79,80,81,82,98,103,104,105,106,107,108,109,110,111,114,117,126,127,128,129,130,131,137,145,146,147,148,149,150,151,152,154,170,180,187,189,210,216,233,],[50,50,50,50,50,50,50,50,50,50,-94,-94,-94,-94,-94,50,50,-94,-94,-94,-94,-94,-94,-94,-94,50,50,50,-40,-41,-42,-43,-44,161,-29,-30,-31,-32,-33,-34,-35,-36,50,50,50,196,50,50,228,50,]),'float_value':([21,32,33,41,46,61,67,70,71,77,78,79,80,81,82,98,103,104,105,106,107,108,109,110,111,114,117,126,127,128,129,130,131,145,146,147,148,149,150,151,152,154,170,180,189,210,233,],[51,51,51,51,51,51,51,51,51,51,-94,-94,-94,-94,-94,51,51,-94,-94,-94,-94,-94,-94,-94,-94,51,51,51,-40,-41,-42,-43,-44,-29,-30,-31,-32,-33,-34,-35,-36,51,51,51,51,51,51,]),'bool_value':([21,32,33,41,46,61,67,70,71,77,78,79,80,81,82,98,103,104,105,106,107,108,109,110,111,114,117,126,127,128,129,130,131,145,146,147,148,149,150,151,152,154,170,180,189,210,233,],[52,52,52,52,52,52,52,52,52,52,-94,-94,-94,-94,-94,52,52,-94,-94,-94,-94,-94,-94,-94,-94,52,52,52,-40,-41,-42,-43,-44,-29,-30,-31,-32,-33,-34,-35,-36,52,52,52,52,52,52,]),'sub':([23,172,191,200,202,213,214,225,227,237,],[58,58,200,58,214,225,58,58,237,58,]),'as':([30,173,185,],[59,184,194,]),'equals':([35,37,38,66,68,118,171,181,199,211,235,244,],[-89,67,-90,114,-51,-55,-100,-52,-101,-53,-102,-54,]),'open_brackets':([38,53,68,76,87,92,93,94,95,124,171,176,199,204,],[-90,-90,117,-90,117,137,-14,-15,-16,117,180,187,210,216,]),'comma':([38,40,42,43,44,45,47,48,49,50,51,52,53,54,55,56,68,72,73,74,75,76,83,84,85,86,87,92,93,94,95,96,97,118,119,122,123,124,125,132,133,134,140,141,157,162,163,164,165,171,174,175,176,181,195,199,204,211,235,238,244,],[-90,70,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,88,89,-87,-51,70,-83,-37,-47,-90,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,139,-55,70,-39,-50,-51,-99,-49,-88,88,-95,-95,-38,-73,139,-74,-75,-100,186,-70,-11,-52,186,-101,-12,-53,-102,-13,-54,]),'close_parenthesis':([38,42,43,44,45,47,48,49,50,51,52,53,60,62,63,64,68,69,72,73,74,75,76,83,84,85,86,87,92,93,94,95,96,97,100,101,118,119,120,122,123,124,125,132,138,140,141,142,144,157,158,160,162,163,164,165,167,169,171,174,175,176,181,195,199,204,211,235,238,243,244,],[-90,-82,-83,-37,-48,-45,-46,-47,-91,-92,-93,-90,96,102,-26,112,-51,118,121,122,123,118,-90,-98,-56,-57,-58,-51,-10,-14,-15,-16,-72,-97,142,122,-55,-84,122,-39,-50,-51,-99,-49,162,-95,-95,-28,-99,-38,123,173,-73,-76,-74,-75,-27,178,-100,185,-70,-11,-52,-71,-101,-12,-53,-102,-13,248,-54,]),'sum':([43,44,45,47,48,49,50,51,52,53,63,73,74,75,76,83,84,85,86,87,96,101,116,118,120,122,123,124,125,132,155,156,157,162,171,179,181,190,198,199,211,224,235,244,],[78,-37,-48,-45,-46,-47,-91,-92,-93,-90,78,78,-37,-47,-90,-98,-56,-57,-58,-51,-72,78,78,-55,78,-39,-50,-51,-99,-49,78,78,-38,-73,-100,78,-52,78,78,-101,-53,78,-102,-54,]),'substraction':([43,44,45,47,48,49,50,51,52,53,63,73,74,75,76,83,84,85,86,87,96,101,116,118,120,122,123,124,125,132,155,156,157,162,171,179,181,190,198,199,211,224,235,244,],[79,-37,-48,-45,-46,-47,-91,-92,-93,-90,79,79,-37,-47,-90,-98,-56,-57,-58,-51,-72,79,79,-55,79,-39,-50,-51,-99,-49,79,79,-38,-73,-100,79,-52,79,79,-101,-53,79,-102,-54,]),'multiplication':([43,44,45,47,48,49,50,51,52,53,63,73,74,75,76,83,84,85,86,87,96,101,116,118,120,122,123,124,125,132,155,156,157,162,171,179,181,190,198,199,211,224,235,244,],[80,-37,-48,-45,-46,-47,-91,-92,-93,-90,80,80,-37,-47,-90,-98,-56,-57,-58,-51,-72,80,80,-55,80,-39,-50,-51,-99,-49,80,80,-38,-73,-100,80,-52,80,80,-101,-53,80,-102,-54,]),'division':([43,44,45,47,48,49,50,51,52,53,63,73,74,75,76,83,84,85,86,87,96,101,116,118,120,122,123,124,125,132,155,156,157,162,171,179,181,190,198,199,211,224,235,244,],[81,-37,-48,-45,-46,-47,-91,-92,-93,-90,81,81,-37,-47,-90,-98,-56,-57,-58,-51,-72,81,81,-55,81,-39,-50,-51,-99,-49,81,81,-38,-73,-100,81,-52,81,81,-101,-53,81,-102,-54,]),'exponent':([43,44,45,47,48,49,50,51,52,53,63,73,74,75,76,83,84,85,86,87,96,101,116,118,120,122,123,124,125,132,155,156,157,162,171,179,181,190,198,199,211,224,235,244,],[82,-37,-48,-45,-46,-47,-91,-92,-93,-90,82,82,-37,-47,-90,-98,-56,-57,-58,-51,-72,82,82,-55,82,-39,-50,-51,-99,-49,82,82,-38,-73,-100,82,-52,82,82,-101,-53,82,-102,-54,]),'and':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,104,-26,104,-37,-47,-90,-98,-56,-57,-58,-51,-72,104,-26,104,-26,-55,-39,-50,-51,-99,-49,-28,104,-38,-73,-27,104,-100,-52,-101,-53,-102,104,-54,]),'or':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,105,-26,105,-37,-47,-90,-98,-56,-57,-58,-51,-72,105,-26,105,-26,-55,-39,-50,-51,-99,-49,-28,105,-38,-73,-27,105,-100,-52,-101,-53,-102,105,-54,]),'is_equal':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,106,-26,106,-37,-47,-90,-98,-56,-57,-58,-51,-72,106,-26,106,-26,-55,-39,-50,-51,-99,-49,-28,106,-38,-73,-27,106,-100,-52,-101,-53,-102,106,-54,]),'is_not_equal':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,107,-26,107,-37,-47,-90,-98,-56,-57,-58,-51,-72,107,-26,107,-26,-55,-39,-50,-51,-99,-49,-28,107,-38,-73,-27,107,-100,-52,-101,-53,-102,107,-54,]),'greater_than':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,108,-26,108,-37,-47,-90,-98,-56,-57,-58,-51,-72,108,-26,108,-26,-55,-39,-50,-51,-99,-49,-28,108,-38,-73,-27,108,-100,-52,-101,-53,-102,108,-54,]),'greater_or_equal_than':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,109,-26,109,-37,-47,-90,-98,-56,-57,-58,-51,-72,109,-26,109,-26,-55,-39,-50,-51,-99,-49,-28,109,-38,-73,-27,109,-100,-52,-101,-53,-102,109,-54,]),'less_than':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,110,-26,110,-37,-47,-90,-98,-56,-57,-58,-51,-72,110,-26,110,-26,-55,-39,-50,-51,-99,-49,-28,110,-38,-73,-27,110,-100,-52,-101,-53,-102,110,-54,]),'less_or_equal_than':([44,45,47,48,49,50,51,52,53,62,63,64,74,75,76,83,84,85,86,87,96,100,101,115,116,118,122,123,124,125,132,142,144,157,162,167,169,171,181,199,211,235,243,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,111,-26,111,-37,-47,-90,-98,-56,-57,-58,-51,-72,111,-26,111,-26,-55,-39,-50,-51,-99,-49,-28,111,-38,-73,-27,111,-100,-52,-101,-53,-102,111,-54,]),'to':([44,45,47,48,49,50,51,52,53,83,84,85,86,87,96,118,122,123,125,132,155,157,162,171,181,199,211,235,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,-98,-56,-57,-58,-51,-72,-55,-39,-50,-99,-49,170,-38,-73,-100,-52,-101,-53,-102,-54,]),'close_brackets':([44,45,47,48,49,50,51,52,53,83,84,85,86,87,96,118,122,123,125,132,156,157,161,162,171,181,190,196,199,211,224,228,235,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,-98,-56,-57,-58,-51,-72,-55,-39,-50,-99,-49,171,-38,176,-73,-100,-52,199,204,-101,-53,235,238,-102,-54,]),'step':([44,45,47,48,49,50,51,52,53,83,84,85,86,87,96,118,122,123,125,132,157,162,171,179,181,199,211,235,244,],[-37,-48,-45,-46,-47,-91,-92,-93,-90,-98,-56,-57,-58,-51,-72,-55,-39,-50,-99,-49,-38,-73,-100,189,-52,-101,-53,-102,-54,]),'procedure':([58,],[90,]),'function':([58,],[91,]),'word':([59,184,194,],[93,93,93,]),'float':([59,184,194,],[94,94,94,]),'bool':([59,184,194,],[95,95,95,]),'ByVal':([60,139,],[98,98,]),'ByRef':([60,139,],[99,99,]),'until':([65,],[113,]),'then':([102,248,251,],[143,-103,253,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[2,24,25,26,27,28,29,34,153,159,177,183,193,201,209,215,230,242,254,]),'variable':([0,3,4,5,6,7,8,13,112,135,160,166,173,185,186,192,198,203,218,232,253,],[3,3,3,3,3,3,3,3,3,3,175,3,3,3,175,3,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'functions':([0,3,4,5,6,7,8,13,21,32,33,41,46,61,67,70,71,77,98,103,112,114,117,126,135,154,166,170,173,180,185,189,192,198,203,210,218,232,233,253,],[16,16,16,16,16,16,16,16,48,48,48,48,48,48,48,48,48,48,48,48,16,48,48,48,16,48,16,48,16,48,16,48,16,16,16,48,16,16,48,16,]),'print':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'read':([0,3,4,5,6,7,8,13,112,135,166,173,185,192,198,203,218,232,253,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ACTION_ADD_FUNCTION':([10,53,76,],[31,31,31,]),'ids_access':([20,21,22,32,33,39,41,46,61,67,70,71,77,88,89,98,103,114,117,126,154,170,180,189,210,233,],[37,49,56,49,49,69,75,49,75,49,49,75,49,133,56,49,49,49,49,75,49,49,49,49,49,49,]),'multiple_print':([21,41,70,],[40,72,119,]),'arithmetic_expression':([21,32,33,41,61,67,70,71,103,114,117,154,170,180,189,210,233,],[43,63,63,73,101,116,43,120,63,155,156,63,179,190,198,224,63,]),'value':([21,32,33,41,61,67,70,71,77,98,103,114,117,126,154,170,180,189,210,233,],[44,44,44,74,74,44,44,74,125,140,44,44,44,158,44,44,44,44,44,44,]),'possible_values':([21,32,33,41,46,61,67,70,71,77,98,103,114,117,126,154,170,180,189,210,233,],[45,45,45,45,83,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'real_value':([21,32,33,41,46,61,67,70,71,77,98,103,114,117,126,154,170,180,189,210,233,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'multiple_read':([22,89,],[54,134,]),'subroutines':([23,172,200,214,225,237,],[57,182,212,226,236,245,]),'logic_expression':([32,33,61,67,103,154,233,],[62,64,100,115,144,169,243,]),'ACTION_ADD_FOR_VALUE':([35,],[66,]),'ACTION_ADD_VAR_VALUE':([38,53,76,],[68,87,124,]),'arithmetic_operator':([43,63,73,101,116,120,155,156,179,190,198,224,],[77,77,77,77,77,77,77,77,77,77,77,77,]),'ACTION_ADD_WORD_VALUE':([50,],[84,]),'ACTION_ADD_FLOAT_VALUE':([51,],[85,]),'ACTION_ADD_BOOL_VALUE':([52,],[86,]),'variable_type':([59,184,194,],[92,192,203,]),'arguments':([60,139,],[97,163,]),'logic_operator':([62,64,100,115,144,169,243,],[103,103,103,103,103,103,103,]),'ACTION_ADD_OPERATOR':([78,79,80,81,82,104,105,106,107,108,109,110,111,],[127,128,129,130,131,145,146,147,148,149,150,151,152,]),'ACTION_ADD_NOT_OPERAND':([83,],[132,]),'ACTION_ADD_PARAMETERS':([97,],[138,]),'ACTION_ADD_QUADRUPLET':([125,144,],[157,167,]),'ACTION_ADD_FUNCTION_OPERAND':([140,141,],[164,165,]),'ACTION_ADD_QUADRUPLET_EMPTY_JUMP':([143,248,],[166,251,]),'parameters':([160,186,],[174,195,]),'ACTION_ADD_ONE_DIM_OPERAND':([171,],[181,]),'ACTION_NEW_IF':([177,],[188,]),'ACTION_QUADRUPLET_EMPTY_JUMP_END_IF':([188,254,],[197,255,]),'ACTION_FILL_JUMP':([197,206,208,221,],[205,218,222,232,]),'else_ifs':([197,207,219,],[207,219,219,]),'ACTION_ADD_TWO_DIM_OPERAND':([199,],[211,]),'ACTION_FILL_JUMP_END_IF':([229,231,246,250,],[239,241,249,252,]),'ACTION_ADD_THREE_DIM_OPERAND':([235,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',62),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',63),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',71),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',72),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',73),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',74),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',75),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',76),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',77),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',82),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',83),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',84),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',85),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',109),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',110),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',111),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF','conditions',13,'p_conditions','Parser.py',117),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF','conditions',15,'p_conditions','Parser.py',118),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else_ifs end if ACTION_FILL_JUMP_END_IF','conditions',13,'p_conditions','Parser.py',119),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF','conditions',16,'p_conditions','Parser.py',120),
  ('else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF','else_ifs',9,'p_else_ifs','Parser.py',125),
  ('else_ifs -> else_ifs else_ifs','else_ifs',2,'p_else_ifs','Parser.py',126),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',131),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',132),
  ('loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',12,'p_loops','Parser.py',133),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',138),
  ('logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET','logic_expression',4,'p_logic_expression','Parser.py',139),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',140),
  ('logic_operator -> and ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',145),
  ('logic_operator -> or ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',146),
  ('logic_operator -> is_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',147),
  ('logic_operator -> is_not_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',148),
  ('logic_operator -> greater_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',149),
  ('logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',150),
  ('logic_operator -> less_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',151),
  ('logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',152),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',157),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET','arithmetic_expression',4,'p_arithmetic_expression','Parser.py',158),
  ('arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',159),
  ('arithmetic_operator -> sum ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',164),
  ('arithmetic_operator -> substraction ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',165),
  ('arithmetic_operator -> multiplication ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',166),
  ('arithmetic_operator -> division ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',167),
  ('arithmetic_operator -> exponent ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',168),
  ('possible_values -> real_value','possible_values',1,'p_possible_values','Parser.py',173),
  ('possible_values -> functions','possible_values',1,'p_possible_values','Parser.py',174),
  ('possible_values -> ids_access','possible_values',1,'p_possible_values','Parser.py',175),
  ('value -> possible_values','value',1,'p_value','Parser.py',180),
  ('value -> not possible_values ACTION_ADD_NOT_OPERAND','value',3,'p_value','Parser.py',181),
  ('value -> open_parenthesis value close_parenthesis','value',3,'p_value','Parser.py',182),
  ('ids_access -> id ACTION_ADD_VAR_VALUE','ids_access',2,'p_ids_access','Parser.py',187),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND','ids_access',6,'p_ids_access','Parser.py',188),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND','ids_access',9,'p_ids_access','Parser.py',189),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND','ids_access',12,'p_ids_access','Parser.py',190),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',191),
  ('real_value -> word_value ACTION_ADD_WORD_VALUE','real_value',2,'p_real_value','Parser.py',196),
  ('real_value -> float_value ACTION_ADD_FLOAT_VALUE','real_value',2,'p_real_value','Parser.py',197),
  ('real_value -> bool_value ACTION_ADD_BOOL_VALUE','real_value',2,'p_real_value','Parser.py',198),
  ('real_value -> id ACTION_ADD_VAR_VALUE','real_value',2,'p_real_value','Parser.py',199),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',204),
  ('calls -> functions','calls',1,'p_calls','Parser.py',205),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',210),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',211),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',212),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',213),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',214),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',215),
  ('assign -> let ids_access equals logic_expression','assign',4,'p_assign','Parser.py',232),
  ('assign -> let ids_access equals arithmetic_expression','assign',4,'p_assign','Parser.py',233),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',245),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',246),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis','functions',4,'p_functions','Parser.py',251),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis','functions',6,'p_functions','Parser.py',252),
  ('arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',257),
  ('arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',258),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',259),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',264),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',265),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',266),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',271),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',272),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',277),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',278),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',279),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',284),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',285),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',290),
  ('multiple_read -> multiple_read comma ids_access','multiple_read',3,'p_multiple_read','Parser.py',291),
  ('ACTION_ADD_FOR_VALUE -> <empty>','ACTION_ADD_FOR_VALUE',0,'p_action_add_for_value','Parser.py',296),
  ('ACTION_ADD_VAR_VALUE -> <empty>','ACTION_ADD_VAR_VALUE',0,'p_action_add_var_value','Parser.py',306),
  ('ACTION_ADD_WORD_VALUE -> <empty>','ACTION_ADD_WORD_VALUE',0,'p_action_add_word_value','Parser.py',314),
  ('ACTION_ADD_FLOAT_VALUE -> <empty>','ACTION_ADD_FLOAT_VALUE',0,'p_action_add_float_value','Parser.py',320),
  ('ACTION_ADD_BOOL_VALUE -> <empty>','ACTION_ADD_BOOL_VALUE',0,'p_action_add_bool_value','Parser.py',326),
  ('ACTION_ADD_OPERATOR -> <empty>','ACTION_ADD_OPERATOR',0,'p_action_add_operator','Parser.py',332),
  ('ACTION_ADD_FUNCTION_OPERAND -> <empty>','ACTION_ADD_FUNCTION_OPERAND',0,'p_action_add_function_operand','Parser.py',338),
  ('ACTION_ADD_FUNCTION -> <empty>','ACTION_ADD_FUNCTION',0,'p_action_add_function','Parser.py',346),
  ('ACTION_ADD_PARAMETERS -> <empty>','ACTION_ADD_PARAMETERS',0,'p_action_add_parameters','Parser.py',355),
  ('ACTION_ADD_NOT_OPERAND -> <empty>','ACTION_ADD_NOT_OPERAND',0,'p_action_add_not_operand','Parser.py',368),
  ('ACTION_ADD_QUADRUPLET -> <empty>','ACTION_ADD_QUADRUPLET',0,'p_action_add_quadruplet','Parser.py',383),
  ('ACTION_ADD_ONE_DIM_OPERAND -> <empty>','ACTION_ADD_ONE_DIM_OPERAND',0,'p_action_add_one_dim_operand','Parser.py',403),
  ('ACTION_ADD_TWO_DIM_OPERAND -> <empty>','ACTION_ADD_TWO_DIM_OPERAND',0,'p_action_add_two_dim_operand','Parser.py',413),
  ('ACTION_ADD_THREE_DIM_OPERAND -> <empty>','ACTION_ADD_THREE_DIM_OPERAND',0,'p_action_add_three_dim_operand','Parser.py',424),
  ('ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> <empty>','ACTION_ADD_QUADRUPLET_EMPTY_JUMP',0,'p_action_add_quadruplet_empty_jump','Parser.py',436),
  ('ACTION_NEW_IF -> <empty>','ACTION_NEW_IF',0,'p_action_new_if','Parser.py',446),
  ('ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> <empty>','ACTION_QUADRUPLET_EMPTY_JUMP_END_IF',0,'p_action_quadruplet_empty_jump_end_if','Parser.py',453),
  ('ACTION_FILL_JUMP -> <empty>','ACTION_FILL_JUMP',0,'p_action_fill_jump','Parser.py',462),
  ('ACTION_FILL_JUMP_END_IF -> <empty>','ACTION_FILL_JUMP_END_IF',0,'p_action_fill_jump_end_if','Parser.py',468),
]
