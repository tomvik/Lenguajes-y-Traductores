
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic end if\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : arithmetic_expression\n        logic_expression : compared_to_bool\n        logic_expression : arithmetic_expression logic_operand arithmetic_expression\n        logic_expression : logic_expression logic_operand logic_expression\n        logic_expression : not logic_expression\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operand : and\n        logic_operand : or\n        logic_operand : not\n        logic_operand : is_equal\n        logic_operand : is_not_equal\n        logic_operand : greater_than\n        logic_operand : greater_or_equal_than\n        logic_operand : less_than\n        logic_operand : less_or_equal_than\n        \n        compared_to_bool : arithmetic_expression is_equal bool_value\n        compared_to_bool : arithmetic_expression is_not_equal bool_value\n        compared_to_bool : bool_value is_equal arithmetic_expression\n        compared_to_bool : bool_value is_not_equal arithmetic_expression\n        \n        arithmetic_expression : value\n        arithmetic_expression : value arithmetic_operand value\n        \n        arithmetic_operand : sum\n        arithmetic_operand : substraction\n        arithmetic_operand : multiplication\n        arithmetic_operand : division\n        arithmetic_operand : exponent\n        \n        value : real_value\n        value : functions\n        value : open_parenthesis arithmetic_expression close_parenthesis\n        value : ids_access\n        \n        ids_access : id\n        ids_access : id open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value\n        real_value : float_value\n        real_value : id\n        \n        calls : gosub id\n        calls : id open_parenthesis close_parenthesis\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let id equals logic_expression\n        assign : let id equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id open_parenthesis close_parenthesis\n        functions : id open_parenthesis arguments close_parenthesis\n        \n        arguments : ByVal value\n        arguments : ByRef id\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : value\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access\n        multiple_read : multiple_read comma multiple_read\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,22,23,24,25,26,27,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,114,115,116,117,118,119,120,125,126,130,131,132,133,134,135,136,137,138,142,146,150,151,157,160,162,166,168,171,173,175,176,183,185,186,192,194,195,202,],[-9,21,-9,-9,-9,-9,-9,-9,-76,-77,-3,-4,-5,-6,-7,-8,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,-67,-21,-82,-79,-49,-55,-71,-86,-84,-26,-9,-24,-23,-36,-37,-41,-38,-39,-72,-52,161,-18,-9,-11,-19,174,-9,-17,-53,-9,184,190,-9,-12,198,-20,-54,-13,]),'dim':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,148,151,157,160,162,168,169,171,172,173,175,185,186,194,195,202,],[9,9,9,9,9,9,9,9,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,9,-67,-21,-82,-79,-49,-55,-71,-86,-84,9,-26,9,-24,-23,-36,-37,-41,-38,-39,-72,-52,9,-18,9,-11,-19,9,9,-17,9,-53,9,9,-12,-20,-54,-13,]),'if':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,161,162,168,171,172,173,175,185,186,194,195,202,],[11,11,11,11,11,11,11,11,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,11,-67,-21,-82,-79,-49,-55,-71,-86,-84,11,-26,11,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,11,-11,171,-19,11,-17,11,-53,11,11,-12,-20,-54,-13,]),'while':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[12,12,12,12,12,12,12,12,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,12,-67,-21,-82,-79,-49,-55,-71,-86,-84,12,-26,12,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,12,-11,-19,12,-17,12,-53,12,12,-12,-20,-54,-13,]),'do':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[13,13,13,13,13,13,13,13,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,13,-67,-21,-82,-79,-49,-55,-71,-86,-84,13,-26,13,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,13,-11,-19,13,-17,13,-53,13,13,-12,-20,-54,-13,]),'for':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[14,14,14,14,14,14,14,14,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,14,-67,-21,-82,-79,-49,-55,-71,-86,-84,14,-26,14,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,14,-11,-19,14,-17,14,-53,14,14,-12,-20,-54,-13,]),'gosub':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[15,15,15,15,15,15,15,15,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,15,-67,-21,-82,-79,-49,-55,-71,-86,-84,15,-26,15,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,15,-11,-19,15,-17,15,-53,15,15,-12,-20,-54,-13,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,30,31,34,36,37,38,39,40,41,42,43,44,45,46,48,49,50,54,55,57,58,59,60,64,65,66,67,74,75,76,78,79,80,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,114,115,116,117,118,119,120,122,123,125,126,127,130,131,132,133,134,135,136,137,138,140,141,142,146,151,155,157,160,162,163,168,171,172,173,175,181,185,186,187,194,195,202,],[10,10,10,10,10,10,10,28,10,33,34,-76,-77,35,45,49,45,45,-59,-78,72,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,49,-60,72,-21,-22,45,-40,45,45,45,72,45,49,49,127,128,-10,-14,-15,-16,72,45,-27,-28,-29,-30,-31,-32,-33,-34,-35,45,-30,-31,-25,45,-42,-43,-44,-45,-46,45,45,10,72,-67,-21,-82,-79,-49,-55,-71,45,145,-86,-84,10,-26,10,-24,-23,-36,-37,-41,-38,-39,45,45,-72,-52,-18,45,10,-11,-19,45,10,-17,10,-53,10,45,10,-12,194,-20,-54,-13,]),'let':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[18,18,18,18,18,18,18,18,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,18,-67,-21,-82,-79,-49,-55,-71,-86,-84,18,-26,18,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,18,-11,-19,18,-17,18,-53,18,18,-12,-20,-54,-13,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[19,19,19,19,19,19,19,19,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,19,-67,-21,-82,-79,-49,-55,-71,-86,-84,19,-26,19,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,19,-11,-19,19,-17,19,-53,19,19,-12,-20,-54,-13,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,127,130,131,132,133,134,135,136,137,138,142,146,151,157,160,162,168,171,172,173,175,185,186,194,195,202,],[20,20,20,20,20,20,20,20,-76,-77,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,20,-67,-21,-82,-79,-49,-55,-71,-86,-84,20,-26,20,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,20,-11,-19,20,-17,20,-53,20,20,-12,-20,-54,-13,]),'$end':([1,21,51,156,165,182,189,191,196,197,200,201,203,],[0,-1,-2,-66,-61,-66,-62,-66,-66,-63,-64,-66,-65,]),'loop':([3,4,5,6,7,8,13,16,17,22,23,24,25,26,27,32,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,114,115,116,117,118,119,120,125,126,130,132,133,134,135,136,137,138,142,146,151,160,162,171,173,186,194,195,202,],[-9,-9,-9,-9,-9,-9,-9,-76,-77,-3,-4,-5,-6,-7,-8,63,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,-67,-21,-82,-79,-49,-55,-71,-86,-84,-26,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,-11,-19,-17,-53,-12,-20,-54,-13,]),'wend':([3,4,5,6,7,8,16,17,22,23,24,25,26,27,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,110,114,115,116,117,118,119,120,125,126,130,132,133,134,135,136,137,138,139,142,146,151,160,162,171,173,186,194,195,202,],[-9,-9,-9,-9,-9,-9,-76,-77,-3,-4,-5,-6,-7,-8,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,-9,-67,-21,-82,-79,-49,-55,-71,-86,-84,-26,-24,-23,-36,-37,-41,-38,-39,151,-72,-52,-18,-11,-19,-17,-53,-12,-20,-54,-13,]),'return':([3,4,5,6,7,8,16,17,22,23,24,25,26,27,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,114,115,116,117,118,119,120,125,126,127,130,132,133,134,135,136,137,138,142,146,147,151,160,162,171,173,186,194,195,202,],[-9,-9,-9,-9,-9,-9,-76,-77,-3,-4,-5,-6,-7,-8,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,-67,-21,-82,-79,-49,-55,-71,-86,-84,-9,-26,-24,-23,-36,-37,-41,-38,-39,-72,-52,156,-18,-11,-19,-17,-53,-12,-20,-54,-13,]),'next':([3,4,5,6,7,8,16,17,22,23,24,25,26,27,34,36,38,39,40,41,42,43,44,45,46,48,49,54,57,58,60,80,81,82,83,101,114,115,116,117,118,119,120,125,126,130,132,133,134,135,136,137,138,142,146,151,160,162,171,172,173,180,186,194,195,202,],[-9,-9,-9,-9,-9,-9,-76,-77,-3,-4,-5,-6,-7,-8,-59,-78,-80,-81,-47,-48,-50,-56,-57,-51,-83,-85,-51,-60,-21,-22,-40,-10,-14,-15,-16,-25,-67,-21,-82,-79,-49,-55,-71,-86,-84,-26,-24,-23,-36,-37,-41,-38,-39,-72,-52,-18,-11,-19,-17,-9,-53,187,-12,-20,-54,-13,]),'open_parenthesis':([10,11,12,19,20,30,31,37,45,50,55,59,64,65,66,67,72,74,75,76,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,111,113,122,128,140,141,155,163,181,],[29,30,31,37,50,55,55,67,73,50,84,55,113,55,113,67,73,113,50,50,84,55,-27,-28,-29,-30,-31,-32,-33,-34,-35,113,-30,-31,113,-42,-43,-44,-45,-46,113,113,140,67,113,148,55,113,113,113,113,]),'string':([19,20,37,66,],[38,47,38,38,]),'word_value':([19,30,31,37,55,59,64,65,66,67,74,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,113,122,129,140,141,155,163,170,181,193,],[43,43,43,43,43,43,43,43,43,43,43,43,43,-27,-28,-29,-30,-31,-32,-33,-34,-35,43,-30,-31,43,-42,-43,-44,-45,-46,43,43,43,43,149,43,43,43,43,179,43,199,]),'float_value':([19,30,31,37,55,59,64,65,66,67,74,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,113,122,140,141,155,163,181,],[44,44,44,44,44,44,44,44,44,44,44,44,44,-27,-28,-29,-30,-31,-32,-33,-34,-35,44,-30,-31,44,-42,-43,-44,-45,-46,44,44,44,44,44,44,44,44,44,]),'sub':([21,156,174,182,184,190,191,196,198,201,],[52,52,182,52,191,196,52,52,201,52,]),'as':([28,157,168,],[53,167,177,]),'close_parenthesis':([29,38,39,40,41,42,43,44,45,49,56,57,58,60,62,68,69,70,71,72,73,77,80,81,82,83,85,86,101,116,118,119,120,121,130,132,133,134,135,136,137,138,142,144,145,146,148,152,154,158,159,160,173,178,186,195,202,],[54,-80,-81,-47,-48,-50,-56,-57,-51,-51,87,-21,-22,-40,110,117,118,119,-40,-51,120,119,-10,-14,-15,-16,130,118,-25,-82,-49,-55,-71,142,-26,-24,-23,-36,-37,-41,-38,-39,-72,-73,-74,-52,157,162,-75,168,-69,-11,-53,-70,-12,-54,-13,]),'not':([30,31,40,41,42,43,44,45,55,56,57,58,59,60,62,65,70,72,84,85,86,88,89,90,91,92,93,94,95,96,97,101,114,115,118,119,120,130,132,133,134,135,136,137,138,140,142,146,152,173,195,],[59,59,-47,-48,-50,-56,-57,-51,59,91,91,-22,59,-40,91,59,-50,-51,59,91,91,59,-27,-28,-29,-30,-31,-32,-33,-34,-35,91,91,91,-49,-55,-71,-26,91,-23,-36,-37,-41,-38,-39,59,-72,-52,91,-53,-54,]),'bool_value':([30,31,55,59,65,84,88,89,90,91,92,93,94,95,96,97,99,100,140,],[61,61,61,61,61,61,61,-27,-28,-29,-30,-31,-32,-33,-34,-35,134,135,61,]),'equals':([33,35,],[64,65,]),'comma':([36,38,39,40,41,42,43,44,45,46,47,48,49,68,70,71,72,80,81,82,83,116,118,119,120,121,125,126,142,144,145,146,154,158,159,160,173,178,186,195,202,],[66,-80,-81,-47,-48,-50,-56,-57,-51,75,76,-85,-51,66,-50,-81,-51,-10,-14,-15,-16,66,-49,-55,-71,143,75,75,-72,-73,-74,-52,143,169,-69,-11,-53,169,-12,-54,-13,]),'sum':([40,41,42,43,44,45,60,70,71,72,118,119,120,142,146,173,195,],[-47,-48,-50,-56,-57,-51,103,-50,103,-51,-49,-55,-71,-72,-52,-53,-54,]),'substraction':([40,41,42,43,44,45,60,70,71,72,118,119,120,142,146,173,195,],[-47,-48,-50,-56,-57,-51,104,-50,104,-51,-49,-55,-71,-72,-52,-53,-54,]),'multiplication':([40,41,42,43,44,45,60,70,71,72,118,119,120,142,146,173,195,],[-47,-48,-50,-56,-57,-51,105,-50,105,-51,-49,-55,-71,-72,-52,-53,-54,]),'division':([40,41,42,43,44,45,60,70,71,72,118,119,120,142,146,173,195,],[-47,-48,-50,-56,-57,-51,106,-50,106,-51,-49,-55,-71,-72,-52,-53,-54,]),'exponent':([40,41,42,43,44,45,60,70,71,72,118,119,120,142,146,173,195,],[-47,-48,-50,-56,-57,-51,107,-50,107,-51,-49,-55,-71,-72,-52,-53,-54,]),'is_equal':([40,41,42,43,44,45,56,57,58,60,61,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,92,99,-22,-40,108,92,-50,-51,92,99,92,92,99,-49,-55,-71,-26,92,-23,-36,-37,-41,-38,-39,-72,-52,92,-53,-54,]),'is_not_equal':([40,41,42,43,44,45,56,57,58,60,61,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,93,100,-22,-40,109,93,-50,-51,93,100,93,93,100,-49,-55,-71,-26,93,-23,-36,-37,-41,-38,-39,-72,-52,93,-53,-54,]),'and':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,89,89,-22,-40,89,-50,-51,89,89,89,89,89,-49,-55,-71,-26,89,-23,-36,-37,-41,-38,-39,-72,-52,89,-53,-54,]),'or':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,90,90,-22,-40,90,-50,-51,90,90,90,90,90,-49,-55,-71,-26,90,-23,-36,-37,-41,-38,-39,-72,-52,90,-53,-54,]),'greater_than':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,94,94,-22,-40,94,-50,-51,94,94,94,94,94,-49,-55,-71,-26,94,-23,-36,-37,-41,-38,-39,-72,-52,94,-53,-54,]),'greater_or_equal_than':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,95,95,-22,-40,95,-50,-51,95,95,95,95,95,-49,-55,-71,-26,95,-23,-36,-37,-41,-38,-39,-72,-52,95,-53,-54,]),'less_than':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,96,96,-22,-40,96,-50,-51,96,96,96,96,96,-49,-55,-71,-26,96,-23,-36,-37,-41,-38,-39,-72,-52,96,-53,-54,]),'less_or_equal_than':([40,41,42,43,44,45,56,57,58,60,62,70,72,85,86,101,114,115,118,119,120,130,132,133,134,135,136,137,138,142,146,152,173,195,],[-47,-48,-50,-56,-57,-51,97,97,-22,-40,97,-50,-51,97,97,97,97,97,-49,-55,-71,-26,97,-23,-36,-37,-41,-38,-39,-72,-52,97,-53,-54,]),'to':([40,41,42,43,44,45,60,112,118,119,120,136,142,146,173,195,],[-47,-48,-50,-56,-57,-51,-40,141,-49,-55,-71,-41,-72,-52,-53,-54,]),'close_brackets':([40,41,42,43,44,45,60,118,119,120,124,136,142,146,149,164,173,179,188,195,199,],[-47,-48,-50,-56,-57,-51,-40,-49,-55,-71,146,-41,-72,-52,160,173,-53,186,195,-54,202,]),'step':([40,41,42,43,44,45,60,118,119,120,136,142,146,153,173,195,],[-47,-48,-50,-56,-57,-51,-40,-49,-55,-71,-41,-72,-52,163,-53,-54,]),'open_brackets':([45,49,72,80,81,82,83,146,160,173,186,],[74,74,74,129,-14,-15,-16,155,170,181,193,]),'procedure':([52,],[78,]),'function':([52,],[79,]),'word':([53,167,177,],[81,81,81,]),'float':([53,167,177,],[82,82,82,]),'bool':([53,167,177,],[83,83,83,]),'until':([63,],[111,]),'ByVal':([73,143,],[122,122,]),'ByRef':([73,143,],[123,123,]),'then':([87,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[2,22,23,24,25,26,27,32,139,147,150,166,176,180,183,192,]),'variable':([0,3,4,5,6,7,8,13,110,127,131,148,157,168,169,172,175,185,],[3,3,3,3,3,3,3,3,3,3,3,159,3,3,159,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'print':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'read':([0,3,4,5,6,7,8,13,110,127,131,157,168,172,175,185,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'multiple_print':([19,37,66,],[36,68,116,]),'value':([19,30,31,37,55,59,64,65,66,67,74,84,88,98,102,108,109,113,122,140,141,155,163,181,],[39,60,60,71,60,60,60,60,39,60,60,60,60,60,136,60,60,60,144,60,60,60,60,60,]),'real_value':([19,30,31,37,55,59,64,65,66,67,74,84,88,98,102,108,109,113,122,140,141,155,163,181,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'functions':([19,30,31,37,55,59,64,65,66,67,74,84,88,98,102,108,109,113,122,140,141,155,163,181,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ids_access':([19,20,30,31,37,50,55,59,64,65,66,67,74,75,76,84,88,98,102,108,109,113,122,140,141,155,163,181,],[42,48,42,42,70,77,70,42,42,42,42,70,42,48,48,70,42,42,42,42,42,70,42,42,42,42,42,42,]),'multiple_read':([20,75,76,],[46,125,126,]),'subroutines':([21,156,182,191,196,201,],[51,165,189,197,200,203,]),'logic_expression':([30,31,55,59,65,84,88,140,],[56,62,85,101,114,85,132,152,]),'arithmetic_expression':([30,31,37,55,59,64,65,67,74,84,88,98,108,109,113,140,141,155,163,181,],[57,57,69,86,57,112,115,69,124,86,57,133,137,138,69,57,153,164,172,188,]),'compared_to_bool':([30,31,55,59,65,84,88,140,],[58,58,58,58,58,58,58,58,]),'variable_type':([53,167,177,],[80,175,185,]),'logic_operand':([56,57,62,85,86,101,114,115,132,152,],[88,98,88,88,98,88,88,98,88,88,]),'arithmetic_operand':([60,71,],[102,102,]),'arguments':([73,143,],[121,154,]),'parameters':([148,169,],[158,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',16),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',17),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',23),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',24),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',25),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',26),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',27),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',28),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',29),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',34),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',35),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',36),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',37),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',42),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',43),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',44),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if','conditions',8,'p_conditions','Parser.py',49),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',54),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',55),
  ('loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',11,'p_loops','Parser.py',56),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',61),
  ('logic_expression -> compared_to_bool','logic_expression',1,'p_logic_expression','Parser.py',62),
  ('logic_expression -> arithmetic_expression logic_operand arithmetic_expression','logic_expression',3,'p_logic_expression','Parser.py',63),
  ('logic_expression -> logic_expression logic_operand logic_expression','logic_expression',3,'p_logic_expression','Parser.py',64),
  ('logic_expression -> not logic_expression','logic_expression',2,'p_logic_expression','Parser.py',65),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',66),
  ('logic_operand -> and','logic_operand',1,'p_logic_operand','Parser.py',71),
  ('logic_operand -> or','logic_operand',1,'p_logic_operand','Parser.py',72),
  ('logic_operand -> not','logic_operand',1,'p_logic_operand','Parser.py',73),
  ('logic_operand -> is_equal','logic_operand',1,'p_logic_operand','Parser.py',74),
  ('logic_operand -> is_not_equal','logic_operand',1,'p_logic_operand','Parser.py',75),
  ('logic_operand -> greater_than','logic_operand',1,'p_logic_operand','Parser.py',76),
  ('logic_operand -> greater_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',77),
  ('logic_operand -> less_than','logic_operand',1,'p_logic_operand','Parser.py',78),
  ('logic_operand -> less_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',79),
  ('compared_to_bool -> arithmetic_expression is_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',84),
  ('compared_to_bool -> arithmetic_expression is_not_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',85),
  ('compared_to_bool -> bool_value is_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',86),
  ('compared_to_bool -> bool_value is_not_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',87),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',92),
  ('arithmetic_expression -> value arithmetic_operand value','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',93),
  ('arithmetic_operand -> sum','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',98),
  ('arithmetic_operand -> substraction','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',99),
  ('arithmetic_operand -> multiplication','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',100),
  ('arithmetic_operand -> division','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',101),
  ('arithmetic_operand -> exponent','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',102),
  ('value -> real_value','value',1,'p_value','Parser.py',107),
  ('value -> functions','value',1,'p_value','Parser.py',108),
  ('value -> open_parenthesis arithmetic_expression close_parenthesis','value',3,'p_value','Parser.py',109),
  ('value -> ids_access','value',1,'p_value','Parser.py',110),
  ('ids_access -> id','ids_access',1,'p_ids_access','Parser.py',115),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets','ids_access',4,'p_ids_access','Parser.py',116),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',7,'p_ids_access','Parser.py',117),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',10,'p_ids_access','Parser.py',118),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',119),
  ('real_value -> word_value','real_value',1,'p_real_value','Parser.py',124),
  ('real_value -> float_value','real_value',1,'p_real_value','Parser.py',125),
  ('real_value -> id','real_value',1,'p_real_value','Parser.py',126),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',131),
  ('calls -> id open_parenthesis close_parenthesis','calls',3,'p_calls','Parser.py',132),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',137),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',138),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',139),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',140),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',141),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',142),
  ('assign -> let id equals logic_expression','assign',4,'p_assign','Parser.py',147),
  ('assign -> let id equals arithmetic_expression','assign',4,'p_assign','Parser.py',148),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',153),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',154),
  ('functions -> id open_parenthesis close_parenthesis','functions',3,'p_functions','Parser.py',159),
  ('functions -> id open_parenthesis arguments close_parenthesis','functions',4,'p_functions','Parser.py',160),
  ('arguments -> ByVal value','arguments',2,'p_arguments','Parser.py',165),
  ('arguments -> ByRef id','arguments',2,'p_arguments','Parser.py',166),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',167),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',172),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',173),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',178),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',179),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',184),
  ('multiple_print -> value','multiple_print',1,'p_multiple_print','Parser.py',185),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',186),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',191),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',192),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',197),
  ('multiple_read -> multiple_read comma multiple_read','multiple_read',3,'p_multiple_read','Parser.py',198),
]
