
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if\n        \n        else_ifs : elsif open_parenthesis logic_expression close_parenthesis then inside_logic\n        else_ifs : else_ifs else_ifs\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : arithmetic_expression\n        logic_expression : compared_to_bool\n        logic_expression : arithmetic_expression logic_operand arithmetic_expression\n        logic_expression : logic_expression logic_operand logic_expression\n        logic_expression : not logic_expression\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operand : and\n        logic_operand : or\n        logic_operand : not\n        logic_operand : is_equal\n        logic_operand : is_not_equal\n        logic_operand : greater_than\n        logic_operand : greater_or_equal_than\n        logic_operand : less_than\n        logic_operand : less_or_equal_than\n        \n        compared_to_bool : arithmetic_expression is_equal bool_value\n        compared_to_bool : arithmetic_expression is_not_equal bool_value\n        compared_to_bool : bool_value is_equal arithmetic_expression\n        compared_to_bool : bool_value is_not_equal arithmetic_expression\n        compared_to_bool : bool_value\n        \n        arithmetic_expression : value\n        arithmetic_expression : value arithmetic_operand value\n        \n        arithmetic_operand : sum\n        arithmetic_operand : substraction\n        arithmetic_operand : multiplication\n        arithmetic_operand : division\n        arithmetic_operand : exponent\n        \n        value : real_value\n        value : functions\n        value : open_parenthesis arithmetic_expression close_parenthesis\n        value : ids_access\n        \n        ids_access : id\n        ids_access : id open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets \n        ids_access : id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value\n        real_value : float_value\n        real_value : id\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let id equals logic_expression\n        assign : let id equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id open_parenthesis close_parenthesis\n        functions : id open_parenthesis arguments close_parenthesis\n        \n        arguments : ByVal value\n        arguments : ByRef id\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access\n        multiple_read : multiple_read comma multiple_read\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,136,137,138,139,140,141,142,143,147,151,152,157,160,162,163,165,169,171,174,175,176,178,181,183,184,189,190,195,197,198,199,207,209,210,211,212,217,220,],[-9,23,-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-9,-29,-28,-41,-42,-43,-44,-58,161,-23,-9,-11,-9,177,-24,182,-9,-17,188,-22,-9,-59,-9,196,-19,200,205,-9,-12,-18,215,-20,-9,-25,-60,-21,-13,]),'dim':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,149,152,157,160,162,165,171,172,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[9,9,9,9,9,9,9,9,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,9,-73,-26,-89,-86,-55,-61,-47,-93,-91,9,-31,9,-29,-28,-41,-42,-43,-44,-58,9,-23,9,-11,9,-24,9,9,-17,9,9,-59,9,-19,9,-12,-18,-20,9,-25,-60,-13,]),'if':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,161,162,165,171,174,177,178,180,181,183,188,189,197,198,199,200,209,210,211,212,220,],[11,11,11,11,11,11,11,11,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,11,-73,-26,-89,-86,-55,-61,-47,-93,-91,11,-31,11,-29,-28,-41,-42,-43,-44,-58,-23,11,-11,174,11,-24,11,-17,189,11,11,-59,11,199,-19,11,-12,-18,209,-20,11,-25,-60,-13,]),'while':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[12,12,12,12,12,12,12,12,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,12,-73,-26,-89,-86,-55,-61,-47,-93,-91,12,-31,12,-29,-28,-41,-42,-43,-44,-58,-23,12,-11,12,-24,12,-17,12,12,-59,12,-19,12,-12,-18,-20,12,-25,-60,-13,]),'do':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[13,13,13,13,13,13,13,13,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,13,-73,-26,-89,-86,-55,-61,-47,-93,-91,13,-31,13,-29,-28,-41,-42,-43,-44,-58,-23,13,-11,13,-24,13,-17,13,13,-59,13,-19,13,-12,-18,-20,13,-25,-60,-13,]),'for':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[14,14,14,14,14,14,14,14,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,14,-73,-26,-89,-86,-55,-61,-47,-93,-91,14,-31,14,-29,-28,-41,-42,-43,-44,-58,-23,14,-11,14,-24,14,-17,14,14,-59,14,-19,14,-12,-18,-20,14,-25,-60,-13,]),'gosub':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[15,15,15,15,15,15,15,15,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,15,-73,-26,-89,-86,-55,-61,-47,-93,-91,15,-31,15,-29,-28,-41,-42,-43,-44,-58,-23,15,-11,15,-24,15,-17,15,15,-59,15,-19,15,-12,-18,-20,15,-25,-60,-13,]),'dunkelCls':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[19,19,19,19,19,19,19,19,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,19,-73,-26,-89,-86,-55,-61,-47,-93,-91,19,-31,19,-29,-28,-41,-42,-43,-44,-58,-23,19,-11,19,-24,19,-17,19,19,-59,19,-19,19,-12,-18,-20,19,-25,-60,-13,]),'let':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[20,20,20,20,20,20,20,20,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,20,-73,-26,-89,-86,-55,-61,-47,-93,-91,20,-31,20,-29,-28,-41,-42,-43,-44,-58,-23,20,-11,20,-24,20,-17,20,20,-59,20,-19,20,-12,-18,-20,20,-25,-60,-13,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,21,22,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,57,59,60,61,63,64,65,66,69,70,71,72,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,96,98,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,145,146,147,152,155,157,160,162,165,166,171,174,178,179,180,181,183,189,193,197,198,199,202,209,210,211,212,220,],[10,10,10,10,10,10,10,30,10,35,36,-66,-82,-83,-84,37,48,52,48,48,-65,-85,76,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,52,-77,48,97,76,-26,-27,48,-45,48,48,48,76,48,-48,-49,-50,-51,-52,48,52,52,132,133,-10,-14,-15,-16,-78,76,76,48,-32,-33,-34,-35,-36,-37,-38,-39,-40,48,-35,-36,-30,48,48,10,-73,-26,-89,-86,-55,-61,-47,-93,-91,10,-31,10,-29,-28,-41,-42,-43,-44,48,48,-58,-23,48,10,-11,10,-24,48,10,-17,10,48,10,-59,10,-19,48,10,-12,-18,211,-20,10,-25,-60,-13,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[21,21,21,21,21,21,21,21,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,21,-73,-26,-89,-86,-55,-61,-47,-93,-91,21,-31,21,-29,-28,-41,-42,-43,-44,-58,-23,21,-11,21,-24,21,-17,21,21,-59,21,-19,21,-12,-18,-20,21,-25,-60,-13,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,132,136,137,138,139,140,141,142,143,147,152,157,160,162,165,171,174,178,180,181,183,189,197,198,199,209,210,211,212,220,],[22,22,22,22,22,22,22,22,-66,-82,-83,-84,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,22,-73,-26,-89,-86,-55,-61,-47,-93,-91,22,-31,22,-29,-28,-41,-42,-43,-44,-58,-23,22,-11,22,-24,22,-17,22,22,-59,22,-19,22,-12,-18,-20,22,-25,-60,-13,]),'$end':([1,23,54,156,168,194,204,206,213,214,218,219,221,],[0,-1,-2,-72,-67,-72,-68,-72,-72,-69,-70,-72,-71,]),'loop':([3,4,5,6,7,8,13,16,17,18,19,24,25,26,27,28,29,34,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,136,138,139,140,141,142,143,147,152,160,165,174,181,189,198,199,209,211,212,220,],[-9,-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,68,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-29,-28,-41,-42,-43,-44,-58,-23,-11,-24,-17,-59,-19,-12,-18,-20,-25,-60,-13,]),'wend':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,118,121,122,123,125,126,127,128,130,131,136,138,139,140,141,142,143,144,147,152,160,165,174,181,189,198,199,209,211,212,220,],[-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-9,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-29,-28,-41,-42,-43,-44,152,-58,-23,-11,-24,-17,-59,-19,-12,-18,-20,-25,-60,-13,]),'return':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,132,136,138,139,140,141,142,143,147,148,152,160,165,174,181,189,198,199,209,211,212,220,],[-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-9,-31,-29,-28,-41,-42,-43,-44,-58,156,-23,-11,-24,-17,-59,-19,-12,-18,-20,-25,-60,-13,]),'else':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,136,137,138,139,140,141,142,143,147,151,152,160,163,165,174,176,181,189,198,199,209,210,211,212,217,220,],[-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-9,-29,-28,-41,-42,-43,-44,-58,162,-23,-11,178,-24,-17,-22,-59,-19,-12,-18,-20,-9,-25,-60,-21,-13,]),'elsif':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,136,137,138,139,140,141,142,143,147,151,152,160,163,165,174,176,181,189,198,199,209,210,211,212,217,220,],[-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-9,-29,-28,-41,-42,-43,-44,-58,164,-23,-11,164,-24,-17,164,-59,-19,-12,-18,-20,-9,-25,-60,-21,-13,]),'next':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,41,42,43,44,45,46,47,48,49,51,52,57,63,64,66,89,90,91,92,93,115,121,122,123,125,126,127,128,130,131,136,138,139,140,141,142,143,147,152,160,165,174,180,181,189,192,198,199,209,211,212,220,],[-9,-9,-9,-9,-9,-9,-66,-82,-83,-84,-3,-4,-5,-6,-7,-8,-65,-85,-87,-88,-46,-53,-54,-56,-62,-63,-57,-90,-92,-57,-77,-26,-27,-45,-10,-14,-15,-16,-78,-30,-73,-26,-89,-86,-55,-61,-47,-93,-91,-31,-29,-28,-41,-42,-43,-44,-58,-23,-11,-24,-17,-9,-59,-19,202,-12,-18,-20,-25,-60,-13,]),'open_parenthesis':([10,11,12,21,22,32,33,39,48,53,59,61,65,69,70,71,72,76,77,78,79,80,81,82,83,84,85,96,98,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,133,145,146,155,164,166,179,193,],[31,32,33,39,53,61,61,72,31,53,96,98,61,96,61,96,72,31,96,-48,-49,-50,-51,-52,96,53,53,72,98,61,-32,-33,-34,-35,-36,-37,-38,-39,-40,96,-35,-36,96,96,145,149,61,96,96,179,96,61,96,]),'string':([21,22,39,71,],[40,50,40,40,]),'word_value':([21,32,33,39,59,61,65,69,70,71,72,77,78,79,80,81,82,83,96,98,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,134,145,146,155,166,173,179,193,208,],[46,46,46,46,46,46,46,46,46,46,46,46,-48,-49,-50,-51,-52,46,46,46,46,-32,-33,-34,-35,-36,-37,-38,-39,-40,46,-35,-36,46,46,150,46,46,46,46,187,46,46,216,]),'float_value':([21,32,33,39,59,61,65,69,70,71,72,77,78,79,80,81,82,83,96,98,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,145,146,155,166,179,193,],[47,47,47,47,47,47,47,47,47,47,47,47,-48,-49,-50,-51,-52,47,47,47,47,-32,-33,-34,-35,-36,-37,-38,-39,-40,47,-35,-36,47,47,47,47,47,47,47,47,]),'sub':([23,156,182,194,196,205,206,213,215,219,],[55,55,194,55,206,213,55,55,219,55,]),'as':([30,157,171,],[56,170,185,]),'close_parenthesis':([31,40,41,42,43,44,45,46,47,48,52,57,58,62,63,64,66,67,73,74,75,76,86,89,90,91,92,93,95,97,99,100,115,123,124,126,127,128,135,136,138,139,140,141,142,143,147,149,153,158,159,160,181,186,191,198,212,220,],[57,-87,-88,-46,-53,-54,-56,-62,-63,-57,-57,-77,93,101,-26,-27,-45,118,125,126,127,-57,127,-10,-14,-15,-16,-78,-79,-80,136,126,-30,-89,126,-55,-61,-47,-81,-31,-29,-28,-41,-42,-43,-44,-58,157,165,171,-75,-11,-59,-76,201,-12,-60,-13,]),'ByVal':([31,94,],[59,59,]),'ByRef':([31,94,],[60,60,]),'not':([32,33,42,43,44,45,46,47,48,57,61,62,63,64,65,66,67,70,75,76,93,98,99,100,102,103,104,105,106,107,108,109,110,111,115,121,122,126,127,128,136,138,139,140,141,142,143,145,147,153,179,181,191,212,],[65,65,-46,-53,-54,-56,-62,-63,-57,-77,65,105,105,-27,65,-45,105,65,-56,-57,-78,65,105,105,65,-32,-33,-34,-35,-36,-37,-38,-39,-40,105,105,105,-55,-61,-47,-31,105,-28,-41,-42,-43,-44,65,-58,105,65,-59,105,-60,]),'bool_value':([32,33,61,65,70,98,102,103,104,105,106,107,108,109,110,111,113,114,145,179,],[66,66,66,66,66,66,66,-32,-33,-34,-35,-36,-37,-38,-39,-40,140,141,66,66,]),'equals':([35,37,],[69,70,]),'comma':([38,40,41,42,43,44,45,46,47,48,49,50,51,52,57,58,73,74,75,76,89,90,91,92,93,95,97,123,126,127,128,130,131,135,147,158,159,160,181,186,198,212,220,],[71,-87,-88,-46,-53,-54,-56,-62,-63,-57,84,85,-92,-57,-77,94,71,-88,-56,-57,-10,-14,-15,-16,-78,-79,-80,71,-55,-61,-47,84,84,94,-58,172,-75,-11,-59,172,-12,-60,-13,]),'is_equal':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,106,113,-27,116,106,-56,-57,-78,106,113,106,106,113,-55,-61,-47,-31,106,-28,-41,-42,-43,-44,-58,106,-59,106,-60,]),'is_not_equal':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,107,114,-27,117,107,-56,-57,-78,107,114,107,107,114,-55,-61,-47,-31,107,-28,-41,-42,-43,-44,-58,107,-59,107,-60,]),'and':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,103,103,-27,-45,103,-56,-57,-78,103,103,103,103,103,-55,-61,-47,-31,103,-28,-41,-42,-43,-44,-58,103,-59,103,-60,]),'or':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,104,104,-27,-45,104,-56,-57,-78,104,104,104,104,104,-55,-61,-47,-31,104,-28,-41,-42,-43,-44,-58,104,-59,104,-60,]),'greater_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,108,108,-27,-45,108,-56,-57,-78,108,108,108,108,108,-55,-61,-47,-31,108,-28,-41,-42,-43,-44,-58,108,-59,108,-60,]),'greater_or_equal_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,109,109,-27,-45,109,-56,-57,-78,109,109,109,109,109,-55,-61,-47,-31,109,-28,-41,-42,-43,-44,-58,109,-59,109,-60,]),'less_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,110,110,-27,-45,110,-56,-57,-78,110,110,110,110,110,-55,-61,-47,-31,110,-28,-41,-42,-43,-44,-58,110,-59,110,-60,]),'less_or_equal_than':([42,43,44,45,46,47,48,57,62,63,64,66,67,75,76,93,99,100,115,121,122,126,127,128,136,138,139,140,141,142,143,147,153,181,191,212,],[-46,-53,-54,-56,-62,-63,-57,-77,111,111,-27,-45,111,-56,-57,-78,111,111,111,111,111,-55,-61,-47,-31,111,-28,-41,-42,-43,-44,-58,111,-59,111,-60,]),'to':([42,43,44,45,46,47,48,57,93,120,126,127,128,147,181,212,],[-46,-53,-54,-56,-62,-63,-57,-77,-78,146,-55,-61,-47,-58,-59,-60,]),'close_brackets':([42,43,44,45,46,47,48,57,93,126,127,128,129,147,150,167,181,187,203,212,216,],[-46,-53,-54,-56,-62,-63,-57,-77,-78,-55,-61,-47,147,-58,160,181,-59,198,212,-60,220,]),'step':([42,43,44,45,46,47,48,57,93,126,127,128,147,154,181,212,],[-46,-53,-54,-56,-62,-63,-57,-77,-78,-55,-61,-47,-58,166,-59,-60,]),'sum':([42,43,44,45,46,47,48,57,75,76,93,126,127,147,181,212,],[78,-53,-54,-56,-62,-63,-57,-77,-56,-57,-78,-55,-61,-58,-59,-60,]),'substraction':([42,43,44,45,46,47,48,57,75,76,93,126,127,147,181,212,],[79,-53,-54,-56,-62,-63,-57,-77,-56,-57,-78,-55,-61,-58,-59,-60,]),'multiplication':([42,43,44,45,46,47,48,57,75,76,93,126,127,147,181,212,],[80,-53,-54,-56,-62,-63,-57,-77,-56,-57,-78,-55,-61,-58,-59,-60,]),'division':([42,43,44,45,46,47,48,57,75,76,93,126,127,147,181,212,],[81,-53,-54,-56,-62,-63,-57,-77,-56,-57,-78,-55,-61,-58,-59,-60,]),'exponent':([42,43,44,45,46,47,48,57,75,76,93,126,127,147,181,212,],[82,-53,-54,-56,-62,-63,-57,-77,-56,-57,-78,-55,-61,-58,-59,-60,]),'open_brackets':([48,52,76,89,90,91,92,147,160,181,198,],[83,83,83,134,-14,-15,-16,155,173,193,208,]),'procedure':([55,],[87,]),'function':([55,],[88,]),'word':([56,170,185,],[90,90,90,]),'float':([56,170,185,],[91,91,91,]),'bool':([56,170,185,],[92,92,92,]),'until':([68,],[119,]),'then':([101,201,],[137,210,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[2,24,25,26,27,28,29,34,144,148,151,169,175,184,190,192,195,207,217,]),'variable':([0,3,4,5,6,7,8,13,118,132,137,149,157,162,171,172,178,180,183,197,210,],[3,3,3,3,3,3,3,3,3,3,3,159,3,3,3,159,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'functions':([0,3,4,5,6,7,8,13,21,32,33,39,59,61,65,69,70,71,72,77,83,96,98,102,112,116,117,118,132,137,145,146,155,157,162,166,171,178,179,180,183,193,197,210,],[16,16,16,16,16,16,16,16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,16,16,16,44,44,44,16,16,44,16,16,44,16,16,44,16,16,]),'print':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'read':([0,3,4,5,6,7,8,13,118,132,137,157,162,171,178,180,183,197,210,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiple_print':([21,39,71,],[38,73,123,]),'arithmetic_expression':([21,32,33,39,61,65,69,70,71,72,83,96,98,102,112,116,117,145,146,155,166,179,193,],[41,63,63,74,100,63,120,122,41,124,129,124,100,63,139,142,143,63,154,167,180,63,203,]),'value':([21,32,33,39,59,61,65,69,70,71,72,77,83,96,98,102,112,116,117,145,146,155,166,179,193,],[42,42,42,42,95,42,42,42,42,42,42,128,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'real_value':([21,32,33,39,59,61,65,69,70,71,72,77,83,96,98,102,112,116,117,145,146,155,166,179,193,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ids_access':([21,22,32,33,39,53,59,61,65,69,70,71,72,77,83,84,85,96,98,102,112,116,117,145,146,155,166,179,193,],[45,51,45,45,75,86,45,75,45,45,45,45,75,45,45,51,51,75,75,45,45,45,45,45,45,45,45,45,45,]),'multiple_read':([22,84,85,],[49,130,131,]),'subroutines':([23,156,194,206,213,219,],[54,168,204,214,218,221,]),'arguments':([31,94,],[58,135,]),'logic_expression':([32,33,61,65,70,98,102,145,179,],[62,67,99,115,121,99,138,153,191,]),'compared_to_bool':([32,33,61,65,70,98,102,145,179,],[64,64,64,64,64,64,64,64,64,]),'arithmetic_operand':([42,],[77,]),'variable_type':([56,170,185,],[89,183,197,]),'logic_operand':([62,63,67,99,100,115,121,122,138,153,191,],[102,112,102,102,112,102,102,112,102,102,102,]),'parameters':([149,172,],[158,186,]),'else_ifs':([151,163,176,],[163,176,176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',16),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',17),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',23),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',24),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',25),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',26),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',27),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',28),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',29),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',34),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',35),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',36),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',37),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',42),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',43),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',44),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if','conditions',8,'p_conditions','Parser.py',49),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if','conditions',10,'p_conditions','Parser.py',50),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if','conditions',9,'p_conditions','Parser.py',51),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if','conditions',11,'p_conditions','Parser.py',52),
  ('else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic','else_ifs',6,'p_else_ifs','Parser.py',57),
  ('else_ifs -> else_ifs else_ifs','else_ifs',2,'p_else_ifs','Parser.py',58),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',63),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',64),
  ('loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',11,'p_loops','Parser.py',65),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',70),
  ('logic_expression -> compared_to_bool','logic_expression',1,'p_logic_expression','Parser.py',71),
  ('logic_expression -> arithmetic_expression logic_operand arithmetic_expression','logic_expression',3,'p_logic_expression','Parser.py',72),
  ('logic_expression -> logic_expression logic_operand logic_expression','logic_expression',3,'p_logic_expression','Parser.py',73),
  ('logic_expression -> not logic_expression','logic_expression',2,'p_logic_expression','Parser.py',74),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',75),
  ('logic_operand -> and','logic_operand',1,'p_logic_operand','Parser.py',80),
  ('logic_operand -> or','logic_operand',1,'p_logic_operand','Parser.py',81),
  ('logic_operand -> not','logic_operand',1,'p_logic_operand','Parser.py',82),
  ('logic_operand -> is_equal','logic_operand',1,'p_logic_operand','Parser.py',83),
  ('logic_operand -> is_not_equal','logic_operand',1,'p_logic_operand','Parser.py',84),
  ('logic_operand -> greater_than','logic_operand',1,'p_logic_operand','Parser.py',85),
  ('logic_operand -> greater_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',86),
  ('logic_operand -> less_than','logic_operand',1,'p_logic_operand','Parser.py',87),
  ('logic_operand -> less_or_equal_than','logic_operand',1,'p_logic_operand','Parser.py',88),
  ('compared_to_bool -> arithmetic_expression is_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',93),
  ('compared_to_bool -> arithmetic_expression is_not_equal bool_value','compared_to_bool',3,'p_compared_to_bool','Parser.py',94),
  ('compared_to_bool -> bool_value is_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',95),
  ('compared_to_bool -> bool_value is_not_equal arithmetic_expression','compared_to_bool',3,'p_compared_to_bool','Parser.py',96),
  ('compared_to_bool -> bool_value','compared_to_bool',1,'p_compared_to_bool','Parser.py',97),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',102),
  ('arithmetic_expression -> value arithmetic_operand value','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',103),
  ('arithmetic_operand -> sum','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',108),
  ('arithmetic_operand -> substraction','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',109),
  ('arithmetic_operand -> multiplication','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',110),
  ('arithmetic_operand -> division','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',111),
  ('arithmetic_operand -> exponent','arithmetic_operand',1,'p_arithmetic_operand','Parser.py',112),
  ('value -> real_value','value',1,'p_value','Parser.py',117),
  ('value -> functions','value',1,'p_value','Parser.py',118),
  ('value -> open_parenthesis arithmetic_expression close_parenthesis','value',3,'p_value','Parser.py',119),
  ('value -> ids_access','value',1,'p_value','Parser.py',120),
  ('ids_access -> id','ids_access',1,'p_ids_access','Parser.py',125),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets','ids_access',4,'p_ids_access','Parser.py',126),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',7,'p_ids_access','Parser.py',127),
  ('ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets','ids_access',10,'p_ids_access','Parser.py',128),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',129),
  ('real_value -> word_value','real_value',1,'p_real_value','Parser.py',134),
  ('real_value -> float_value','real_value',1,'p_real_value','Parser.py',135),
  ('real_value -> id','real_value',1,'p_real_value','Parser.py',136),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',141),
  ('calls -> functions','calls',1,'p_calls','Parser.py',142),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',147),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',148),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',149),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',150),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',151),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',152),
  ('assign -> let id equals logic_expression','assign',4,'p_assign','Parser.py',157),
  ('assign -> let id equals arithmetic_expression','assign',4,'p_assign','Parser.py',158),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',163),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',164),
  ('functions -> id open_parenthesis close_parenthesis','functions',3,'p_functions','Parser.py',169),
  ('functions -> id open_parenthesis arguments close_parenthesis','functions',4,'p_functions','Parser.py',170),
  ('arguments -> ByVal value','arguments',2,'p_arguments','Parser.py',175),
  ('arguments -> ByRef id','arguments',2,'p_arguments','Parser.py',176),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',177),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',182),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',183),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',184),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',189),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',190),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',195),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',196),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',197),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',202),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',203),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',208),
  ('multiple_read -> multiple_read comma multiple_read','multiple_read',3,'p_multiple_read','Parser.py',209),
]
