
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if\n        conditions : if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if\n        \n        else_ifs : elsif open_parenthesis logic_expression close_parenthesis then inside_logic\n        else_ifs : else_ifs else_ifs\n        \n        loops : while open_parenthesis logic_expression close_parenthesis inside_logic wend\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id\n        \n        logic_expression : arithmetic_expression\n        logic_expression : bool_value ACTION_ADD_BOOL_VALUE\n        logic_expression : not ACTION_ADD_OPERATOR logic_expression\n        logic_expression : logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operator : and ACTION_ADD_OPERATOR\n        logic_operator : or ACTION_ADD_OPERATOR\n        logic_operator : is_equal ACTION_ADD_OPERATOR\n        logic_operator : is_not_equal ACTION_ADD_OPERATOR\n        logic_operator : greater_than ACTION_ADD_OPERATOR\n        logic_operator : greater_or_equal_than ACTION_ADD_OPERATOR\n        logic_operator : less_than ACTION_ADD_OPERATOR\n        logic_operator : less_or_equal_than ACTION_ADD_OPERATOR\n        \n        arithmetic_expression : value\n        arithmetic_expression : value arithmetic_operator value ACTION_ADD_QUADRUPLET\n        arithmetic_expression : arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET\n        \n        arithmetic_operator : sum ACTION_ADD_OPERATOR\n        arithmetic_operator : substraction ACTION_ADD_OPERATOR\n        arithmetic_operator : multiplication ACTION_ADD_OPERATOR\n        arithmetic_operator : division ACTION_ADD_OPERATOR\n        arithmetic_operator : exponent ACTION_ADD_OPERATOR\n        \n        value : real_value\n        value : functions\n        value : ids_access\n        \n        ids_access : id ACTION_ADD_VAR_VALUE\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value ACTION_ADD_WORD_VALUE\n        real_value : float_value ACTION_ADD_FLOAT_VALUE\n        real_value : id ACTION_ADD_VAR_VALUE\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let ids_access equals logic_expression\n        assign : let ids_access equals arithmetic_expression\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id open_parenthesis close_parenthesis\n        functions : id open_parenthesis arguments close_parenthesis\n        \n        arguments : ByVal value\n        arguments : ByRef id\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access \n        multiple_read : multiple_read comma ids_access\n        \n        ACTION_ADD_FOR_VALUE :\n        \n        ACTION_ADD_VAR_VALUE :\n        \n        ACTION_ADD_WORD_VALUE :\n        \n        ACTION_ADD_FLOAT_VALUE :\n        \n        ACTION_ADD_BOOL_VALUE :\n        \n        ACTION_ADD_OPERATOR :\n        \n        ACTION_ADD_QUADRUPLET :\n        \n        ACTION_ADD_ONE_DIM_OPERAND :\n        \n        ACTION_ADD_TWO_DIM_OPERAND :\n        \n        ACTION_ADD_THREE_DIM_OPERAND :\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,134,135,136,145,150,151,155,156,157,160,162,165,167,168,170,173,175,177,180,181,182,184,189,190,195,196,199,201,203,204,205,210,214,216,217,224,225,226,229,230,],[-9,23,-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-9,-93,-28,-41,-40,166,-29,-23,-94,-9,-11,-9,183,-24,-51,188,-9,-17,194,-22,-9,-9,202,-19,206,-95,212,-9,-12,-18,-52,222,-20,-9,-21,-25,-96,-13,-53,]),'dim':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,153,156,157,160,162,165,167,170,173,177,178,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[9,9,9,9,9,9,9,9,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,9,-66,-26,-54,-82,-79,-93,-93,-86,-84,9,-30,9,-93,-28,-41,-40,9,-29,-23,-94,9,-11,9,-24,-51,9,9,-17,9,9,-19,9,-95,9,-12,-18,-52,-20,9,-25,-96,-13,-53,]),'if':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,166,167,170,173,177,180,183,184,189,194,195,198,199,203,204,205,206,210,216,217,225,226,229,230,],[11,11,11,11,11,11,11,11,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,11,-66,-26,-54,-82,-79,-93,-93,-86,-84,11,-30,11,-93,-28,-41,-40,-29,-23,-94,11,-11,180,11,-24,-51,11,-17,195,11,11,205,-19,11,-95,11,-12,-18,216,-52,-20,11,-25,-96,-13,-53,]),'while':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[12,12,12,12,12,12,12,12,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,12,-66,-26,-54,-82,-79,-93,-93,-86,-84,12,-30,12,-93,-28,-41,-40,-29,-23,-94,12,-11,12,-24,-51,12,-17,12,12,-19,12,-95,12,-12,-18,-52,-20,12,-25,-96,-13,-53,]),'do':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[13,13,13,13,13,13,13,13,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,13,-66,-26,-54,-82,-79,-93,-93,-86,-84,13,-30,13,-93,-28,-41,-40,-29,-23,-94,13,-11,13,-24,-51,13,-17,13,13,-19,13,-95,13,-12,-18,-52,-20,13,-25,-96,-13,-53,]),'for':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[14,14,14,14,14,14,14,14,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,14,-66,-26,-54,-82,-79,-93,-93,-86,-84,14,-30,14,-93,-28,-41,-40,-29,-23,-94,14,-11,14,-24,-51,14,-17,14,14,-19,14,-95,14,-12,-18,-52,-20,14,-25,-96,-13,-53,]),'gosub':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[15,15,15,15,15,15,15,15,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,15,-66,-26,-54,-82,-79,-93,-93,-86,-84,15,-30,15,-93,-28,-41,-40,-29,-23,-94,15,-11,15,-24,-51,15,-17,15,15,-19,15,-95,15,-12,-18,-52,-20,15,-25,-96,-13,-53,]),'dunkelCls':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[19,19,19,19,19,19,19,19,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,19,-66,-26,-54,-82,-79,-93,-93,-86,-84,19,-30,19,-93,-28,-41,-40,-29,-23,-94,19,-11,19,-24,-51,19,-17,19,19,-19,19,-95,19,-12,-18,-52,-20,19,-25,-96,-13,-53,]),'let':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[20,20,20,20,20,20,20,20,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,20,-66,-26,-54,-82,-79,-93,-93,-86,-84,20,-30,20,-93,-28,-41,-40,-29,-23,-94,20,-11,20,-24,-51,20,-17,20,20,-19,20,-95,20,-12,-18,-52,-20,20,-25,-96,-13,-53,]),'id':([0,3,4,5,6,7,8,9,13,14,15,16,17,18,19,20,21,22,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,57,59,60,61,63,64,65,69,70,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,147,150,151,156,157,159,160,162,165,167,170,172,173,177,180,184,185,186,189,195,198,199,203,204,205,209,210,216,217,218,225,226,229,230,],[10,10,10,10,10,10,10,30,10,35,36,-59,-75,-76,-77,38,50,38,50,50,-58,-88,38,-78,75,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,50,97,75,-26,-91,-92,50,-50,50,50,-92,-92,-92,-92,-92,50,-55,-56,-50,38,38,130,131,-10,-14,-15,-16,-71,50,-92,-92,-92,-92,-92,-92,-92,-92,-27,50,10,50,-66,-26,50,-54,-82,-79,-93,-42,-43,-44,-45,-46,-93,-86,-84,10,-30,10,-93,-31,-32,-33,-34,-35,-36,-37,-38,-28,50,-41,-40,-29,-23,50,-94,10,-11,10,-24,50,-51,10,-17,10,50,50,10,-19,10,-95,10,-12,-18,50,-52,-20,10,225,-25,-96,-13,-53,]),'dunkelPrint':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[21,21,21,21,21,21,21,21,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,21,-66,-26,-54,-82,-79,-93,-93,-86,-84,21,-30,21,-93,-28,-41,-40,-29,-23,-94,21,-11,21,-24,-51,21,-17,21,21,-19,21,-95,21,-12,-18,-52,-20,21,-25,-96,-13,-53,]),'dunkelRead':([0,3,4,5,6,7,8,13,16,17,18,19,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,130,134,135,136,145,150,151,156,157,160,162,165,167,170,173,177,180,184,189,195,198,199,203,204,205,210,216,217,225,226,229,230,],[22,22,22,22,22,22,22,22,-59,-75,-76,-77,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,22,-66,-26,-54,-82,-79,-93,-93,-86,-84,22,-30,22,-93,-28,-41,-40,-29,-23,-94,22,-11,22,-24,-51,22,-17,22,22,-19,22,-95,22,-12,-18,-52,-20,22,-25,-96,-13,-53,]),'$end':([1,23,54,161,174,200,211,213,220,221,227,228,231,],[0,-1,-2,-65,-60,-65,-61,-65,-65,-62,-63,-65,-64,]),'loop':([3,4,5,6,7,8,13,16,17,18,19,24,25,26,27,28,29,34,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,134,136,145,150,151,156,157,160,165,170,173,180,195,199,204,205,210,216,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,67,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-93,-28,-41,-40,-29,-23,-94,-11,-24,-51,-17,-19,-95,-12,-18,-52,-20,-25,-96,-13,-53,]),'wend':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,111,114,115,117,118,119,121,127,128,129,134,136,145,146,150,151,156,157,160,165,170,173,180,195,199,204,205,210,216,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-9,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-93,-28,157,-41,-40,-29,-23,-94,-11,-24,-51,-17,-19,-95,-12,-18,-52,-20,-25,-96,-13,-53,]),'return':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,130,134,136,145,150,151,152,156,157,160,165,170,173,180,195,199,204,205,210,216,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-9,-30,-93,-28,-41,-40,161,-29,-23,-94,-11,-24,-51,-17,-19,-95,-12,-18,-52,-20,-25,-96,-13,-53,]),'else':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,134,135,136,145,150,151,155,156,157,160,165,168,170,173,180,182,195,199,204,205,210,216,217,224,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-9,-93,-28,-41,-40,167,-29,-23,-94,-11,184,-24,-51,-17,-22,-19,-95,-12,-18,-52,-20,-9,-21,-25,-96,-13,-53,]),'elsif':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,134,135,136,145,150,151,155,156,157,160,165,168,170,173,180,182,195,199,204,205,210,216,217,224,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-9,-93,-28,-41,-40,169,-29,-23,-94,-11,169,-24,-51,-17,169,-19,-95,-12,-18,-52,-20,-9,-21,-25,-96,-13,-53,]),'next':([3,4,5,6,7,8,16,17,18,19,24,25,26,27,28,29,36,38,40,42,43,44,45,46,47,48,49,50,51,53,57,63,64,70,83,84,85,90,91,92,93,94,109,114,115,117,118,119,121,127,128,129,134,136,145,150,151,156,157,160,165,170,173,180,195,198,199,204,205,208,210,216,225,226,229,230,],[-9,-9,-9,-9,-9,-9,-59,-75,-76,-77,-3,-4,-5,-6,-7,-8,-58,-88,-78,-80,-81,-39,-47,-48,-49,-89,-90,-88,-83,-85,-70,-26,-91,-50,-55,-56,-50,-10,-14,-15,-16,-71,-27,-66,-26,-54,-82,-79,-93,-93,-86,-84,-30,-93,-28,-41,-40,-29,-23,-94,-11,-24,-51,-17,-19,-9,-95,-12,-18,218,-52,-20,-25,-96,-13,-53,]),'open_parenthesis':([10,11,12,20,21,22,32,33,39,41,50,59,61,65,69,72,75,76,77,78,79,80,81,82,86,87,100,101,102,103,104,105,106,107,108,110,112,113,116,122,123,124,125,126,131,137,138,139,140,141,142,143,144,147,159,169,172,185,186,209,],[31,32,33,39,41,39,61,61,39,39,31,39,61,-92,61,39,31,39,-92,-92,-92,-92,-92,39,39,39,61,-92,-92,-92,-92,-92,-92,-92,-92,61,147,39,39,-42,-43,-44,-45,-46,153,-31,-32,-33,-34,-35,-36,-37,-38,61,39,185,39,61,39,39,]),'string':([21,22,41,72,],[42,52,42,42,]),'word_value':([21,32,33,41,59,61,65,69,72,76,77,78,79,80,81,82,100,101,102,103,104,105,106,107,108,110,113,116,122,123,124,125,126,132,137,138,139,140,141,142,143,144,147,159,172,179,185,186,209,215,],[48,48,48,48,48,48,-92,48,48,48,-92,-92,-92,-92,-92,48,48,-92,-92,-92,-92,-92,-92,-92,-92,48,48,48,-42,-43,-44,-45,-46,154,-31,-32,-33,-34,-35,-36,-37,-38,48,48,48,193,48,48,48,223,]),'float_value':([21,32,33,41,59,61,65,69,72,76,77,78,79,80,81,82,100,101,102,103,104,105,106,107,108,110,113,116,122,123,124,125,126,137,138,139,140,141,142,143,144,147,159,172,185,186,209,],[49,49,49,49,49,49,-92,49,49,49,-92,-92,-92,-92,-92,49,49,-92,-92,-92,-92,-92,-92,-92,-92,49,49,49,-42,-43,-44,-45,-46,-31,-32,-33,-34,-35,-36,-37,-38,49,49,49,49,49,49,]),'sub':([23,161,188,200,202,212,213,220,222,228,],[55,55,200,55,213,220,55,55,228,55,]),'as':([30,162,177,],[56,176,191,]),'close_parenthesis':([31,38,42,43,44,45,46,47,48,49,50,57,58,62,63,64,66,70,71,73,74,75,83,84,85,90,91,92,93,94,96,97,98,109,117,118,120,121,127,133,134,136,145,150,151,153,156,158,160,163,164,165,173,192,197,199,204,210,226,229,230,],[57,-88,-80,-81,-39,-47,-48,-49,-89,-90,-88,-70,94,99,-26,-91,111,-50,117,119,117,-88,-55,-56,-50,-10,-14,-15,-16,-71,-72,-73,134,-27,-54,-82,-50,-93,-93,-74,-30,-93,-28,-41,-40,162,-29,170,-94,177,-68,-11,-51,-69,207,-95,-12,-52,-96,-13,-53,]),'ByVal':([31,95,],[59,59,]),'ByRef':([31,95,],[60,60,]),'bool_value':([32,33,61,65,69,100,101,102,103,104,105,106,107,108,110,137,138,139,140,141,142,143,144,147,185,],[64,64,64,-92,64,64,-92,-92,-92,-92,-92,-92,-92,-92,64,-31,-32,-33,-34,-35,-36,-37,-38,64,64,]),'not':([32,33,61,65,69,100,101,102,103,104,105,106,107,108,110,137,138,139,140,141,142,143,144,147,185,],[65,65,65,-92,65,65,-92,-92,-92,-92,-92,-92,-92,-92,65,-31,-32,-33,-34,-35,-36,-37,-38,65,65,]),'equals':([35,37,38,68,70,117,160,173,199,210,226,230,],[-87,69,-88,113,-50,-54,-94,-51,-95,-52,-96,-53,]),'open_brackets':([38,50,70,75,85,90,91,92,93,120,160,165,199,204,],[-88,-88,116,-88,116,132,-14,-15,-16,116,172,179,209,215,]),'comma':([38,40,42,43,44,45,46,47,48,49,50,51,52,53,57,58,70,73,74,75,83,84,85,90,91,92,93,94,96,97,117,118,120,121,127,128,129,133,150,151,160,163,164,165,173,192,199,204,210,226,229,230,],[-88,72,-80,-81,-39,-47,-48,-49,-89,-90,-88,86,87,-85,-70,95,-50,72,-49,-88,-55,-56,-50,-10,-14,-15,-16,-71,-72,-73,-54,72,-50,-93,-93,-86,86,95,-41,-40,-94,178,-68,-11,-51,178,-95,-12,-52,-96,-13,-53,]),'sum':([43,44,45,46,47,48,49,50,57,63,74,75,83,84,85,94,115,117,120,121,127,148,149,150,151,160,171,173,187,198,199,210,219,226,230,],[77,77,-47,-48,-49,-89,-90,-88,-70,77,-49,-88,-55,-56,-50,-71,77,-54,-50,77,-93,77,77,-41,-40,-94,77,-51,77,77,-95,-52,77,-96,-53,]),'substraction':([43,44,45,46,47,48,49,50,57,63,74,75,83,84,85,94,115,117,120,121,127,148,149,150,151,160,171,173,187,198,199,210,219,226,230,],[78,78,-47,-48,-49,-89,-90,-88,-70,78,-49,-88,-55,-56,-50,-71,78,-54,-50,78,-93,78,78,-41,-40,-94,78,-51,78,78,-95,-52,78,-96,-53,]),'multiplication':([43,44,45,46,47,48,49,50,57,63,74,75,83,84,85,94,115,117,120,121,127,148,149,150,151,160,171,173,187,198,199,210,219,226,230,],[79,79,-47,-48,-49,-89,-90,-88,-70,79,-49,-88,-55,-56,-50,-71,79,-54,-50,79,-93,79,79,-41,-40,-94,79,-51,79,79,-95,-52,79,-96,-53,]),'division':([43,44,45,46,47,48,49,50,57,63,74,75,83,84,85,94,115,117,120,121,127,148,149,150,151,160,171,173,187,198,199,210,219,226,230,],[80,80,-47,-48,-49,-89,-90,-88,-70,80,-49,-88,-55,-56,-50,-71,80,-54,-50,80,-93,80,80,-41,-40,-94,80,-51,80,80,-95,-52,80,-96,-53,]),'exponent':([43,44,45,46,47,48,49,50,57,63,74,75,83,84,85,94,115,117,120,121,127,148,149,150,151,160,171,173,187,198,199,210,219,226,230,],[81,81,-47,-48,-49,-89,-90,-88,-70,81,-49,-88,-55,-56,-50,-71,81,-54,-50,81,-93,81,81,-41,-40,-94,81,-51,81,81,-95,-52,81,-96,-53,]),'and':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,101,-26,-91,101,-49,-88,-55,-56,-50,-71,101,-27,101,-26,-54,-50,-93,-93,-30,101,101,-41,-40,-29,101,-94,-51,101,-95,-52,-96,-53,]),'or':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,102,-26,-91,102,-49,-88,-55,-56,-50,-71,102,-27,102,-26,-54,-50,-93,-93,-30,102,102,-41,-40,-29,102,-94,-51,102,-95,-52,-96,-53,]),'is_equal':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,103,-26,-91,103,-49,-88,-55,-56,-50,-71,103,-27,103,-26,-54,-50,-93,-93,-30,103,103,-41,-40,-29,103,-94,-51,103,-95,-52,-96,-53,]),'is_not_equal':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,104,-26,-91,104,-49,-88,-55,-56,-50,-71,104,-27,104,-26,-54,-50,-93,-93,-30,104,104,-41,-40,-29,104,-94,-51,104,-95,-52,-96,-53,]),'greater_than':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,105,-26,-91,105,-49,-88,-55,-56,-50,-71,105,-27,105,-26,-54,-50,-93,-93,-30,105,105,-41,-40,-29,105,-94,-51,105,-95,-52,-96,-53,]),'greater_or_equal_than':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,106,-26,-91,106,-49,-88,-55,-56,-50,-71,106,-27,106,-26,-54,-50,-93,-93,-30,106,106,-41,-40,-29,106,-94,-51,106,-95,-52,-96,-53,]),'less_than':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,107,-26,-91,107,-49,-88,-55,-56,-50,-71,107,-27,107,-26,-54,-50,-93,-93,-30,107,107,-41,-40,-29,107,-94,-51,107,-95,-52,-96,-53,]),'less_or_equal_than':([44,45,46,47,48,49,50,57,62,63,64,66,74,75,83,84,85,94,98,109,114,115,117,120,121,127,134,136,145,150,151,156,158,160,173,197,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,108,-26,-91,108,-49,-88,-55,-56,-50,-71,108,-27,108,-26,-54,-50,-93,-93,-30,108,108,-41,-40,-29,108,-94,-51,108,-95,-52,-96,-53,]),'to':([44,45,46,47,48,49,50,57,83,84,85,94,117,121,127,148,150,151,160,173,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,-55,-56,-50,-71,-54,-93,-93,159,-41,-40,-94,-51,-95,-52,-96,-53,]),'close_brackets':([44,45,46,47,48,49,50,57,83,84,85,94,117,121,127,149,150,151,154,160,173,187,193,199,210,219,223,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,-55,-56,-50,-71,-54,-93,-93,160,-41,-40,165,-94,-51,199,204,-95,-52,226,229,-96,-53,]),'step':([44,45,46,47,48,49,50,57,83,84,85,94,117,121,127,150,151,160,171,173,199,210,226,230,],[-39,-47,-48,-49,-89,-90,-88,-70,-55,-56,-50,-71,-54,-93,-93,-41,-40,-94,186,-51,-95,-52,-96,-53,]),'procedure':([55,],[88,]),'function':([55,],[89,]),'word':([56,176,191,],[91,91,91,]),'float':([56,176,191,],[92,92,92,]),'bool':([56,176,191,],[93,93,93,]),'until':([67,],[112,]),'then':([99,207,],[135,217,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[2,24,25,26,27,28,29,34,146,152,155,175,181,190,196,201,208,214,224,]),'variable':([0,3,4,5,6,7,8,13,111,130,135,153,162,167,177,178,184,189,198,203,217,],[3,3,3,3,3,3,3,3,3,3,3,164,3,3,3,164,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'functions':([0,3,4,5,6,7,8,13,21,32,33,41,59,61,69,72,76,82,100,110,111,113,116,130,135,147,159,162,167,172,177,184,185,186,189,198,203,209,217,],[16,16,16,16,16,16,16,16,46,46,46,46,46,46,46,46,46,46,46,46,16,46,46,16,16,46,46,16,16,46,16,16,46,46,16,16,16,46,16,]),'print':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'read':([0,3,4,5,6,7,8,13,111,130,135,162,167,177,184,189,198,203,217,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ids_access':([20,21,22,32,33,39,41,59,61,69,72,76,82,86,87,100,110,113,116,147,159,172,185,186,209,],[37,47,53,47,47,71,74,47,74,47,47,47,47,128,53,47,47,47,47,47,47,47,47,47,47,]),'multiple_print':([21,41,72,],[40,73,118,]),'arithmetic_expression':([21,32,33,41,61,69,72,76,100,110,113,116,147,159,172,185,186,209,],[43,63,63,43,63,115,43,121,63,63,148,149,63,171,187,63,198,219,]),'value':([21,32,33,41,59,61,69,72,76,82,100,110,113,116,147,159,172,185,186,209,],[44,44,44,44,96,44,44,44,44,127,44,44,44,44,44,44,44,44,44,44,]),'real_value':([21,32,33,41,59,61,69,72,76,82,100,110,113,116,147,159,172,185,186,209,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'multiple_read':([22,87,],[51,129,]),'subroutines':([23,161,200,213,220,228,],[54,174,211,221,227,231,]),'arguments':([31,95,],[58,133,]),'logic_expression':([32,33,61,69,100,110,147,185,],[62,66,98,114,136,145,158,197,]),'ACTION_ADD_FOR_VALUE':([35,],[68,]),'ACTION_ADD_VAR_VALUE':([38,50,75,],[70,85,120,]),'arithmetic_operator':([43,44,63,115,121,148,149,171,187,198,219,],[76,82,76,76,76,76,76,76,76,76,76,]),'ACTION_ADD_WORD_VALUE':([48,],[83,]),'ACTION_ADD_FLOAT_VALUE':([49,],[84,]),'variable_type':([56,176,191,],[90,189,203,]),'logic_operator':([62,66,98,114,136,145,158,197,],[100,100,100,100,100,100,100,100,]),'ACTION_ADD_BOOL_VALUE':([64,],[109,]),'ACTION_ADD_OPERATOR':([65,77,78,79,80,81,101,102,103,104,105,106,107,108,],[110,122,123,124,125,126,137,138,139,140,141,142,143,144,]),'ACTION_ADD_QUADRUPLET':([121,127,136,],[150,151,156,]),'parameters':([153,178,],[163,192,]),'else_ifs':([155,168,182,],[168,182,182,]),'ACTION_ADD_ONE_DIM_OPERAND':([160,],[173,]),'ACTION_ADD_TWO_DIM_OPERAND':([199,],[210,]),'ACTION_ADD_THREE_DIM_OPERAND':([226,],[230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',48),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',49),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',57),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',58),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',59),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',60),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',61),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',62),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',63),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',68),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',69),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',70),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',71),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',95),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',96),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',97),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if','conditions',8,'p_conditions','Parser.py',103),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if','conditions',10,'p_conditions','Parser.py',104),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if','conditions',9,'p_conditions','Parser.py',105),
  ('conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if','conditions',11,'p_conditions','Parser.py',106),
  ('else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic','else_ifs',6,'p_else_ifs','Parser.py',111),
  ('else_ifs -> else_ifs else_ifs','else_ifs',2,'p_else_ifs','Parser.py',112),
  ('loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend','loops',6,'p_loops','Parser.py',117),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',118),
  ('loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id','loops',12,'p_loops','Parser.py',119),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',124),
  ('logic_expression -> bool_value ACTION_ADD_BOOL_VALUE','logic_expression',2,'p_logic_expression','Parser.py',125),
  ('logic_expression -> not ACTION_ADD_OPERATOR logic_expression','logic_expression',3,'p_logic_expression','Parser.py',126),
  ('logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET','logic_expression',4,'p_logic_expression','Parser.py',127),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',128),
  ('logic_operator -> and ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',133),
  ('logic_operator -> or ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',134),
  ('logic_operator -> is_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',135),
  ('logic_operator -> is_not_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',136),
  ('logic_operator -> greater_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',137),
  ('logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',138),
  ('logic_operator -> less_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',139),
  ('logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',140),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',145),
  ('arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET','arithmetic_expression',4,'p_arithmetic_expression','Parser.py',146),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET','arithmetic_expression',4,'p_arithmetic_expression','Parser.py',147),
  ('arithmetic_operator -> sum ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',152),
  ('arithmetic_operator -> substraction ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',153),
  ('arithmetic_operator -> multiplication ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',154),
  ('arithmetic_operator -> division ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',155),
  ('arithmetic_operator -> exponent ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',156),
  ('value -> real_value','value',1,'p_value','Parser.py',162),
  ('value -> functions','value',1,'p_value','Parser.py',163),
  ('value -> ids_access','value',1,'p_value','Parser.py',164),
  ('ids_access -> id ACTION_ADD_VAR_VALUE','ids_access',2,'p_ids_access','Parser.py',169),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND','ids_access',6,'p_ids_access','Parser.py',170),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND','ids_access',9,'p_ids_access','Parser.py',171),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND','ids_access',12,'p_ids_access','Parser.py',172),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',173),
  ('real_value -> word_value ACTION_ADD_WORD_VALUE','real_value',2,'p_real_value','Parser.py',178),
  ('real_value -> float_value ACTION_ADD_FLOAT_VALUE','real_value',2,'p_real_value','Parser.py',179),
  ('real_value -> id ACTION_ADD_VAR_VALUE','real_value',2,'p_real_value','Parser.py',180),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',185),
  ('calls -> functions','calls',1,'p_calls','Parser.py',186),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',191),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',192),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',193),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',194),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',195),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',196),
  ('assign -> let ids_access equals logic_expression','assign',4,'p_assign','Parser.py',205),
  ('assign -> let ids_access equals arithmetic_expression','assign',4,'p_assign','Parser.py',206),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',215),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',216),
  ('functions -> id open_parenthesis close_parenthesis','functions',3,'p_functions','Parser.py',221),
  ('functions -> id open_parenthesis arguments close_parenthesis','functions',4,'p_functions','Parser.py',222),
  ('arguments -> ByVal value','arguments',2,'p_arguments','Parser.py',227),
  ('arguments -> ByRef id','arguments',2,'p_arguments','Parser.py',228),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',229),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',234),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',235),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',236),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',241),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',242),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',247),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',248),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',249),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',254),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',255),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',260),
  ('multiple_read -> multiple_read comma ids_access','multiple_read',3,'p_multiple_read','Parser.py',261),
  ('ACTION_ADD_FOR_VALUE -> <empty>','ACTION_ADD_FOR_VALUE',0,'p_action_add_for_value','Parser.py',266),
  ('ACTION_ADD_VAR_VALUE -> <empty>','ACTION_ADD_VAR_VALUE',0,'p_action_add_var_value','Parser.py',276),
  ('ACTION_ADD_WORD_VALUE -> <empty>','ACTION_ADD_WORD_VALUE',0,'p_action_add_word_value','Parser.py',284),
  ('ACTION_ADD_FLOAT_VALUE -> <empty>','ACTION_ADD_FLOAT_VALUE',0,'p_action_add_float_value','Parser.py',290),
  ('ACTION_ADD_BOOL_VALUE -> <empty>','ACTION_ADD_BOOL_VALUE',0,'p_action_add_bool_value','Parser.py',296),
  ('ACTION_ADD_OPERATOR -> <empty>','ACTION_ADD_OPERATOR',0,'p_action_add_operator','Parser.py',302),
  ('ACTION_ADD_QUADRUPLET -> <empty>','ACTION_ADD_QUADRUPLET',0,'p_action_add_quadruplet','Parser.py',309),
  ('ACTION_ADD_ONE_DIM_OPERAND -> <empty>','ACTION_ADD_ONE_DIM_OPERAND',0,'p_action_add_one_dim_operand','Parser.py',329),
  ('ACTION_ADD_TWO_DIM_OPERAND -> <empty>','ACTION_ADD_TWO_DIM_OPERAND',0,'p_action_add_two_dim_operand','Parser.py',339),
  ('ACTION_ADD_THREE_DIM_OPERAND -> <empty>','ACTION_ADD_THREE_DIM_OPERAND',0,'p_action_add_three_dim_operand','Parser.py',350),
]
