
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ByRef ByVal and as bool bool_value close_braces close_brackets close_parenthesis colon comma dim division do dunkelCls dunkelPrint dunkelRead else elsif end end_if equals exit exponent false float float_value for function gosub goto greater_or_equal_than greater_than id if is_equal is_not_equal less_or_equal_than less_than let loop multiplication next not open_braces open_brackets open_parenthesis or procedure return semicolon step string sub substraction sum then to true until wend while word word_value\n        program : inside_logic end\n        program : inside_logic end subroutines\n        \n        inside_logic : variable inside_logic\n        inside_logic : conditions inside_logic\n        inside_logic : loops inside_logic\n        inside_logic : calls inside_logic\n        inside_logic : read_or_write inside_logic\n        inside_logic : assign inside_logic\n        |\n        \n        variable : dim id as variable_type\n        variable : dim id as variable_type open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets\n        variable : dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets\n        \n        variable_type : word\n        variable_type : float\n        variable_type : bool\n        \n        base_if : if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF\n        \n        conditions : base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF\n        conditions : base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF\n        conditions : base_if else_ifs end if ACTION_FILL_JUMP_END_IF\n        conditions : base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF\n        \n        else_ifs : elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF\n        else_ifs : else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF\n        \n        loops : while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO\n        loops : do inside_logic loop until open_parenthesis logic_expression close_parenthesis\n        loops : for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO\n        \n        logic_expression : arithmetic_expression        \n        logic_expression : logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET\n        logic_expression : open_parenthesis logic_expression close_parenthesis\n        \n        logic_operator : and ACTION_ADD_OPERATOR\n        logic_operator : or ACTION_ADD_OPERATOR\n        logic_operator : is_equal ACTION_ADD_OPERATOR\n        logic_operator : is_not_equal ACTION_ADD_OPERATOR\n        logic_operator : greater_than ACTION_ADD_OPERATOR\n        logic_operator : greater_or_equal_than ACTION_ADD_OPERATOR\n        logic_operator : less_than ACTION_ADD_OPERATOR\n        logic_operator : less_or_equal_than ACTION_ADD_OPERATOR\n        \n        arithmetic_expression : value\n        arithmetic_expression : arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET\n        arithmetic_expression : open_parenthesis arithmetic_expression close_parenthesis\n        \n        arithmetic_operator : sum ACTION_ADD_OPERATOR\n        arithmetic_operator : substraction ACTION_ADD_OPERATOR\n        arithmetic_operator : multiplication ACTION_ADD_OPERATOR\n        arithmetic_operator : division ACTION_ADD_OPERATOR\n        arithmetic_operator : exponent ACTION_ADD_OPERATOR\n        \n        possible_values : real_value\n        possible_values : functions\n        possible_values : ids_access\n        \n        value : possible_values\n        value : not possible_values ACTION_ADD_NOT_OPERAND\n        value : open_parenthesis value close_parenthesis\n        \n        ids_access : id ACTION_ADD_VAR_VALUE\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND\n        ids_access : id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND\n        ids_access : open_parenthesis ids_access close_parenthesis\n        \n        real_value : word_value ACTION_ADD_WORD_VALUE\n        real_value : float_value ACTION_ADD_FLOAT_VALUE\n        real_value : bool_value ACTION_ADD_BOOL_VALUE\n        real_value : id ACTION_ADD_VAR_VALUE\n        \n        calls : gosub id\n        calls : functions\n        \n        subroutines : sub procedure id inside_logic return subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines\n        subroutines : sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines\n        |\n        \n        assign : let ids_access equals logic_expression ACTION_ASSIGN_VALUE\n        assign : let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE\n        \n        parameters : variable\n        parameters : parameters comma parameters\n        \n        functions : id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis\n        functions : id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis\n        \n        arguments : ByVal value ACTION_ADD_FUNCTION_OPERAND\n        arguments : ByRef id ACTION_ADD_FUNCTION_OPERAND\n        arguments : arguments comma arguments\n        \n        read_or_write : print\n        read_or_write : read\n        read_or_write : dunkelCls\n        \n        print : dunkelPrint multiple_print\n        print : dunkelPrint open_parenthesis multiple_print close_parenthesis\n        \n        multiple_print : string\n        multiple_print : arithmetic_expression\n        multiple_print : multiple_print comma multiple_print\n        \n        read : dunkelRead multiple_read\n        read : dunkelRead string comma multiple_read\n        \n        multiple_read : ids_access \n        multiple_read : multiple_read comma ids_access\n        \n        ACTION_ADD_FOR_VALUE :\n        \n        ACTION_ADD_VAR_VALUE :\n        \n        ACTION_ADD_WORD_VALUE :\n        \n        ACTION_ADD_FLOAT_VALUE :\n        \n        ACTION_ADD_BOOL_VALUE :\n        \n        ACTION_ADD_OPERATOR :\n        \n        ACTION_ADD_FUNCTION_OPERAND :\n        \n        ACTION_ADD_FUNCTION :\n        \n        ACTION_ASSIGN_VALUE : \n        \n        ACTION_ADD_PARAMETERS :\n        \n        ACTION_ADD_NOT_OPERAND :\n        \n        ACTION_ADD_QUADRUPLET :\n        \n        ACTION_ADD_ONE_DIM_OPERAND :\n        \n        ACTION_ADD_TWO_DIM_OPERAND :\n        \n        ACTION_ADD_THREE_DIM_OPERAND :\n        \n        ACTION_ADD_QUADRUPLET_EMPTY_JUMP :\n        \n        ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP :\n        \n        ACTION_NEW_IF :\n        \n        ACTION_QUADRUPLET_EMPTY_JUMP_END_IF  :\n        \n        ACTION_FILL_JUMP :\n        \n        ACTION_FILL_JUMP_END_IF :\n        \n        ACTION_FOR_JUMP_BACK :\n        \n        ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP :\n        \n        ACTION_FOR_INCREMENT :\n        \n        ACTION_FOR_GOTO :\n        \n        ACTION_WHILE_GOTO :\n        '
    
_lr_action_items = {'end':([0,2,3,4,5,6,7,8,11,17,18,19,20,25,26,27,28,29,30,33,34,35,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,112,113,114,132,133,135,136,138,139,140,142,149,150,151,159,161,162,165,166,167,179,180,182,187,191,195,196,200,202,205,206,207,210,211,212,215,217,219,222,224,225,226,230,231,235,236,237,239,241,243,244,245,246,249,253,255,263,266,268,272,273,],[-9,24,-9,-9,-9,-9,-9,-9,-109,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,66,-109,68,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-9,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,160,-110,-9,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,192,-29,-105,-101,-69,-70,-39,-74,-110,-9,-28,-102,-9,-11,-19,-110,-107,-115,-25,-53,229,-9,-21,-9,-108,-24,-9,242,-9,-108,-17,-103,251,-9,-12,-108,-22,-54,260,-23,-104,-13,-55,-114,-26,]),'dim':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,185,187,191,195,196,200,202,205,206,207,211,212,215,219,220,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[9,9,9,9,9,9,9,9,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,9,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,9,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,9,-18,-20,-29,-105,-101,9,-69,-70,-39,9,-74,-110,9,-28,-102,9,-11,-19,-110,-115,-25,-53,9,9,-21,9,-24,9,9,-103,9,-12,-54,-113,-104,-13,9,-55,-114,-26,]),'while':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[13,13,13,13,13,13,13,13,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,13,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,13,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,13,-18,-20,-29,-105,-101,13,-69,-70,-39,-74,-110,13,-28,-102,13,-11,-19,-110,-115,-25,-53,13,-21,13,-24,13,13,-103,13,-12,-54,-113,-104,-13,13,-55,-114,-26,]),'do':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[14,14,14,14,14,14,14,14,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,14,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,14,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,14,-18,-20,-29,-105,-101,14,-69,-70,-39,-74,-110,14,-28,-102,14,-11,-19,-110,-115,-25,-53,14,-21,14,-24,14,14,-103,14,-12,-54,-113,-104,-13,14,-55,-114,-26,]),'for':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[15,15,15,15,15,15,15,15,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,15,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,15,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,15,-18,-20,-29,-105,-101,15,-69,-70,-39,-74,-110,15,-28,-102,15,-11,-19,-110,-115,-25,-53,15,-21,15,-24,15,15,-103,15,-12,-54,-113,-104,-13,15,-55,-114,-26,]),'gosub':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[16,16,16,16,16,16,16,16,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,16,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,16,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,16,-18,-20,-29,-105,-101,16,-69,-70,-39,-74,-110,16,-28,-102,16,-11,-19,-110,-115,-25,-53,16,-21,16,-24,16,16,-103,16,-12,-54,-113,-104,-13,16,-55,-114,-26,]),'dunkelCls':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[20,20,20,20,20,20,20,20,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,20,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,20,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,20,-18,-20,-29,-105,-101,20,-69,-70,-39,-74,-110,20,-28,-102,20,-11,-19,-110,-115,-25,-53,20,-21,20,-24,20,20,-103,20,-12,-54,-113,-104,-13,20,-55,-114,-26,]),'let':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[21,21,21,21,21,21,21,21,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,21,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,21,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,21,-18,-20,-29,-105,-101,21,-69,-70,-39,-74,-110,21,-28,-102,21,-11,-19,-110,-115,-25,-53,21,-21,21,-24,21,21,-103,21,-12,-54,-113,-104,-13,21,-55,-114,-26,]),'if':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,66,67,68,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,160,161,165,166,167,176,179,180,182,187,191,192,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[12,12,12,12,12,12,12,12,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,111,12,113,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,12,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,12,-18,191,-20,-29,-105,-101,12,-69,-70,-39,-74,-110,207,12,-28,-102,12,-11,-19,-110,-115,-25,-53,12,-21,12,-24,12,12,-103,12,-12,-54,-113,-104,-13,12,-55,-114,-26,]),'id':([0,3,4,5,6,7,8,9,14,15,16,17,18,19,20,21,22,23,34,37,38,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,67,69,72,74,78,79,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,113,114,116,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,138,139,140,142,143,144,145,146,147,148,149,150,151,152,159,161,163,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,182,187,191,195,196,200,202,205,206,207,211,212,213,214,215,219,222,224,226,227,230,235,239,243,244,248,249,256,262,263,266,267,268,271,272,273,],[10,10,10,10,10,10,10,31,10,40,41,-62,-78,-79,-80,43,58,43,-109,58,58,-61,-91,43,-81,87,-83,-84,-38,-49,58,-46,-47,-48,-92,-93,-94,-91,-86,-88,10,-109,87,-27,58,-52,58,87,58,-95,-95,-95,-95,-95,-100,-57,-58,-59,-52,43,43,152,153,-10,-14,-15,-16,-73,58,158,-110,-110,10,58,58,-95,-95,-95,-95,-95,-95,-95,-95,-106,58,-98,-27,58,-56,-85,-82,-40,-51,-101,87,-41,-42,-43,-44,-45,-50,-89,-87,10,-18,-20,58,-29,-105,-101,-30,-31,-32,-33,-34,-35,-36,-37,10,58,-69,-70,-39,-74,-110,10,-28,-102,10,-11,-19,-110,-115,-25,-111,58,-53,10,-21,10,-24,58,10,10,-103,10,-12,58,-54,58,-113,-104,-13,10,-55,272,-114,-26,]),'dunkelPrint':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[22,22,22,22,22,22,22,22,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,22,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,22,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,22,-18,-20,-29,-105,-101,22,-69,-70,-39,-74,-110,22,-28,-102,22,-11,-19,-110,-115,-25,-53,22,-21,22,-24,22,22,-103,22,-12,-54,-113,-104,-13,22,-55,-114,-26,]),'dunkelRead':([0,3,4,5,6,7,8,14,17,18,19,20,34,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,67,69,74,79,94,95,96,97,98,103,104,105,106,107,111,113,114,129,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,166,167,176,179,180,182,187,191,195,196,200,202,205,206,207,211,212,215,219,222,224,226,230,235,239,243,244,249,262,263,266,267,268,272,273,],[23,23,23,23,23,23,23,23,-62,-78,-79,-80,-109,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,23,-109,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,23,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,23,-18,-20,-29,-105,-101,23,-69,-70,-39,-74,-110,23,-28,-102,23,-11,-19,-110,-115,-25,-53,23,-21,23,-24,23,23,-103,23,-12,-54,-113,-104,-13,23,-55,-114,-26,]),'$end':([1,24,62,201,216,240,250,252,258,259,264,265,269,],[0,-1,-2,-68,-63,-68,-64,-68,-68,-65,-66,-68,-67,]),'loop':([3,4,5,6,7,8,14,17,18,19,20,25,26,27,28,29,30,39,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,132,133,135,136,138,139,140,142,149,150,151,159,161,165,167,179,180,182,187,191,196,200,205,206,207,211,212,215,222,226,239,244,249,263,266,268,272,273,],[-9,-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,76,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,-29,-101,-69,-70,-39,-74,-110,-28,-102,-11,-19,-110,-115,-25,-53,-21,-24,-103,-12,-54,-104,-13,-55,-114,-26,]),'return':([3,4,5,6,7,8,17,18,19,20,25,26,27,28,29,30,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,132,133,135,136,138,139,140,142,149,150,151,152,159,161,165,167,179,180,182,184,187,191,196,200,205,206,207,211,212,215,222,226,239,244,249,263,266,268,272,273,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-9,-18,-20,-29,-101,-69,-70,-39,201,-74,-110,-28,-102,-11,-19,-110,-115,-25,-53,-21,-24,-103,-12,-54,-104,-13,-55,-114,-26,]),'wend':([3,4,5,6,7,8,17,18,19,20,25,26,27,28,29,30,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,129,132,133,135,136,138,139,140,142,149,150,151,159,161,165,167,176,179,180,182,187,191,196,197,200,205,206,207,211,212,215,222,226,239,244,249,263,266,268,272,273,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-106,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,-29,-101,-9,-69,-70,-39,-74,-110,-28,211,-102,-11,-19,-110,-115,-25,-53,-21,-24,-103,-12,-54,-104,-13,-55,-114,-26,]),'else':([3,4,5,6,7,8,11,17,18,19,20,25,26,27,28,29,30,35,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,132,133,135,136,138,139,140,142,149,150,151,159,161,165,166,167,179,180,182,187,191,195,196,200,205,206,207,210,211,212,215,222,224,225,226,235,236,237,239,244,245,246,249,255,263,266,268,272,273,],[-9,-9,-9,-9,-9,-9,34,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,69,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,-29,-105,-101,-69,-70,-39,-74,-110,-9,-28,-102,-11,-19,-110,-107,-115,-25,-53,-21,-9,-108,-24,-9,-108,-17,-103,-12,-108,-22,-54,-23,-104,-13,-55,-114,-26,]),'elsif':([3,4,5,6,7,8,11,17,18,19,20,25,26,27,28,29,30,35,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,132,133,135,136,138,139,140,142,149,150,151,159,161,165,166,167,179,180,182,187,191,195,196,200,205,206,207,210,211,212,215,222,224,225,226,235,236,237,239,244,245,246,249,255,263,266,268,272,273,],[-9,-9,-9,-9,-9,-9,36,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,70,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,-29,-105,-101,-69,-70,-39,-74,-110,-9,-28,-102,-11,-19,-110,-107,-115,-25,-53,-21,-9,-108,-24,-9,-108,-17,-103,-12,-108,-22,-54,-23,-104,-13,-55,-114,-26,]),'next':([3,4,5,6,7,8,17,18,19,20,25,26,27,28,29,30,41,43,45,47,48,49,50,52,53,54,55,56,57,58,59,61,74,79,94,95,96,97,98,103,104,105,106,107,111,113,132,133,135,136,138,139,140,142,149,150,151,159,161,165,167,179,180,182,187,191,196,200,205,206,207,211,212,215,222,226,239,244,249,262,263,266,267,268,270,272,273,],[-9,-9,-9,-9,-9,-9,-62,-78,-79,-80,-3,-4,-5,-6,-7,-8,-61,-91,-81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,-86,-88,-27,-52,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-110,-110,-98,-27,-56,-85,-82,-40,-51,-101,-50,-89,-87,-18,-20,-29,-101,-69,-70,-39,-74,-110,-28,-102,-11,-19,-110,-115,-25,-53,-21,-24,-103,-12,-54,-113,-104,-13,-9,-55,271,-114,-26,]),'open_parenthesis':([10,12,13,21,22,23,32,36,37,38,44,46,51,58,70,71,72,78,81,82,87,88,89,90,91,92,93,99,100,109,115,116,120,121,122,123,124,125,126,127,128,130,131,134,143,144,145,146,147,148,153,163,168,169,170,171,172,173,174,175,177,213,214,227,248,256,],[-97,37,38,44,46,44,65,-109,72,72,44,82,44,-97,-109,116,72,72,82,82,-97,143,-95,-95,-95,-95,-95,44,44,143,163,72,72,-95,-95,-95,-95,-95,-95,-95,-95,177,82,82,143,-41,-42,-43,-44,-45,185,72,-30,-31,-32,-33,-34,-35,-36,-37,72,-111,82,82,82,82,]),'string':([22,23,46,81,],[47,60,47,47,]),'not':([22,37,38,46,72,78,81,82,88,89,90,91,92,93,109,116,120,121,122,123,124,125,126,127,128,131,134,143,144,145,146,147,148,163,168,169,170,171,172,173,174,175,177,213,214,227,248,256,],[51,51,51,51,51,51,51,51,51,-95,-95,-95,-95,-95,51,51,51,-95,-95,-95,-95,-95,-95,-95,-95,51,51,51,-41,-42,-43,-44,-45,51,-30,-31,-32,-33,-34,-35,-36,-37,51,-111,51,51,51,51,]),'word_value':([22,37,38,46,51,72,78,81,82,88,89,90,91,92,93,109,116,120,121,122,123,124,125,126,127,128,131,134,143,144,145,146,147,148,154,163,168,169,170,171,172,173,174,175,177,213,214,221,227,248,254,256,],[55,55,55,55,55,55,55,55,55,55,-95,-95,-95,-95,-95,55,55,55,-95,-95,-95,-95,-95,-95,-95,-95,55,55,55,-41,-42,-43,-44,-45,186,55,-30,-31,-32,-33,-34,-35,-36,-37,55,-111,55,234,55,55,261,55,]),'float_value':([22,37,38,46,51,72,78,81,82,88,89,90,91,92,93,109,116,120,121,122,123,124,125,126,127,128,131,134,143,144,145,146,147,148,163,168,169,170,171,172,173,174,175,177,213,214,227,248,256,],[56,56,56,56,56,56,56,56,56,56,-95,-95,-95,-95,-95,56,56,56,-95,-95,-95,-95,-95,-95,-95,-95,56,56,56,-41,-42,-43,-44,-45,56,-30,-31,-32,-33,-34,-35,-36,-37,56,-111,56,56,56,56,]),'bool_value':([22,37,38,46,51,72,78,81,82,88,89,90,91,92,93,109,116,120,121,122,123,124,125,126,127,128,131,134,143,144,145,146,147,148,163,168,169,170,171,172,173,174,175,177,213,214,227,248,256,],[57,57,57,57,57,57,57,57,57,57,-95,-95,-95,-95,-95,57,57,57,-95,-95,-95,-95,-95,-95,-95,-95,57,57,57,-41,-42,-43,-44,-45,57,-30,-31,-32,-33,-34,-35,-36,-37,57,-111,57,57,57,57,]),'sub':([24,201,229,240,242,251,252,258,260,265,],[63,63,240,63,252,258,63,63,265,63,]),'as':([31,202,219,],[64,218,232,]),'equals':([40,42,43,77,79,135,200,215,239,249,263,268,],[-90,78,-91,131,-52,-56,-102,-53,-103,-54,-104,-55,]),'open_brackets':([43,58,79,87,98,103,104,105,106,141,200,205,239,244,],[-91,-91,134,-91,134,154,-14,-15,-16,134,214,221,248,254,]),'comma':([43,45,47,48,49,50,52,53,54,55,56,57,58,59,60,61,79,83,84,85,86,87,94,95,96,97,98,103,104,105,106,107,108,135,136,139,140,141,142,149,150,151,157,158,182,187,188,189,190,200,203,204,205,215,233,239,244,249,263,266,268,],[-91,81,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,99,100,-88,-52,81,-84,-38,-48,-91,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,156,-56,81,-40,-51,-52,-101,-50,-89,99,-96,-96,-39,-74,156,-75,-76,-102,220,-71,-11,-53,220,-103,-12,-54,-104,-13,-55,]),'close_parenthesis':([43,47,48,49,50,52,53,54,55,56,57,58,65,73,74,75,79,80,83,84,85,86,87,94,95,96,97,98,103,104,105,106,107,108,117,118,135,136,137,139,140,141,142,149,155,157,158,164,165,167,182,183,185,187,188,189,190,193,196,198,200,203,204,205,215,233,239,244,249,263,266,268,],[-91,-83,-84,-38,-49,-46,-47,-48,-92,-93,-94,-91,107,119,-27,129,-52,135,138,139,140,135,-91,-100,-57,-58,-59,-52,-10,-14,-15,-16,-73,-99,165,139,-56,-85,139,-40,-51,-52,-101,-50,187,-96,-96,194,-29,-101,-39,140,202,-74,-77,-75,-76,208,-28,212,-102,219,-71,-11,-53,-72,-103,-12,-54,-104,-13,-55,]),'sum':([48,49,50,52,53,54,55,56,57,58,74,84,85,86,87,94,95,96,97,98,107,118,133,135,137,139,140,141,142,149,178,181,182,187,200,215,228,238,239,249,257,262,263,268,],[89,-38,-49,-46,-47,-48,-92,-93,-94,-91,89,89,-38,-48,-91,-100,-57,-58,-59,-52,-73,89,89,-56,89,-40,-51,-52,-101,-50,89,89,-39,-74,-102,-53,89,89,-103,-54,89,89,-104,-55,]),'substraction':([48,49,50,52,53,54,55,56,57,58,74,84,85,86,87,94,95,96,97,98,107,118,133,135,137,139,140,141,142,149,178,181,182,187,200,215,228,238,239,249,257,262,263,268,],[90,-38,-49,-46,-47,-48,-92,-93,-94,-91,90,90,-38,-48,-91,-100,-57,-58,-59,-52,-73,90,90,-56,90,-40,-51,-52,-101,-50,90,90,-39,-74,-102,-53,90,90,-103,-54,90,90,-104,-55,]),'multiplication':([48,49,50,52,53,54,55,56,57,58,74,84,85,86,87,94,95,96,97,98,107,118,133,135,137,139,140,141,142,149,178,181,182,187,200,215,228,238,239,249,257,262,263,268,],[91,-38,-49,-46,-47,-48,-92,-93,-94,-91,91,91,-38,-48,-91,-100,-57,-58,-59,-52,-73,91,91,-56,91,-40,-51,-52,-101,-50,91,91,-39,-74,-102,-53,91,91,-103,-54,91,91,-104,-55,]),'division':([48,49,50,52,53,54,55,56,57,58,74,84,85,86,87,94,95,96,97,98,107,118,133,135,137,139,140,141,142,149,178,181,182,187,200,215,228,238,239,249,257,262,263,268,],[92,-38,-49,-46,-47,-48,-92,-93,-94,-91,92,92,-38,-48,-91,-100,-57,-58,-59,-52,-73,92,92,-56,92,-40,-51,-52,-101,-50,92,92,-39,-74,-102,-53,92,92,-103,-54,92,92,-104,-55,]),'exponent':([48,49,50,52,53,54,55,56,57,58,74,84,85,86,87,94,95,96,97,98,107,118,133,135,137,139,140,141,142,149,178,181,182,187,200,215,228,238,239,249,257,262,263,268,],[93,-38,-49,-46,-47,-48,-92,-93,-94,-91,93,93,-38,-48,-91,-100,-57,-58,-59,-52,-73,93,93,-56,93,-40,-51,-52,-101,-50,93,93,-39,-74,-102,-53,93,93,-103,-54,93,93,-104,-55,]),'and':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,121,-27,121,-38,-48,-91,-100,-57,-58,-59,-52,-73,121,-27,121,-27,-56,-40,-51,-52,-101,-50,121,-29,121,-39,-74,121,-28,121,-102,-53,-103,-54,-104,-55,]),'or':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,122,-27,122,-38,-48,-91,-100,-57,-58,-59,-52,-73,122,-27,122,-27,-56,-40,-51,-52,-101,-50,122,-29,122,-39,-74,122,-28,122,-102,-53,-103,-54,-104,-55,]),'is_equal':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,123,-27,123,-38,-48,-91,-100,-57,-58,-59,-52,-73,123,-27,123,-27,-56,-40,-51,-52,-101,-50,123,-29,123,-39,-74,123,-28,123,-102,-53,-103,-54,-104,-55,]),'is_not_equal':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,124,-27,124,-38,-48,-91,-100,-57,-58,-59,-52,-73,124,-27,124,-27,-56,-40,-51,-52,-101,-50,124,-29,124,-39,-74,124,-28,124,-102,-53,-103,-54,-104,-55,]),'greater_than':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,125,-27,125,-38,-48,-91,-100,-57,-58,-59,-52,-73,125,-27,125,-27,-56,-40,-51,-52,-101,-50,125,-29,125,-39,-74,125,-28,125,-102,-53,-103,-54,-104,-55,]),'greater_or_equal_than':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,126,-27,126,-38,-48,-91,-100,-57,-58,-59,-52,-73,126,-27,126,-27,-56,-40,-51,-52,-101,-50,126,-29,126,-39,-74,126,-28,126,-102,-53,-103,-54,-104,-55,]),'less_than':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,127,-27,127,-38,-48,-91,-100,-57,-58,-59,-52,-73,127,-27,127,-27,-56,-40,-51,-52,-101,-50,127,-29,127,-39,-74,127,-28,127,-102,-53,-103,-54,-104,-55,]),'less_or_equal_than':([49,50,52,53,54,55,56,57,58,73,74,75,85,86,87,94,95,96,97,98,107,117,118,132,133,135,139,140,141,142,149,164,165,167,182,187,193,196,198,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,128,-27,128,-38,-48,-91,-100,-57,-58,-59,-52,-73,128,-27,128,-27,-56,-40,-51,-52,-101,-50,128,-29,128,-39,-74,128,-28,128,-102,-53,-103,-54,-104,-55,]),'to':([49,50,52,53,54,55,56,57,58,94,95,96,97,98,107,135,139,140,142,149,178,182,187,199,200,215,239,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,-100,-57,-58,-59,-52,-73,-56,-40,-51,-101,-50,-98,-39,-74,213,-102,-53,-103,-54,-104,-55,]),'close_brackets':([49,50,52,53,54,55,56,57,58,94,95,96,97,98,107,135,139,140,142,149,181,182,186,187,200,215,228,234,239,249,257,261,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,-100,-57,-58,-59,-52,-73,-56,-40,-51,-101,-50,200,-39,205,-74,-102,-53,239,244,-103,-54,263,266,-104,-55,]),'step':([49,50,52,53,54,55,56,57,58,94,95,96,97,98,107,135,139,140,142,149,182,187,200,215,238,239,247,249,263,268,],[-38,-49,-46,-47,-48,-92,-93,-94,-91,-100,-57,-58,-59,-52,-73,-56,-40,-51,-101,-50,-39,-74,-102,-53,-112,-103,256,-54,-104,-55,]),'procedure':([63,],[101,]),'function':([63,],[102,]),'word':([64,218,232,],[104,104,104,]),'float':([64,218,232,],[105,105,105,]),'bool':([64,218,232,],[106,106,106,]),'ByVal':([65,156,],[109,109,]),'ByRef':([65,156,],[110,110,]),'until':([76,],[130,]),'then':([119,194,208,209,223,],[166,-105,-105,224,235,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'inside_logic':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[2,25,26,27,28,29,30,39,112,162,184,197,210,217,231,236,241,245,253,270,]),'variable':([0,3,4,5,6,7,8,14,67,114,152,176,185,195,202,219,220,224,230,235,243,267,],[3,3,3,3,3,3,3,3,3,3,3,3,204,3,3,3,204,3,3,3,3,3,]),'conditions':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'calls':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'read_or_write':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'base_if':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'functions':([0,3,4,5,6,7,8,14,22,37,38,46,51,67,72,78,81,82,88,109,114,116,120,131,134,143,152,163,176,177,195,202,214,219,224,227,230,235,243,248,256,267,],[17,17,17,17,17,17,17,17,53,53,53,53,53,17,53,53,53,53,53,53,17,53,53,53,53,53,17,53,17,53,17,17,53,17,17,53,17,17,17,53,53,17,]),'print':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'read':([0,3,4,5,6,7,8,14,67,114,152,176,195,202,219,224,230,235,243,267,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'ACTION_ADD_FUNCTION':([10,58,87,],[32,32,32,]),'ACTION_FILL_JUMP':([11,34,36,69,70,],[33,67,71,114,115,]),'else_ifs':([11,],[35,]),'ids_access':([21,22,23,37,38,44,46,51,72,78,81,82,88,99,100,109,116,120,131,134,143,163,177,214,227,248,256,],[42,54,61,54,54,80,86,54,86,54,54,86,54,150,61,54,54,54,54,54,86,54,54,54,54,54,54,]),'multiple_print':([22,46,81,],[45,83,136,]),'arithmetic_expression':([22,37,38,46,72,78,81,82,116,120,131,134,163,177,214,227,248,256,],[48,74,74,84,118,133,48,137,74,74,178,181,74,74,228,238,257,262,]),'value':([22,37,38,46,72,78,81,82,88,109,116,120,131,134,143,163,177,214,227,248,256,],[49,49,49,85,85,49,49,85,142,157,49,49,49,49,183,49,49,49,49,49,49,]),'possible_values':([22,37,38,46,51,72,78,81,82,88,109,116,120,131,134,143,163,177,214,227,248,256,],[50,50,50,50,94,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'real_value':([22,37,38,46,51,72,78,81,82,88,109,116,120,131,134,143,163,177,214,227,248,256,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'multiple_read':([23,100,],[59,151,]),'subroutines':([24,201,240,252,258,265,],[62,216,250,259,264,269,]),'logic_expression':([37,38,72,78,116,120,163,177,],[73,75,117,132,164,167,193,198,]),'ACTION_ADD_FOR_VALUE':([40,],[77,]),'ACTION_ADD_VAR_VALUE':([43,58,87,],[79,98,141,]),'arithmetic_operator':([48,74,84,118,133,137,178,181,228,238,257,262,],[88,88,88,88,88,88,88,88,88,88,88,88,]),'ACTION_ADD_WORD_VALUE':([55,],[95,]),'ACTION_ADD_FLOAT_VALUE':([56,],[96,]),'ACTION_ADD_BOOL_VALUE':([57,],[97,]),'variable_type':([64,218,232,],[103,230,243,]),'arguments':([65,156,],[108,188,]),'logic_operator':([73,75,117,132,164,167,193,198,],[120,120,120,120,120,120,120,120,]),'ACTION_ADD_OPERATOR':([89,90,91,92,93,121,122,123,124,125,126,127,128,],[144,145,146,147,148,168,169,170,171,172,173,174,175,]),'ACTION_ADD_NOT_OPERAND':([94,],[149,]),'ACTION_ADD_PARAMETERS':([108,],[155,]),'ACTION_FILL_JUMP_END_IF':([111,113,191,207,],[159,161,206,222,]),'ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP':([129,],[176,]),'ACTION_ASSIGN_VALUE':([132,133,178,],[179,180,199,]),'ACTION_ADD_QUADRUPLET':([142,167,],[182,196,]),'ACTION_ADD_FUNCTION_OPERAND':([157,158,],[189,190,]),'ACTION_ADD_QUADRUPLET_EMPTY_JUMP':([166,194,208,],[195,209,223,]),'parameters':([185,220,],[203,233,]),'ACTION_ADD_ONE_DIM_OPERAND':([200,],[215,]),'ACTION_NEW_IF':([210,],[225,]),'ACTION_WHILE_GOTO':([211,],[226,]),'ACTION_FOR_JUMP_BACK':([213,],[227,]),'ACTION_QUADRUPLET_EMPTY_JUMP_END_IF':([225,236,245,],[237,246,255,]),'ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP':([238,],[247,]),'ACTION_ADD_TWO_DIM_OPERAND':([239,],[249,]),'ACTION_FOR_INCREMENT':([262,],[267,]),'ACTION_ADD_THREE_DIM_OPERAND':([263,],[268,]),'ACTION_FOR_GOTO':([272,],[273,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> inside_logic end','program',2,'p_program','Parser.py',69),
  ('program -> inside_logic end subroutines','program',3,'p_program','Parser.py',70),
  ('inside_logic -> variable inside_logic','inside_logic',2,'p_inside_logic','Parser.py',78),
  ('inside_logic -> conditions inside_logic','inside_logic',2,'p_inside_logic','Parser.py',79),
  ('inside_logic -> loops inside_logic','inside_logic',2,'p_inside_logic','Parser.py',80),
  ('inside_logic -> calls inside_logic','inside_logic',2,'p_inside_logic','Parser.py',81),
  ('inside_logic -> read_or_write inside_logic','inside_logic',2,'p_inside_logic','Parser.py',82),
  ('inside_logic -> assign inside_logic','inside_logic',2,'p_inside_logic','Parser.py',83),
  ('inside_logic -> <empty>','inside_logic',0,'p_inside_logic','Parser.py',84),
  ('variable -> dim id as variable_type','variable',4,'p_variable','Parser.py',89),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets','variable',7,'p_variable','Parser.py',90),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',10,'p_variable','Parser.py',91),
  ('variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets','variable',13,'p_variable','Parser.py',92),
  ('variable_type -> word','variable_type',1,'p_variable_type','Parser.py',116),
  ('variable_type -> float','variable_type',1,'p_variable_type','Parser.py',117),
  ('variable_type -> bool','variable_type',1,'p_variable_type','Parser.py',118),
  ('base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF','base_if',9,'p_base_if','Parser.py',124),
  ('conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF','conditions',5,'p_conditions','Parser.py',129),
  ('conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF','conditions',7,'p_conditions','Parser.py',130),
  ('conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF','conditions',5,'p_conditions','Parser.py',131),
  ('conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF','conditions',8,'p_conditions','Parser.py',132),
  ('else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF','else_ifs',9,'p_else_ifs','Parser.py',137),
  ('else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF','else_ifs',10,'p_else_ifs','Parser.py',138),
  ('loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO','loops',8,'p_loops','Parser.py',143),
  ('loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis','loops',7,'p_loops','Parser.py',144),
  ('loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO','loops',17,'p_loops','Parser.py',145),
  ('logic_expression -> arithmetic_expression','logic_expression',1,'p_logic_expression','Parser.py',150),
  ('logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET','logic_expression',4,'p_logic_expression','Parser.py',151),
  ('logic_expression -> open_parenthesis logic_expression close_parenthesis','logic_expression',3,'p_logic_expression','Parser.py',152),
  ('logic_operator -> and ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',157),
  ('logic_operator -> or ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',158),
  ('logic_operator -> is_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',159),
  ('logic_operator -> is_not_equal ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',160),
  ('logic_operator -> greater_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',161),
  ('logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',162),
  ('logic_operator -> less_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',163),
  ('logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR','logic_operator',2,'p_logic_operator','Parser.py',164),
  ('arithmetic_expression -> value','arithmetic_expression',1,'p_arithmetic_expression','Parser.py',169),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET','arithmetic_expression',4,'p_arithmetic_expression','Parser.py',170),
  ('arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis','arithmetic_expression',3,'p_arithmetic_expression','Parser.py',171),
  ('arithmetic_operator -> sum ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',176),
  ('arithmetic_operator -> substraction ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',177),
  ('arithmetic_operator -> multiplication ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',178),
  ('arithmetic_operator -> division ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',179),
  ('arithmetic_operator -> exponent ACTION_ADD_OPERATOR','arithmetic_operator',2,'p_arithmetic_operator','Parser.py',180),
  ('possible_values -> real_value','possible_values',1,'p_possible_values','Parser.py',185),
  ('possible_values -> functions','possible_values',1,'p_possible_values','Parser.py',186),
  ('possible_values -> ids_access','possible_values',1,'p_possible_values','Parser.py',187),
  ('value -> possible_values','value',1,'p_value','Parser.py',192),
  ('value -> not possible_values ACTION_ADD_NOT_OPERAND','value',3,'p_value','Parser.py',193),
  ('value -> open_parenthesis value close_parenthesis','value',3,'p_value','Parser.py',194),
  ('ids_access -> id ACTION_ADD_VAR_VALUE','ids_access',2,'p_ids_access','Parser.py',199),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND','ids_access',6,'p_ids_access','Parser.py',200),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND','ids_access',9,'p_ids_access','Parser.py',201),
  ('ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND','ids_access',12,'p_ids_access','Parser.py',202),
  ('ids_access -> open_parenthesis ids_access close_parenthesis','ids_access',3,'p_ids_access','Parser.py',203),
  ('real_value -> word_value ACTION_ADD_WORD_VALUE','real_value',2,'p_real_value','Parser.py',208),
  ('real_value -> float_value ACTION_ADD_FLOAT_VALUE','real_value',2,'p_real_value','Parser.py',209),
  ('real_value -> bool_value ACTION_ADD_BOOL_VALUE','real_value',2,'p_real_value','Parser.py',210),
  ('real_value -> id ACTION_ADD_VAR_VALUE','real_value',2,'p_real_value','Parser.py',211),
  ('calls -> gosub id','calls',2,'p_calls','Parser.py',216),
  ('calls -> functions','calls',1,'p_calls','Parser.py',217),
  ('subroutines -> sub procedure id inside_logic return subroutines','subroutines',6,'p_subroutines','Parser.py',222),
  ('subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines','subroutines',9,'p_subroutines','Parser.py',223),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines','subroutines',10,'p_subroutines','Parser.py',224),
  ('subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',11,'p_subroutines','Parser.py',225),
  ('subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines','subroutines',12,'p_subroutines','Parser.py',226),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','Parser.py',227),
  ('assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE','assign',5,'p_assign','Parser.py',244),
  ('assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE','assign',5,'p_assign','Parser.py',245),
  ('parameters -> variable','parameters',1,'p_parameters','Parser.py',250),
  ('parameters -> parameters comma parameters','parameters',3,'p_parameters','Parser.py',251),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis','functions',4,'p_functions','Parser.py',256),
  ('functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis','functions',6,'p_functions','Parser.py',257),
  ('arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',262),
  ('arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND','arguments',3,'p_arguments','Parser.py',263),
  ('arguments -> arguments comma arguments','arguments',3,'p_arguments','Parser.py',264),
  ('read_or_write -> print','read_or_write',1,'p_read_or_write','Parser.py',269),
  ('read_or_write -> read','read_or_write',1,'p_read_or_write','Parser.py',270),
  ('read_or_write -> dunkelCls','read_or_write',1,'p_read_or_write','Parser.py',271),
  ('print -> dunkelPrint multiple_print','print',2,'p_print','Parser.py',276),
  ('print -> dunkelPrint open_parenthesis multiple_print close_parenthesis','print',4,'p_print','Parser.py',277),
  ('multiple_print -> string','multiple_print',1,'p_multiple_print','Parser.py',282),
  ('multiple_print -> arithmetic_expression','multiple_print',1,'p_multiple_print','Parser.py',283),
  ('multiple_print -> multiple_print comma multiple_print','multiple_print',3,'p_multiple_print','Parser.py',284),
  ('read -> dunkelRead multiple_read','read',2,'p_read','Parser.py',289),
  ('read -> dunkelRead string comma multiple_read','read',4,'p_read','Parser.py',290),
  ('multiple_read -> ids_access','multiple_read',1,'p_multiple_read','Parser.py',295),
  ('multiple_read -> multiple_read comma ids_access','multiple_read',3,'p_multiple_read','Parser.py',296),
  ('ACTION_ADD_FOR_VALUE -> <empty>','ACTION_ADD_FOR_VALUE',0,'p_action_add_for_value','Parser.py',301),
  ('ACTION_ADD_VAR_VALUE -> <empty>','ACTION_ADD_VAR_VALUE',0,'p_action_add_var_value','Parser.py',314),
  ('ACTION_ADD_WORD_VALUE -> <empty>','ACTION_ADD_WORD_VALUE',0,'p_action_add_word_value','Parser.py',322),
  ('ACTION_ADD_FLOAT_VALUE -> <empty>','ACTION_ADD_FLOAT_VALUE',0,'p_action_add_float_value','Parser.py',328),
  ('ACTION_ADD_BOOL_VALUE -> <empty>','ACTION_ADD_BOOL_VALUE',0,'p_action_add_bool_value','Parser.py',334),
  ('ACTION_ADD_OPERATOR -> <empty>','ACTION_ADD_OPERATOR',0,'p_action_add_operator','Parser.py',340),
  ('ACTION_ADD_FUNCTION_OPERAND -> <empty>','ACTION_ADD_FUNCTION_OPERAND',0,'p_action_add_function_operand','Parser.py',346),
  ('ACTION_ADD_FUNCTION -> <empty>','ACTION_ADD_FUNCTION',0,'p_action_add_function','Parser.py',354),
  ('ACTION_ASSIGN_VALUE -> <empty>','ACTION_ASSIGN_VALUE',0,'p_action_assign_value','Parser.py',363),
  ('ACTION_ADD_PARAMETERS -> <empty>','ACTION_ADD_PARAMETERS',0,'p_action_add_parameters','Parser.py',374),
  ('ACTION_ADD_NOT_OPERAND -> <empty>','ACTION_ADD_NOT_OPERAND',0,'p_action_add_not_operand','Parser.py',387),
  ('ACTION_ADD_QUADRUPLET -> <empty>','ACTION_ADD_QUADRUPLET',0,'p_action_add_quadruplet','Parser.py',403),
  ('ACTION_ADD_ONE_DIM_OPERAND -> <empty>','ACTION_ADD_ONE_DIM_OPERAND',0,'p_action_add_one_dim_operand','Parser.py',423),
  ('ACTION_ADD_TWO_DIM_OPERAND -> <empty>','ACTION_ADD_TWO_DIM_OPERAND',0,'p_action_add_two_dim_operand','Parser.py',433),
  ('ACTION_ADD_THREE_DIM_OPERAND -> <empty>','ACTION_ADD_THREE_DIM_OPERAND',0,'p_action_add_three_dim_operand','Parser.py',444),
  ('ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> <empty>','ACTION_ADD_QUADRUPLET_EMPTY_JUMP',0,'p_action_add_quadruplet_empty_jump','Parser.py',456),
  ('ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> <empty>','ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP',0,'p_action_add_while_quadruplet_empty_jump','Parser.py',501),
  ('ACTION_NEW_IF -> <empty>','ACTION_NEW_IF',0,'p_action_new_if','Parser.py',522),
  ('ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> <empty>','ACTION_QUADRUPLET_EMPTY_JUMP_END_IF',0,'p_action_quadruplet_empty_jump_end_if','Parser.py',529),
  ('ACTION_FILL_JUMP -> <empty>','ACTION_FILL_JUMP',0,'p_action_fill_jump','Parser.py',539),
  ('ACTION_FILL_JUMP_END_IF -> <empty>','ACTION_FILL_JUMP_END_IF',0,'p_action_fill_jump_end_if','Parser.py',548),
  ('ACTION_FOR_JUMP_BACK -> <empty>','ACTION_FOR_JUMP_BACK',0,'p_action_for_jump_back','Parser.py',559),
  ('ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP -> <empty>','ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP',0,'p_action_add_for_quadruplet_empty_jump','Parser.py',566),
  ('ACTION_FOR_INCREMENT -> <empty>','ACTION_FOR_INCREMENT',0,'p_action_for_increment','Parser.py',587),
  ('ACTION_FOR_GOTO -> <empty>','ACTION_FOR_GOTO',0,'p_action_for_goto','Parser.py',596),
  ('ACTION_WHILE_GOTO -> <empty>','ACTION_WHILE_GOTO',0,'p_action_while_goto','Parser.py',607),
]
