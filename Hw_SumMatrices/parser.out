Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if
Rule 18    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
Rule 19    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
Rule 20    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
Rule 21    else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic
Rule 22    else_ifs -> else_ifs else_ifs
Rule 23    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 24    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 25    loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 26    logic_expression -> arithmetic_expression
Rule 27    logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
Rule 28    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 29    logic_operator -> and ACTION_ADD_OPERATOR
Rule 30    logic_operator -> or ACTION_ADD_OPERATOR
Rule 31    logic_operator -> is_equal ACTION_ADD_OPERATOR
Rule 32    logic_operator -> is_not_equal ACTION_ADD_OPERATOR
Rule 33    logic_operator -> greater_than ACTION_ADD_OPERATOR
Rule 34    logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR
Rule 35    logic_operator -> less_than ACTION_ADD_OPERATOR
Rule 36    logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR
Rule 37    arithmetic_expression -> value
Rule 38    arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
Rule 39    arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis
Rule 40    arithmetic_operator -> sum ACTION_ADD_OPERATOR
Rule 41    arithmetic_operator -> substraction ACTION_ADD_OPERATOR
Rule 42    arithmetic_operator -> multiplication ACTION_ADD_OPERATOR
Rule 43    arithmetic_operator -> division ACTION_ADD_OPERATOR
Rule 44    arithmetic_operator -> exponent ACTION_ADD_OPERATOR
Rule 45    possible_values -> real_value
Rule 46    possible_values -> functions
Rule 47    possible_values -> ids_access
Rule 48    value -> possible_values
Rule 49    value -> not possible_values ACTION_ADD_NOT_OPERAND
Rule 50    value -> open_parenthesis value close_parenthesis
Rule 51    ids_access -> id ACTION_ADD_VAR_VALUE
Rule 52    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
Rule 53    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
Rule 54    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
Rule 55    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 56    real_value -> word_value ACTION_ADD_WORD_VALUE
Rule 57    real_value -> float_value ACTION_ADD_FLOAT_VALUE
Rule 58    real_value -> bool_value ACTION_ADD_BOOL_VALUE
Rule 59    real_value -> id ACTION_ADD_VAR_VALUE
Rule 60    calls -> gosub id
Rule 61    calls -> functions
Rule 62    subroutines -> sub procedure id inside_logic return subroutines
Rule 63    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 64    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 65    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 66    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 67    subroutines -> <empty>
Rule 68    assign -> let ids_access equals logic_expression
Rule 69    assign -> let ids_access equals arithmetic_expression
Rule 70    parameters -> variable
Rule 71    parameters -> parameters comma parameters
Rule 72    functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
Rule 73    functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
Rule 74    arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND
Rule 75    arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND
Rule 76    arguments -> arguments comma arguments
Rule 77    read_or_write -> print
Rule 78    read_or_write -> read
Rule 79    read_or_write -> dunkelCls
Rule 80    print -> dunkelPrint multiple_print
Rule 81    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 82    multiple_print -> string
Rule 83    multiple_print -> arithmetic_expression
Rule 84    multiple_print -> multiple_print comma multiple_print
Rule 85    read -> dunkelRead multiple_read
Rule 86    read -> dunkelRead string comma multiple_read
Rule 87    multiple_read -> ids_access
Rule 88    multiple_read -> multiple_read comma ids_access
Rule 89    ACTION_ADD_FOR_VALUE -> <empty>
Rule 90    ACTION_ADD_VAR_VALUE -> <empty>
Rule 91    ACTION_ADD_WORD_VALUE -> <empty>
Rule 92    ACTION_ADD_FLOAT_VALUE -> <empty>
Rule 93    ACTION_ADD_BOOL_VALUE -> <empty>
Rule 94    ACTION_ADD_OPERATOR -> <empty>
Rule 95    ACTION_ADD_FUNCTION_OPERAND -> <empty>
Rule 96    ACTION_ADD_FUNCTION -> <empty>
Rule 97    ACTION_ADD_PARAMETERS -> <empty>
Rule 98    ACTION_ADD_NOT_OPERAND -> <empty>
Rule 99    ACTION_ADD_QUADRUPLET -> <empty>
Rule 100   ACTION_ADD_ONE_DIM_OPERAND -> <empty>
Rule 101   ACTION_ADD_TWO_DIM_OPERAND -> <empty>
Rule 102   ACTION_ADD_THREE_DIM_OPERAND -> <empty>

Terminals, with rules where they appear

ByRef                : 75
ByVal                : 74
and                  : 29
as                   : 10 11 12 13 65 66
bool                 : 16
bool_value           : 58
close_braces         : 
close_brackets       : 11 12 12 13 13 13 52 53 53 54 54 54
close_parenthesis    : 17 18 19 20 21 23 24 28 39 50 55 63 64 65 66 72 73 81
colon                : 
comma                : 71 76 84 86 88
dim                  : 10 11 12 13
division             : 43
do                   : 24
dunkelCls            : 79
dunkelPrint          : 80 81
dunkelRead           : 85 86
else                 : 18 20
elsif                : 21
end                  : 1 2 17 18 19 20 63 64 65 66
end_if               : 
equals               : 25 68 69
error                : 
exit                 : 
exponent             : 44
false                : 
float                : 15
float_value          : 57
for                  : 25
function             : 63 64 65 66
gosub                : 60
goto                 : 
greater_or_equal_than : 34
greater_than         : 33
id                   : 10 11 12 13 25 25 51 52 53 54 59 60 62 63 64 65 66 72 73 75
if                   : 17 17 18 18 19 19 20 20
is_equal             : 31
is_not_equal         : 32
less_or_equal_than   : 36
less_than            : 35
let                  : 68 69
loop                 : 24
multiplication       : 42
next                 : 25
not                  : 49
open_braces          : 
open_brackets        : 11 12 12 13 13 13 52 53 53 54 54 54
open_parenthesis     : 17 18 19 20 21 23 24 28 39 50 55 63 64 65 66 72 73 81
or                   : 30
procedure            : 62
return               : 62
semicolon            : 
step                 : 25
string               : 82 86
sub                  : 62 63 63 64 64 65 65 66 66
substraction         : 41
sum                  : 40
then                 : 17 18 19 20 21
to                   : 25
true                 : 
until                : 24
wend                 : 23
while                : 23
word                 : 14
word_value           : 11 12 12 13 13 13 56

Nonterminals, with rules where they appear

ACTION_ADD_BOOL_VALUE : 58
ACTION_ADD_FLOAT_VALUE : 57
ACTION_ADD_FOR_VALUE : 25
ACTION_ADD_FUNCTION  : 72 73
ACTION_ADD_FUNCTION_OPERAND : 74 75
ACTION_ADD_NOT_OPERAND : 49
ACTION_ADD_ONE_DIM_OPERAND : 52
ACTION_ADD_OPERATOR  : 29 30 31 32 33 34 35 36 40 41 42 43 44
ACTION_ADD_PARAMETERS : 73
ACTION_ADD_QUADRUPLET : 27 38
ACTION_ADD_THREE_DIM_OPERAND : 54
ACTION_ADD_TWO_DIM_OPERAND : 53
ACTION_ADD_VAR_VALUE : 51 52 53 54 59
ACTION_ADD_WORD_VALUE : 56
arguments            : 73 76 76
arithmetic_expression : 25 25 25 26 38 39 52 53 53 54 54 54 69 83
arithmetic_operator  : 38
assign               : 8
calls                : 6
conditions           : 4
else_ifs             : 19 20 22 22
functions            : 46 61
ids_access           : 47 55 68 69 87 88
inside_logic         : 1 2 3 4 5 6 7 8 17 18 18 19 20 20 21 23 24 25 62 63 64 65 66
logic_expression     : 17 18 19 20 21 23 24 27 27 28 68
logic_operator       : 27
loops                : 5
multiple_print       : 80 81 84 84
multiple_read        : 85 86 88
parameters           : 64 66 71 71
possible_values      : 48 49
print                : 77
program              : 0
read                 : 78
read_or_write        : 7
real_value           : 45
subroutines          : 2 62 63 64 65 66
value                : 37 38 50 74
variable             : 3 70
variable_type        : 10 11 12 13 65 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 23


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 24
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 25
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 29
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 30


state 10

    (72) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (96) ACTION_ADD_FUNCTION -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_FUNCTION            shift and go to state 31

state 11

    (17) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if

    open_parenthesis shift and go to state 32


state 12

    (23) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 33


state 13

    (24) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 34
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 14

    (25) loops -> for . id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 35


state 15

    (60) calls -> gosub . id

    id              shift and go to state 36


state 16

    (61) calls -> functions .

    dim             reduce using rule 61 (calls -> functions .)
    if              reduce using rule 61 (calls -> functions .)
    while           reduce using rule 61 (calls -> functions .)
    do              reduce using rule 61 (calls -> functions .)
    for             reduce using rule 61 (calls -> functions .)
    gosub           reduce using rule 61 (calls -> functions .)
    dunkelCls       reduce using rule 61 (calls -> functions .)
    let             reduce using rule 61 (calls -> functions .)
    id              reduce using rule 61 (calls -> functions .)
    dunkelPrint     reduce using rule 61 (calls -> functions .)
    dunkelRead      reduce using rule 61 (calls -> functions .)
    end             reduce using rule 61 (calls -> functions .)
    loop            reduce using rule 61 (calls -> functions .)
    wend            reduce using rule 61 (calls -> functions .)
    return          reduce using rule 61 (calls -> functions .)
    else            reduce using rule 61 (calls -> functions .)
    elsif           reduce using rule 61 (calls -> functions .)
    next            reduce using rule 61 (calls -> functions .)


state 17

    (77) read_or_write -> print .

    dim             reduce using rule 77 (read_or_write -> print .)
    if              reduce using rule 77 (read_or_write -> print .)
    while           reduce using rule 77 (read_or_write -> print .)
    do              reduce using rule 77 (read_or_write -> print .)
    for             reduce using rule 77 (read_or_write -> print .)
    gosub           reduce using rule 77 (read_or_write -> print .)
    dunkelCls       reduce using rule 77 (read_or_write -> print .)
    let             reduce using rule 77 (read_or_write -> print .)
    id              reduce using rule 77 (read_or_write -> print .)
    dunkelPrint     reduce using rule 77 (read_or_write -> print .)
    dunkelRead      reduce using rule 77 (read_or_write -> print .)
    end             reduce using rule 77 (read_or_write -> print .)
    loop            reduce using rule 77 (read_or_write -> print .)
    wend            reduce using rule 77 (read_or_write -> print .)
    return          reduce using rule 77 (read_or_write -> print .)
    else            reduce using rule 77 (read_or_write -> print .)
    elsif           reduce using rule 77 (read_or_write -> print .)
    next            reduce using rule 77 (read_or_write -> print .)


state 18

    (78) read_or_write -> read .

    dim             reduce using rule 78 (read_or_write -> read .)
    if              reduce using rule 78 (read_or_write -> read .)
    while           reduce using rule 78 (read_or_write -> read .)
    do              reduce using rule 78 (read_or_write -> read .)
    for             reduce using rule 78 (read_or_write -> read .)
    gosub           reduce using rule 78 (read_or_write -> read .)
    dunkelCls       reduce using rule 78 (read_or_write -> read .)
    let             reduce using rule 78 (read_or_write -> read .)
    id              reduce using rule 78 (read_or_write -> read .)
    dunkelPrint     reduce using rule 78 (read_or_write -> read .)
    dunkelRead      reduce using rule 78 (read_or_write -> read .)
    end             reduce using rule 78 (read_or_write -> read .)
    loop            reduce using rule 78 (read_or_write -> read .)
    wend            reduce using rule 78 (read_or_write -> read .)
    return          reduce using rule 78 (read_or_write -> read .)
    else            reduce using rule 78 (read_or_write -> read .)
    elsif           reduce using rule 78 (read_or_write -> read .)
    next            reduce using rule 78 (read_or_write -> read .)


state 19

    (79) read_or_write -> dunkelCls .

    dim             reduce using rule 79 (read_or_write -> dunkelCls .)
    if              reduce using rule 79 (read_or_write -> dunkelCls .)
    while           reduce using rule 79 (read_or_write -> dunkelCls .)
    do              reduce using rule 79 (read_or_write -> dunkelCls .)
    for             reduce using rule 79 (read_or_write -> dunkelCls .)
    gosub           reduce using rule 79 (read_or_write -> dunkelCls .)
    dunkelCls       reduce using rule 79 (read_or_write -> dunkelCls .)
    let             reduce using rule 79 (read_or_write -> dunkelCls .)
    id              reduce using rule 79 (read_or_write -> dunkelCls .)
    dunkelPrint     reduce using rule 79 (read_or_write -> dunkelCls .)
    dunkelRead      reduce using rule 79 (read_or_write -> dunkelCls .)
    end             reduce using rule 79 (read_or_write -> dunkelCls .)
    loop            reduce using rule 79 (read_or_write -> dunkelCls .)
    wend            reduce using rule 79 (read_or_write -> dunkelCls .)
    return          reduce using rule 79 (read_or_write -> dunkelCls .)
    else            reduce using rule 79 (read_or_write -> dunkelCls .)
    elsif           reduce using rule 79 (read_or_write -> dunkelCls .)
    next            reduce using rule 79 (read_or_write -> dunkelCls .)


state 20

    (68) assign -> let . ids_access equals logic_expression
    (69) assign -> let . ids_access equals arithmetic_expression
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 37

state 21

    (80) print -> dunkelPrint . multiple_print
    (81) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (82) multiple_print -> . string
    (83) multiple_print -> . arithmetic_expression
    (84) multiple_print -> . multiple_print comma multiple_print
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 41
    string          shift and go to state 42
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    multiple_print                 shift and go to state 40
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 22

    (85) read -> dunkelRead . multiple_read
    (86) read -> dunkelRead . string comma multiple_read
    (87) multiple_read -> . ids_access
    (88) multiple_read -> . multiple_read comma ids_access
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 55
    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 54
    ids_access                     shift and go to state 56

state 23

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 58

  ! $end            [ reduce using rule 67 (subroutines -> .) ]

    subroutines                    shift and go to state 57

state 24

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    else            reduce using rule 3 (inside_logic -> variable inside_logic .)
    elsif           reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 25

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    else            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    elsif           reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 26

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    else            reduce using rule 5 (inside_logic -> loops inside_logic .)
    elsif           reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 27

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    else            reduce using rule 6 (inside_logic -> calls inside_logic .)
    elsif           reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 28

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    else            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    elsif           reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 29

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    else            reduce using rule 8 (inside_logic -> assign inside_logic .)
    elsif           reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 30

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 59


state 31

    (72) functions -> id ACTION_ADD_FUNCTION . open_parenthesis close_parenthesis
    (73) functions -> id ACTION_ADD_FUNCTION . open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 60


state 32

    (17) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    logic_expression               shift and go to state 62
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 33

    (23) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    logic_expression               shift and go to state 64
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 34

    (24) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 65


state 35

    (25) loops -> for id . ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (89) ACTION_ADD_FOR_VALUE -> .

    equals          reduce using rule 89 (ACTION_ADD_FOR_VALUE -> .)

    ACTION_ADD_FOR_VALUE           shift and go to state 66

state 36

    (60) calls -> gosub id .

    dim             reduce using rule 60 (calls -> gosub id .)
    if              reduce using rule 60 (calls -> gosub id .)
    while           reduce using rule 60 (calls -> gosub id .)
    do              reduce using rule 60 (calls -> gosub id .)
    for             reduce using rule 60 (calls -> gosub id .)
    gosub           reduce using rule 60 (calls -> gosub id .)
    dunkelCls       reduce using rule 60 (calls -> gosub id .)
    let             reduce using rule 60 (calls -> gosub id .)
    id              reduce using rule 60 (calls -> gosub id .)
    dunkelPrint     reduce using rule 60 (calls -> gosub id .)
    dunkelRead      reduce using rule 60 (calls -> gosub id .)
    end             reduce using rule 60 (calls -> gosub id .)
    loop            reduce using rule 60 (calls -> gosub id .)
    wend            reduce using rule 60 (calls -> gosub id .)
    return          reduce using rule 60 (calls -> gosub id .)
    else            reduce using rule 60 (calls -> gosub id .)
    elsif           reduce using rule 60 (calls -> gosub id .)
    next            reduce using rule 60 (calls -> gosub id .)


state 37

    (68) assign -> let ids_access . equals logic_expression
    (69) assign -> let ids_access . equals arithmetic_expression

    equals          shift and go to state 67


state 38

    (51) ids_access -> id . ACTION_ADD_VAR_VALUE
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (90) ACTION_ADD_VAR_VALUE -> .

    open_brackets   reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    equals          reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 68

state 39

    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 69

state 40

    (80) print -> dunkelPrint multiple_print .
    (84) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 80 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 80 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 80 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 80 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 80 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 80 (print -> dunkelPrint multiple_print .)
    dunkelCls       reduce using rule 80 (print -> dunkelPrint multiple_print .)
    let             reduce using rule 80 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 80 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 80 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 80 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 80 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 80 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 80 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 80 (print -> dunkelPrint multiple_print .)
    else            reduce using rule 80 (print -> dunkelPrint multiple_print .)
    elsif           reduce using rule 80 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 80 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 70


state 41

    (81) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (39) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (50) value -> open_parenthesis . value close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (82) multiple_print -> . string
    (83) multiple_print -> . arithmetic_expression
    (84) multiple_print -> . multiple_print comma multiple_print
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    string          shift and go to state 42
    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    id              shift and go to state 76
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52

    multiple_print                 shift and go to state 72
    arithmetic_expression          shift and go to state 73
    value                          shift and go to state 74
    ids_access                     shift and go to state 75
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48

state 42

    (82) multiple_print -> string .

    comma           reduce using rule 82 (multiple_print -> string .)
    dim             reduce using rule 82 (multiple_print -> string .)
    if              reduce using rule 82 (multiple_print -> string .)
    while           reduce using rule 82 (multiple_print -> string .)
    do              reduce using rule 82 (multiple_print -> string .)
    for             reduce using rule 82 (multiple_print -> string .)
    gosub           reduce using rule 82 (multiple_print -> string .)
    dunkelCls       reduce using rule 82 (multiple_print -> string .)
    let             reduce using rule 82 (multiple_print -> string .)
    id              reduce using rule 82 (multiple_print -> string .)
    dunkelPrint     reduce using rule 82 (multiple_print -> string .)
    dunkelRead      reduce using rule 82 (multiple_print -> string .)
    end             reduce using rule 82 (multiple_print -> string .)
    loop            reduce using rule 82 (multiple_print -> string .)
    wend            reduce using rule 82 (multiple_print -> string .)
    return          reduce using rule 82 (multiple_print -> string .)
    else            reduce using rule 82 (multiple_print -> string .)
    elsif           reduce using rule 82 (multiple_print -> string .)
    next            reduce using rule 82 (multiple_print -> string .)
    close_parenthesis reduce using rule 82 (multiple_print -> string .)


state 43

    (83) multiple_print -> arithmetic_expression .
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    comma           reduce using rule 83 (multiple_print -> arithmetic_expression .)
    dim             reduce using rule 83 (multiple_print -> arithmetic_expression .)
    if              reduce using rule 83 (multiple_print -> arithmetic_expression .)
    while           reduce using rule 83 (multiple_print -> arithmetic_expression .)
    do              reduce using rule 83 (multiple_print -> arithmetic_expression .)
    for             reduce using rule 83 (multiple_print -> arithmetic_expression .)
    gosub           reduce using rule 83 (multiple_print -> arithmetic_expression .)
    dunkelCls       reduce using rule 83 (multiple_print -> arithmetic_expression .)
    let             reduce using rule 83 (multiple_print -> arithmetic_expression .)
    id              reduce using rule 83 (multiple_print -> arithmetic_expression .)
    dunkelPrint     reduce using rule 83 (multiple_print -> arithmetic_expression .)
    dunkelRead      reduce using rule 83 (multiple_print -> arithmetic_expression .)
    end             reduce using rule 83 (multiple_print -> arithmetic_expression .)
    loop            reduce using rule 83 (multiple_print -> arithmetic_expression .)
    wend            reduce using rule 83 (multiple_print -> arithmetic_expression .)
    return          reduce using rule 83 (multiple_print -> arithmetic_expression .)
    else            reduce using rule 83 (multiple_print -> arithmetic_expression .)
    elsif           reduce using rule 83 (multiple_print -> arithmetic_expression .)
    next            reduce using rule 83 (multiple_print -> arithmetic_expression .)
    close_parenthesis reduce using rule 83 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 44

    (37) arithmetic_expression -> value .

    sum             reduce using rule 37 (arithmetic_expression -> value .)
    substraction    reduce using rule 37 (arithmetic_expression -> value .)
    multiplication  reduce using rule 37 (arithmetic_expression -> value .)
    division        reduce using rule 37 (arithmetic_expression -> value .)
    exponent        reduce using rule 37 (arithmetic_expression -> value .)
    comma           reduce using rule 37 (arithmetic_expression -> value .)
    dim             reduce using rule 37 (arithmetic_expression -> value .)
    if              reduce using rule 37 (arithmetic_expression -> value .)
    while           reduce using rule 37 (arithmetic_expression -> value .)
    do              reduce using rule 37 (arithmetic_expression -> value .)
    for             reduce using rule 37 (arithmetic_expression -> value .)
    gosub           reduce using rule 37 (arithmetic_expression -> value .)
    dunkelCls       reduce using rule 37 (arithmetic_expression -> value .)
    let             reduce using rule 37 (arithmetic_expression -> value .)
    id              reduce using rule 37 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 37 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 37 (arithmetic_expression -> value .)
    end             reduce using rule 37 (arithmetic_expression -> value .)
    loop            reduce using rule 37 (arithmetic_expression -> value .)
    wend            reduce using rule 37 (arithmetic_expression -> value .)
    return          reduce using rule 37 (arithmetic_expression -> value .)
    else            reduce using rule 37 (arithmetic_expression -> value .)
    elsif           reduce using rule 37 (arithmetic_expression -> value .)
    next            reduce using rule 37 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 37 (arithmetic_expression -> value .)
    and             reduce using rule 37 (arithmetic_expression -> value .)
    or              reduce using rule 37 (arithmetic_expression -> value .)
    is_equal        reduce using rule 37 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 37 (arithmetic_expression -> value .)
    greater_than    reduce using rule 37 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)
    less_than       reduce using rule 37 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)
    to              reduce using rule 37 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 37 (arithmetic_expression -> value .)
    step            reduce using rule 37 (arithmetic_expression -> value .)


state 45

    (48) value -> possible_values .

    sum             reduce using rule 48 (value -> possible_values .)
    substraction    reduce using rule 48 (value -> possible_values .)
    multiplication  reduce using rule 48 (value -> possible_values .)
    division        reduce using rule 48 (value -> possible_values .)
    exponent        reduce using rule 48 (value -> possible_values .)
    comma           reduce using rule 48 (value -> possible_values .)
    dim             reduce using rule 48 (value -> possible_values .)
    if              reduce using rule 48 (value -> possible_values .)
    while           reduce using rule 48 (value -> possible_values .)
    do              reduce using rule 48 (value -> possible_values .)
    for             reduce using rule 48 (value -> possible_values .)
    gosub           reduce using rule 48 (value -> possible_values .)
    dunkelCls       reduce using rule 48 (value -> possible_values .)
    let             reduce using rule 48 (value -> possible_values .)
    id              reduce using rule 48 (value -> possible_values .)
    dunkelPrint     reduce using rule 48 (value -> possible_values .)
    dunkelRead      reduce using rule 48 (value -> possible_values .)
    end             reduce using rule 48 (value -> possible_values .)
    loop            reduce using rule 48 (value -> possible_values .)
    wend            reduce using rule 48 (value -> possible_values .)
    return          reduce using rule 48 (value -> possible_values .)
    else            reduce using rule 48 (value -> possible_values .)
    elsif           reduce using rule 48 (value -> possible_values .)
    next            reduce using rule 48 (value -> possible_values .)
    close_parenthesis reduce using rule 48 (value -> possible_values .)
    and             reduce using rule 48 (value -> possible_values .)
    or              reduce using rule 48 (value -> possible_values .)
    is_equal        reduce using rule 48 (value -> possible_values .)
    is_not_equal    reduce using rule 48 (value -> possible_values .)
    greater_than    reduce using rule 48 (value -> possible_values .)
    greater_or_equal_than reduce using rule 48 (value -> possible_values .)
    less_than       reduce using rule 48 (value -> possible_values .)
    less_or_equal_than reduce using rule 48 (value -> possible_values .)
    to              reduce using rule 48 (value -> possible_values .)
    close_brackets  reduce using rule 48 (value -> possible_values .)
    step            reduce using rule 48 (value -> possible_values .)


state 46

    (49) value -> not . possible_values ACTION_ADD_NOT_OPERAND
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53
    open_parenthesis shift and go to state 39

    possible_values                shift and go to state 83
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 47

    (45) possible_values -> real_value .

    sum             reduce using rule 45 (possible_values -> real_value .)
    substraction    reduce using rule 45 (possible_values -> real_value .)
    multiplication  reduce using rule 45 (possible_values -> real_value .)
    division        reduce using rule 45 (possible_values -> real_value .)
    exponent        reduce using rule 45 (possible_values -> real_value .)
    comma           reduce using rule 45 (possible_values -> real_value .)
    dim             reduce using rule 45 (possible_values -> real_value .)
    if              reduce using rule 45 (possible_values -> real_value .)
    while           reduce using rule 45 (possible_values -> real_value .)
    do              reduce using rule 45 (possible_values -> real_value .)
    for             reduce using rule 45 (possible_values -> real_value .)
    gosub           reduce using rule 45 (possible_values -> real_value .)
    dunkelCls       reduce using rule 45 (possible_values -> real_value .)
    let             reduce using rule 45 (possible_values -> real_value .)
    id              reduce using rule 45 (possible_values -> real_value .)
    dunkelPrint     reduce using rule 45 (possible_values -> real_value .)
    dunkelRead      reduce using rule 45 (possible_values -> real_value .)
    end             reduce using rule 45 (possible_values -> real_value .)
    loop            reduce using rule 45 (possible_values -> real_value .)
    wend            reduce using rule 45 (possible_values -> real_value .)
    return          reduce using rule 45 (possible_values -> real_value .)
    else            reduce using rule 45 (possible_values -> real_value .)
    elsif           reduce using rule 45 (possible_values -> real_value .)
    next            reduce using rule 45 (possible_values -> real_value .)
    close_parenthesis reduce using rule 45 (possible_values -> real_value .)
    and             reduce using rule 45 (possible_values -> real_value .)
    or              reduce using rule 45 (possible_values -> real_value .)
    is_equal        reduce using rule 45 (possible_values -> real_value .)
    is_not_equal    reduce using rule 45 (possible_values -> real_value .)
    greater_than    reduce using rule 45 (possible_values -> real_value .)
    greater_or_equal_than reduce using rule 45 (possible_values -> real_value .)
    less_than       reduce using rule 45 (possible_values -> real_value .)
    less_or_equal_than reduce using rule 45 (possible_values -> real_value .)
    to              reduce using rule 45 (possible_values -> real_value .)
    close_brackets  reduce using rule 45 (possible_values -> real_value .)
    step            reduce using rule 45 (possible_values -> real_value .)


state 48

    (46) possible_values -> functions .

    sum             reduce using rule 46 (possible_values -> functions .)
    substraction    reduce using rule 46 (possible_values -> functions .)
    multiplication  reduce using rule 46 (possible_values -> functions .)
    division        reduce using rule 46 (possible_values -> functions .)
    exponent        reduce using rule 46 (possible_values -> functions .)
    comma           reduce using rule 46 (possible_values -> functions .)
    dim             reduce using rule 46 (possible_values -> functions .)
    if              reduce using rule 46 (possible_values -> functions .)
    while           reduce using rule 46 (possible_values -> functions .)
    do              reduce using rule 46 (possible_values -> functions .)
    for             reduce using rule 46 (possible_values -> functions .)
    gosub           reduce using rule 46 (possible_values -> functions .)
    dunkelCls       reduce using rule 46 (possible_values -> functions .)
    let             reduce using rule 46 (possible_values -> functions .)
    id              reduce using rule 46 (possible_values -> functions .)
    dunkelPrint     reduce using rule 46 (possible_values -> functions .)
    dunkelRead      reduce using rule 46 (possible_values -> functions .)
    end             reduce using rule 46 (possible_values -> functions .)
    loop            reduce using rule 46 (possible_values -> functions .)
    wend            reduce using rule 46 (possible_values -> functions .)
    return          reduce using rule 46 (possible_values -> functions .)
    else            reduce using rule 46 (possible_values -> functions .)
    elsif           reduce using rule 46 (possible_values -> functions .)
    next            reduce using rule 46 (possible_values -> functions .)
    close_parenthesis reduce using rule 46 (possible_values -> functions .)
    and             reduce using rule 46 (possible_values -> functions .)
    or              reduce using rule 46 (possible_values -> functions .)
    is_equal        reduce using rule 46 (possible_values -> functions .)
    is_not_equal    reduce using rule 46 (possible_values -> functions .)
    greater_than    reduce using rule 46 (possible_values -> functions .)
    greater_or_equal_than reduce using rule 46 (possible_values -> functions .)
    less_than       reduce using rule 46 (possible_values -> functions .)
    less_or_equal_than reduce using rule 46 (possible_values -> functions .)
    to              reduce using rule 46 (possible_values -> functions .)
    close_brackets  reduce using rule 46 (possible_values -> functions .)
    step            reduce using rule 46 (possible_values -> functions .)


state 49

    (47) possible_values -> ids_access .

    sum             reduce using rule 47 (possible_values -> ids_access .)
    substraction    reduce using rule 47 (possible_values -> ids_access .)
    multiplication  reduce using rule 47 (possible_values -> ids_access .)
    division        reduce using rule 47 (possible_values -> ids_access .)
    exponent        reduce using rule 47 (possible_values -> ids_access .)
    comma           reduce using rule 47 (possible_values -> ids_access .)
    dim             reduce using rule 47 (possible_values -> ids_access .)
    if              reduce using rule 47 (possible_values -> ids_access .)
    while           reduce using rule 47 (possible_values -> ids_access .)
    do              reduce using rule 47 (possible_values -> ids_access .)
    for             reduce using rule 47 (possible_values -> ids_access .)
    gosub           reduce using rule 47 (possible_values -> ids_access .)
    dunkelCls       reduce using rule 47 (possible_values -> ids_access .)
    let             reduce using rule 47 (possible_values -> ids_access .)
    id              reduce using rule 47 (possible_values -> ids_access .)
    dunkelPrint     reduce using rule 47 (possible_values -> ids_access .)
    dunkelRead      reduce using rule 47 (possible_values -> ids_access .)
    end             reduce using rule 47 (possible_values -> ids_access .)
    loop            reduce using rule 47 (possible_values -> ids_access .)
    wend            reduce using rule 47 (possible_values -> ids_access .)
    return          reduce using rule 47 (possible_values -> ids_access .)
    else            reduce using rule 47 (possible_values -> ids_access .)
    elsif           reduce using rule 47 (possible_values -> ids_access .)
    next            reduce using rule 47 (possible_values -> ids_access .)
    close_parenthesis reduce using rule 47 (possible_values -> ids_access .)
    and             reduce using rule 47 (possible_values -> ids_access .)
    or              reduce using rule 47 (possible_values -> ids_access .)
    is_equal        reduce using rule 47 (possible_values -> ids_access .)
    is_not_equal    reduce using rule 47 (possible_values -> ids_access .)
    greater_than    reduce using rule 47 (possible_values -> ids_access .)
    greater_or_equal_than reduce using rule 47 (possible_values -> ids_access .)
    less_than       reduce using rule 47 (possible_values -> ids_access .)
    less_or_equal_than reduce using rule 47 (possible_values -> ids_access .)
    to              reduce using rule 47 (possible_values -> ids_access .)
    close_brackets  reduce using rule 47 (possible_values -> ids_access .)
    step            reduce using rule 47 (possible_values -> ids_access .)


state 50

    (56) real_value -> word_value . ACTION_ADD_WORD_VALUE
    (91) ACTION_ADD_WORD_VALUE -> .

    sum             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    substraction    reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    multiplication  reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    division        reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    exponent        reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    comma           reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    dim             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    if              reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    while           reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    do              reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    for             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    gosub           reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    dunkelCls       reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    let             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    id              reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    dunkelPrint     reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    dunkelRead      reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    end             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    loop            reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    wend            reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    return          reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    else            reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    elsif           reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    next            reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    close_parenthesis reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    and             reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    or              reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    is_equal        reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    is_not_equal    reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    greater_than    reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    greater_or_equal_than reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    less_than       reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    less_or_equal_than reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    to              reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    close_brackets  reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)
    step            reduce using rule 91 (ACTION_ADD_WORD_VALUE -> .)

    ACTION_ADD_WORD_VALUE          shift and go to state 84

state 51

    (57) real_value -> float_value . ACTION_ADD_FLOAT_VALUE
    (92) ACTION_ADD_FLOAT_VALUE -> .

    sum             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    substraction    reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    multiplication  reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    division        reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    exponent        reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    comma           reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    dim             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    if              reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    while           reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    do              reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    for             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    gosub           reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelCls       reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    let             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    id              reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelPrint     reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelRead      reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    end             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    loop            reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    wend            reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    return          reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    else            reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    elsif           reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    next            reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    close_parenthesis reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    and             reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    or              reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    is_equal        reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    is_not_equal    reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_than    reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_or_equal_than reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    less_than       reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    less_or_equal_than reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    to              reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    close_brackets  reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)
    step            reduce using rule 92 (ACTION_ADD_FLOAT_VALUE -> .)

    ACTION_ADD_FLOAT_VALUE         shift and go to state 85

state 52

    (58) real_value -> bool_value . ACTION_ADD_BOOL_VALUE
    (93) ACTION_ADD_BOOL_VALUE -> .

    sum             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    substraction    reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    multiplication  reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    division        reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    exponent        reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    comma           reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    dim             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    if              reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    while           reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    do              reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    for             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    gosub           reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    let             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    id              reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    end             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    loop            reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    wend            reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    return          reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    else            reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    elsif           reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    next            reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    close_parenthesis reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    and             reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    or              reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    is_equal        reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    is_not_equal    reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    greater_than    reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    greater_or_equal_than reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    less_than       reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    less_or_equal_than reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    to              reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    close_brackets  reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)
    step            reduce using rule 93 (ACTION_ADD_BOOL_VALUE -> .)

    ACTION_ADD_BOOL_VALUE          shift and go to state 86

state 53

    (59) real_value -> id . ACTION_ADD_VAR_VALUE
    (72) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> id . ACTION_ADD_VAR_VALUE
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (90) ACTION_ADD_VAR_VALUE -> .
    (96) ACTION_ADD_FUNCTION -> .

    open_brackets   reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    to              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    close_brackets  reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    step            reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 87
    ACTION_ADD_FUNCTION            shift and go to state 31

state 54

    (85) read -> dunkelRead multiple_read .
    (88) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 85 (read -> dunkelRead multiple_read .)
    if              reduce using rule 85 (read -> dunkelRead multiple_read .)
    while           reduce using rule 85 (read -> dunkelRead multiple_read .)
    do              reduce using rule 85 (read -> dunkelRead multiple_read .)
    for             reduce using rule 85 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 85 (read -> dunkelRead multiple_read .)
    dunkelCls       reduce using rule 85 (read -> dunkelRead multiple_read .)
    let             reduce using rule 85 (read -> dunkelRead multiple_read .)
    id              reduce using rule 85 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 85 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 85 (read -> dunkelRead multiple_read .)
    end             reduce using rule 85 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 85 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 85 (read -> dunkelRead multiple_read .)
    return          reduce using rule 85 (read -> dunkelRead multiple_read .)
    else            reduce using rule 85 (read -> dunkelRead multiple_read .)
    elsif           reduce using rule 85 (read -> dunkelRead multiple_read .)
    next            reduce using rule 85 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 88


state 55

    (86) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 89


state 56

    (87) multiple_read -> ids_access .

    comma           reduce using rule 87 (multiple_read -> ids_access .)
    dim             reduce using rule 87 (multiple_read -> ids_access .)
    if              reduce using rule 87 (multiple_read -> ids_access .)
    while           reduce using rule 87 (multiple_read -> ids_access .)
    do              reduce using rule 87 (multiple_read -> ids_access .)
    for             reduce using rule 87 (multiple_read -> ids_access .)
    gosub           reduce using rule 87 (multiple_read -> ids_access .)
    dunkelCls       reduce using rule 87 (multiple_read -> ids_access .)
    let             reduce using rule 87 (multiple_read -> ids_access .)
    id              reduce using rule 87 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 87 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 87 (multiple_read -> ids_access .)
    end             reduce using rule 87 (multiple_read -> ids_access .)
    loop            reduce using rule 87 (multiple_read -> ids_access .)
    wend            reduce using rule 87 (multiple_read -> ids_access .)
    return          reduce using rule 87 (multiple_read -> ids_access .)
    else            reduce using rule 87 (multiple_read -> ids_access .)
    elsif           reduce using rule 87 (multiple_read -> ids_access .)
    next            reduce using rule 87 (multiple_read -> ids_access .)


state 57

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 58

    (62) subroutines -> sub . procedure id inside_logic return subroutines
    (63) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 90
    function        shift and go to state 91


state 59

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 93
    float           shift and go to state 94
    bool            shift and go to state 95

    variable_type                  shift and go to state 92

state 60

    (72) functions -> id ACTION_ADD_FUNCTION open_parenthesis . close_parenthesis
    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis . arguments ACTION_ADD_PARAMETERS close_parenthesis
    (74) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (75) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 96
    ByVal           shift and go to state 98
    ByRef           shift and go to state 99

    arguments                      shift and go to state 97

state 61

    (28) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (39) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (50) value -> open_parenthesis . value close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    id              shift and go to state 76
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52

    logic_expression               shift and go to state 100
    arithmetic_expression          shift and go to state 101
    value                          shift and go to state 74
    ids_access                     shift and go to state 75
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48

state 62

    (17) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs else inside_logic end if
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 102
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 63

    (26) logic_expression -> arithmetic_expression .
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_parenthesis reduce using rule 26 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 64

    (23) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 112
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 65

    (24) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 113


state 66

    (25) loops -> for id ACTION_ADD_FOR_VALUE . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 114


state 67

    (68) assign -> let ids_access equals . logic_expression
    (69) assign -> let ids_access equals . arithmetic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    ids_access                     shift and go to state 49
    logic_expression               shift and go to state 115
    arithmetic_expression          shift and go to state 116
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48

state 68

    (51) ids_access -> id ACTION_ADD_VAR_VALUE .
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

    equals          reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 117


state 69

    (55) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 118


state 70

    (84) multiple_print -> multiple_print comma . multiple_print
    (82) multiple_print -> . string
    (83) multiple_print -> . arithmetic_expression
    (84) multiple_print -> . multiple_print comma multiple_print
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 42
    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    multiple_print                 shift and go to state 119
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 71

    (39) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (50) value -> open_parenthesis . value close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    id              shift and go to state 76
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52

    arithmetic_expression          shift and go to state 120
    value                          shift and go to state 74
    ids_access                     shift and go to state 75
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48

state 72

    (81) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (84) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 121
    comma           shift and go to state 70


state 73

    (39) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (83) multiple_print -> arithmetic_expression .
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 122
    comma           reduce using rule 83 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

  ! close_parenthesis [ reduce using rule 83 (multiple_print -> arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 77

state 74

    (50) value -> open_parenthesis value . close_parenthesis
    (37) arithmetic_expression -> value .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 123
    sum             reduce using rule 37 (arithmetic_expression -> value .)
    substraction    reduce using rule 37 (arithmetic_expression -> value .)
    multiplication  reduce using rule 37 (arithmetic_expression -> value .)
    division        reduce using rule 37 (arithmetic_expression -> value .)
    exponent        reduce using rule 37 (arithmetic_expression -> value .)
    comma           reduce using rule 37 (arithmetic_expression -> value .)
    and             reduce using rule 37 (arithmetic_expression -> value .)
    or              reduce using rule 37 (arithmetic_expression -> value .)
    is_equal        reduce using rule 37 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 37 (arithmetic_expression -> value .)
    greater_than    reduce using rule 37 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)
    less_than       reduce using rule 37 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)

  ! close_parenthesis [ reduce using rule 37 (arithmetic_expression -> value .) ]


state 75

    (55) ids_access -> open_parenthesis ids_access . close_parenthesis
    (47) possible_values -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 118
    sum             reduce using rule 47 (possible_values -> ids_access .)
    substraction    reduce using rule 47 (possible_values -> ids_access .)
    multiplication  reduce using rule 47 (possible_values -> ids_access .)
    division        reduce using rule 47 (possible_values -> ids_access .)
    exponent        reduce using rule 47 (possible_values -> ids_access .)
    comma           reduce using rule 47 (possible_values -> ids_access .)
    and             reduce using rule 47 (possible_values -> ids_access .)
    or              reduce using rule 47 (possible_values -> ids_access .)
    is_equal        reduce using rule 47 (possible_values -> ids_access .)
    is_not_equal    reduce using rule 47 (possible_values -> ids_access .)
    greater_than    reduce using rule 47 (possible_values -> ids_access .)
    greater_or_equal_than reduce using rule 47 (possible_values -> ids_access .)
    less_than       reduce using rule 47 (possible_values -> ids_access .)
    less_or_equal_than reduce using rule 47 (possible_values -> ids_access .)

  ! close_parenthesis [ reduce using rule 47 (possible_values -> ids_access .) ]


state 76

    (51) ids_access -> id . ACTION_ADD_VAR_VALUE
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (59) real_value -> id . ACTION_ADD_VAR_VALUE
    (72) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (90) ACTION_ADD_VAR_VALUE -> .
    (96) ACTION_ADD_FUNCTION -> .

    open_brackets   reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 90 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 124
    ACTION_ADD_FUNCTION            shift and go to state 31

state 77

    (38) arithmetic_expression -> arithmetic_expression arithmetic_operator . value ACTION_ADD_QUADRUPLET
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 46
    open_parenthesis shift and go to state 126
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    value                          shift and go to state 125
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 78

    (40) arithmetic_operator -> sum . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 127

state 79

    (41) arithmetic_operator -> substraction . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 128

state 80

    (42) arithmetic_operator -> multiplication . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 129

state 81

    (43) arithmetic_operator -> division . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 130

state 82

    (44) arithmetic_operator -> exponent . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 131

state 83

    (49) value -> not possible_values . ACTION_ADD_NOT_OPERAND
    (98) ACTION_ADD_NOT_OPERAND -> .

    sum             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    substraction    reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    multiplication  reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    division        reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    exponent        reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    comma           reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    dim             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    if              reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    while           reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    do              reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    for             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    gosub           reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelCls       reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    let             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    id              reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelPrint     reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelRead      reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    end             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    loop            reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    wend            reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    return          reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    else            reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    elsif           reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    next            reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    close_parenthesis reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    and             reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    or              reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    is_equal        reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    is_not_equal    reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    greater_than    reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    greater_or_equal_than reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    less_than       reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    less_or_equal_than reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    to              reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    close_brackets  reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)
    step            reduce using rule 98 (ACTION_ADD_NOT_OPERAND -> .)

    ACTION_ADD_NOT_OPERAND         shift and go to state 132

state 84

    (56) real_value -> word_value ACTION_ADD_WORD_VALUE .

    sum             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    substraction    reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    multiplication  reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    division        reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    exponent        reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    comma           reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dim             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    if              reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    while           reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    do              reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    for             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    gosub           reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelCls       reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    let             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    id              reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelPrint     reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelRead      reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    end             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    loop            reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    wend            reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    return          reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    else            reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    elsif           reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    next            reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_parenthesis reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    and             reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    or              reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_equal        reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_not_equal    reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_than    reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_or_equal_than reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_than       reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_or_equal_than reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    to              reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_brackets  reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    step            reduce using rule 56 (real_value -> word_value ACTION_ADD_WORD_VALUE .)


state 85

    (57) real_value -> float_value ACTION_ADD_FLOAT_VALUE .

    sum             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    substraction    reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    multiplication  reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    division        reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    exponent        reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    comma           reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dim             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    if              reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    while           reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    do              reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    for             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    gosub           reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelCls       reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    let             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    id              reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelPrint     reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelRead      reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    end             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    loop            reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    wend            reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    return          reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    else            reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    elsif           reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    next            reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_parenthesis reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    and             reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    or              reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_equal        reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_not_equal    reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_than    reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_or_equal_than reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_than       reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_or_equal_than reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    to              reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_brackets  reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    step            reduce using rule 57 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)


state 86

    (58) real_value -> bool_value ACTION_ADD_BOOL_VALUE .

    sum             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    substraction    reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    multiplication  reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    division        reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    exponent        reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    comma           reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dim             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    if              reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    while           reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    do              reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    for             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    gosub           reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelCls       reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    let             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    id              reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelPrint     reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelRead      reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    end             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    loop            reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    wend            reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    return          reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    else            reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    elsif           reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    next            reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    close_parenthesis reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    and             reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    or              reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_equal        reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_not_equal    reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_than    reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_or_equal_than reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_than       reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_or_equal_than reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    to              reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    close_brackets  reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    step            reduce using rule 58 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)


state 87

    (59) real_value -> id ACTION_ADD_VAR_VALUE .
    (51) ids_access -> id ACTION_ADD_VAR_VALUE .
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

  ! reduce/reduce conflict for sum resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dim resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for if resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for while resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for do resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for for resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for gosub resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for let resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for id resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for end resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for loop resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for wend resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for return resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for else resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for elsif resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for next resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for to resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_brackets resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for step resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    to              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_brackets  reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    step            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 117

  ! sum             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dim             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! if              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! while           [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! do              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! for             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! gosub           [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelCls       [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! let             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! id              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelPrint     [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelRead      [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! end             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! loop            [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! wend            [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! return          [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! else            [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! elsif           [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! next            [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! to              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_brackets  [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! step            [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 88

    (88) multiple_read -> multiple_read comma . ids_access
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 133

state 89

    (86) read -> dunkelRead string comma . multiple_read
    (87) multiple_read -> . ids_access
    (88) multiple_read -> . multiple_read comma ids_access
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 134
    ids_access                     shift and go to state 56

state 90

    (62) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 135


state 91

    (63) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 136


state 92

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelCls       reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    else            reduce using rule 10 (variable -> dim id as variable_type .)
    elsif           reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 137


state 93

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    dunkelCls       reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    else            reduce using rule 14 (variable_type -> word .)
    elsif           reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 94

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    dunkelCls       reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    else            reduce using rule 15 (variable_type -> float .)
    elsif           reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 95

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    dunkelCls       reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    else            reduce using rule 16 (variable_type -> bool .)
    elsif           reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 96

    (72) functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .

    dim             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    if              reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    while           reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    do              reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    for             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    gosub           reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelCls       reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    let             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    id              reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    end             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    loop            reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    wend            reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    return          reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    else            reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    elsif           reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    next            reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    sum             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    substraction    reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    division        reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    exponent        reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    comma           reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    and             reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    or              reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    less_than       reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    to              reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    step            reduce using rule 72 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)


state 97

    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments . ACTION_ADD_PARAMETERS close_parenthesis
    (76) arguments -> arguments . comma arguments
    (97) ACTION_ADD_PARAMETERS -> .

    comma           shift and go to state 139
    close_parenthesis reduce using rule 97 (ACTION_ADD_PARAMETERS -> .)

    ACTION_ADD_PARAMETERS          shift and go to state 138

state 98

    (74) arguments -> ByVal . value ACTION_ADD_FUNCTION_OPERAND
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 46
    open_parenthesis shift and go to state 126
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    value                          shift and go to state 140
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 99

    (75) arguments -> ByRef . id ACTION_ADD_FUNCTION_OPERAND

    id              shift and go to state 141


state 100

    (28) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 142
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 101

    (39) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (26) logic_expression -> arithmetic_expression .
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 122
    and             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

  ! close_parenthesis [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 77

state 102

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs else inside_logic end if

    then            shift and go to state 143


state 103

    (27) logic_expression -> logic_expression logic_operator . logic_expression ACTION_ADD_QUADRUPLET
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    logic_expression               shift and go to state 144
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 104

    (29) logic_operator -> and . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 145

state 105

    (30) logic_operator -> or . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 146

state 106

    (31) logic_operator -> is_equal . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 147

state 107

    (32) logic_operator -> is_not_equal . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 148

state 108

    (33) logic_operator -> greater_than . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 149

state 109

    (34) logic_operator -> greater_or_equal_than . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 150

state 110

    (35) logic_operator -> less_than . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 151

state 111

    (36) logic_operator -> less_or_equal_than . ACTION_ADD_OPERATOR
    (94) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 94 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 94 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 152

state 112

    (23) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 153
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 113

    (24) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 154


state 114

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 155
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 115

    (68) assign -> let ids_access equals logic_expression .
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    dim             reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    if              reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    while           reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    do              reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    for             reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    gosub           reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    dunkelCls       reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    let             reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    id              reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    dunkelPrint     reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    dunkelRead      reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    end             reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    loop            reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    wend            reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    return          reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    else            reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    elsif           reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    next            reduce using rule 68 (assign -> let ids_access equals logic_expression .)
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 116

    (69) assign -> let ids_access equals arithmetic_expression .
    (26) logic_expression -> arithmetic_expression .
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! reduce/reduce conflict for dim resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for if resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for while resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for do resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for for resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for gosub resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for let resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for id resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for end resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for loop resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for wend resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for return resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for else resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for elsif resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for next resolved using rule 26 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

  ! dim             [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! if              [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! while           [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! do              [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! for             [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! gosub           [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelCls       [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! let             [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! id              [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelPrint     [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelRead      [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! end             [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! loop            [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! wend            [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! return          [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! else            [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! elsif           [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]
  ! next            [ reduce using rule 69 (assign -> let ids_access equals arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 77

state 117

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 156
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 118

    (55) ids_access -> open_parenthesis ids_access close_parenthesis .

    equals          reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    comma           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelCls       reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    else            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    elsif           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 119

    (84) multiple_print -> multiple_print comma multiple_print .
    (84) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    dunkelCls       reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    else            reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    elsif           reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 70

  ! comma           [ reduce using rule 84 (multiple_print -> multiple_print comma multiple_print .) ]


state 120

    (39) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 122
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 121

    (81) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelCls       reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    let             reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    else            reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    elsif           reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 81 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 122

    (39) arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .

    sum             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    substraction    reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    multiplication  reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    division        reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    exponent        reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    comma           reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dim             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    if              reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    while           reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    do              reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    for             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    gosub           reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelCls       reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    let             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    id              reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelRead      reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    end             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    loop            reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    wend            reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    return          reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    else            reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    elsif           reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    next            reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_parenthesis reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    and             reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    or              reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_equal        reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_not_equal    reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_than    reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_than       reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    to              reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_brackets  reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    step            reduce using rule 39 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)


state 123

    (50) value -> open_parenthesis value close_parenthesis .

    sum             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    substraction    reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    multiplication  reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    division        reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    exponent        reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    comma           reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    dim             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    if              reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    while           reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    do              reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    for             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    gosub           reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    dunkelCls       reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    let             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    id              reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    dunkelPrint     reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    dunkelRead      reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    end             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    loop            reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    wend            reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    return          reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    else            reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    elsif           reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    next            reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    close_parenthesis reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    and             reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    or              reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    is_equal        reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    is_not_equal    reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    greater_than    reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    greater_or_equal_than reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    less_than       reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    less_or_equal_than reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    to              reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    close_brackets  reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)
    step            reduce using rule 50 (value -> open_parenthesis value close_parenthesis .)


state 124

    (51) ids_access -> id ACTION_ADD_VAR_VALUE .
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (59) real_value -> id ACTION_ADD_VAR_VALUE .

  ! reduce/reduce conflict for close_parenthesis resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for sum resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 117

  ! close_parenthesis [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! sum             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 59 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 125

    (38) arithmetic_expression -> arithmetic_expression arithmetic_operator value . ACTION_ADD_QUADRUPLET
    (99) ACTION_ADD_QUADRUPLET -> .

    sum             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    substraction    reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    multiplication  reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    division        reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    exponent        reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    close_parenthesis reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    is_equal        reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    is_not_equal    reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    greater_than    reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    greater_or_equal_than reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    less_than       reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    less_or_equal_than reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    to              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    close_brackets  reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    step            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 157

state 126

    (50) value -> open_parenthesis . value close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    not             shift and go to state 46
    open_parenthesis shift and go to state 126
    id              shift and go to state 76
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52

    value                          shift and go to state 158
    ids_access                     shift and go to state 75
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48

state 127

    (40) arithmetic_operator -> sum ACTION_ADD_OPERATOR .

    not             reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    id              reduce using rule 40 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)


state 128

    (41) arithmetic_operator -> substraction ACTION_ADD_OPERATOR .

    not             reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    id              reduce using rule 41 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)


state 129

    (42) arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .

    not             reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    id              reduce using rule 42 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)


state 130

    (43) arithmetic_operator -> division ACTION_ADD_OPERATOR .

    not             reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    id              reduce using rule 43 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)


state 131

    (44) arithmetic_operator -> exponent ACTION_ADD_OPERATOR .

    not             reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    id              reduce using rule 44 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)


state 132

    (49) value -> not possible_values ACTION_ADD_NOT_OPERAND .

    sum             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    substraction    reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    multiplication  reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    division        reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    exponent        reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    comma           reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dim             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    if              reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    while           reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    do              reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    for             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    gosub           reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelCls       reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    let             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    id              reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelPrint     reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelRead      reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    end             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    loop            reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    wend            reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    return          reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    else            reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    elsif           reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    next            reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    close_parenthesis reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    and             reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    or              reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    is_equal        reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    is_not_equal    reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    greater_than    reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    greater_or_equal_than reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    less_than       reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    less_or_equal_than reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    to              reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    close_brackets  reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    step            reduce using rule 49 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)


state 133

    (88) multiple_read -> multiple_read comma ids_access .

    comma           reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    dim             reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    if              reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    while           reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    do              reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    for             reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    gosub           reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    dunkelCls       reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    let             reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    id              reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    dunkelPrint     reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    dunkelRead      reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    end             reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    loop            reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    wend            reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    return          reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    else            reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    elsif           reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)
    next            reduce using rule 88 (multiple_read -> multiple_read comma ids_access .)


state 134

    (86) read -> dunkelRead string comma multiple_read .
    (88) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    dunkelCls       reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    let             reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    else            reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    elsif           reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 86 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 88


state 135

    (62) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 159
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 136

    (63) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 160


state 137

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 161


state 138

    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS . close_parenthesis

    close_parenthesis shift and go to state 162


state 139

    (76) arguments -> arguments comma . arguments
    (74) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (75) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . arguments comma arguments

    ByVal           shift and go to state 98
    ByRef           shift and go to state 99

    arguments                      shift and go to state 163

state 140

    (74) arguments -> ByVal value . ACTION_ADD_FUNCTION_OPERAND
    (95) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 95 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 95 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 164

state 141

    (75) arguments -> ByRef id . ACTION_ADD_FUNCTION_OPERAND
    (95) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 95 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 95 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 165

state 142

    (28) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 28 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 143

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs else inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 166
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 144

    (27) logic_expression -> logic_expression logic_operator logic_expression . ACTION_ADD_QUADRUPLET
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (99) ACTION_ADD_QUADRUPLET -> .
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .)
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! and             [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! or              [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_equal        [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_not_equal    [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_than    [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_or_equal_than [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_than       [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_or_equal_than [ reduce using rule 99 (ACTION_ADD_QUADRUPLET -> .) ]

    logic_operator                 shift and go to state 103
    ACTION_ADD_QUADRUPLET          shift and go to state 167

state 145

    (29) logic_operator -> and ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)
    not             reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)
    id              reduce using rule 29 (logic_operator -> and ACTION_ADD_OPERATOR .)


state 146

    (30) logic_operator -> or ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)
    not             reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)
    id              reduce using rule 30 (logic_operator -> or ACTION_ADD_OPERATOR .)


state 147

    (31) logic_operator -> is_equal ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 31 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)


state 148

    (32) logic_operator -> is_not_equal ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 32 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)


state 149

    (33) logic_operator -> greater_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 33 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)


state 150

    (34) logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 34 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)


state 151

    (35) logic_operator -> less_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 35 (logic_operator -> less_than ACTION_ADD_OPERATOR .)


state 152

    (36) logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 36 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)


state 153

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 168


state 154

    (24) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    logic_expression               shift and go to state 169
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 155

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    to              shift and go to state 170
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 156

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 171
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 157

    (38) arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .

    sum             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_parenthesis reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    to              reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_brackets  reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    step            reduce using rule 38 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)


state 158

    (50) value -> open_parenthesis value . close_parenthesis

    close_parenthesis shift and go to state 123


state 159

    (62) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 172


state 160

    (63) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (70) parameters -> . variable
    (71) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 173
    dim             shift and go to state 9

    parameters                     shift and go to state 174
    variable                       shift and go to state 175

state 161

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 176


state 162

    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .

    dim             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    if              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    while           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    do              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    for             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    gosub           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelCls       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    let             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    id              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelPrint     reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelRead      reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    end             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    loop            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    wend            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    return          reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    else            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    elsif           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    next            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    sum             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    substraction    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    multiplication  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    division        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    exponent        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    comma           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_parenthesis reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    and             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    or              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_equal        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_not_equal    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_than    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_than       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    to              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_brackets  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    step            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)


state 163

    (76) arguments -> arguments comma arguments .
    (76) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 76 (arguments -> arguments comma arguments .)
    comma           shift and go to state 139

  ! comma           [ reduce using rule 76 (arguments -> arguments comma arguments .) ]


state 164

    (74) arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 74 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 74 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)


state 165

    (75) arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 75 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 75 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)


state 166

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs else inside_logic end if
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 177
    else            shift and go to state 178
    elsif           shift and go to state 180

    else_ifs                       shift and go to state 179

state 167

    (27) logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .

    close_parenthesis reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 27 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)


state 168

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelCls       reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    let             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    else            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    elsif           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 169

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 181
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 170

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 182
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 171

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (100) ACTION_ADD_ONE_DIM_OPERAND -> .

    open_brackets   shift and go to state 183
    equals          reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    sum             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    substraction    reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    multiplication  reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    division        reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    exponent        reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    comma           reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dim             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    if              reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    while           reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    do              reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    for             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    gosub           reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    let             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    id              reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    end             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    loop            reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    wend            reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    return          reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    else            reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    elsif           reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    next            reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    and             reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    or              reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_equal        reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_than    reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_than       reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    to              reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    step            reduce using rule 100 (ACTION_ADD_ONE_DIM_OPERAND -> .)

    ACTION_ADD_ONE_DIM_OPERAND     shift and go to state 184

state 172

    (62) subroutines -> sub procedure id inside_logic return . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

    sub             shift and go to state 58
    $end            reduce using rule 67 (subroutines -> .)

    subroutines                    shift and go to state 185

state 173

    (63) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 187
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 186
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 174

    (64) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (71) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 188
    comma           shift and go to state 189


state 175

    (70) parameters -> variable .

    close_parenthesis reduce using rule 70 (parameters -> variable .)
    comma           reduce using rule 70 (parameters -> variable .)


state 176

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    else            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    elsif           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 190


state 177

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end . if

    if              shift and go to state 191


state 178

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 192
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 179

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . else inside_logic end if
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 194
    else            shift and go to state 195
    elsif           shift and go to state 180

    else_ifs                       shift and go to state 193

state 180

    (21) else_ifs -> elsif . open_parenthesis logic_expression close_parenthesis then inside_logic

    open_parenthesis shift and go to state 196


state 181

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 182

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    step            shift and go to state 197
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 183

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 198
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 184

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .

    equals          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    sum             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    substraction    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    multiplication  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    division        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    exponent        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    comma           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dim             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    if              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    while           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    do              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    for             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    gosub           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelCls       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    let             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    id              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelRead      reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    end             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    loop            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    wend            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    return          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    else            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    elsif           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    next            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_parenthesis reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    and             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    or              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_equal        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_not_equal    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_than    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_than       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    to              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_brackets  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    step            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)


state 185

    (62) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 62 (subroutines -> sub procedure id inside_logic return subroutines .)


state 186

    (63) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 199


state 187

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 93
    float           shift and go to state 94
    bool            shift and go to state 95

    variable_type                  shift and go to state 200

state 188

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 202
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 201
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 189

    (71) parameters -> parameters comma . parameters
    (70) parameters -> . variable
    (71) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 203
    variable                       shift and go to state 175

state 190

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 204


state 191

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .

    dim             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    if              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    while           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    do              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    for             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    gosub           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelCls       reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    let             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    id              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelPrint     reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelRead      reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    end             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    loop            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    wend            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    return          reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    else            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    elsif           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    next            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)


state 192

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic . end if

    end             shift and go to state 205


state 193

    (22) else_ifs -> else_ifs else_ifs .
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

  ! shift/reduce conflict for elsif resolved as shift
    end             reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    else            reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    elsif           shift and go to state 180

  ! elsif           [ reduce using rule 22 (else_ifs -> else_ifs else_ifs .) ]

    else_ifs                       shift and go to state 193

state 194

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end . if

    if              shift and go to state 206


state 195

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 207
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 196

    (21) else_ifs -> elsif open_parenthesis . logic_expression close_parenthesis then inside_logic
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (28) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 61
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    logic_expression               shift and go to state 208
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 197

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 209
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 198

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 210
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 199

    (63) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 211


state 200

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 212
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 201

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 213


state 202

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 93
    float           shift and go to state 94
    bool            shift and go to state 95

    variable_type                  shift and go to state 214

state 203

    (71) parameters -> parameters comma parameters .
    (71) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 71 (parameters -> parameters comma parameters .)
    comma           shift and go to state 189

  ! comma           [ reduce using rule 71 (parameters -> parameters comma parameters .) ]


state 204

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 215


state 205

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end . if

    if              shift and go to state 216


state 206

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .

    dim             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    if              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    while           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    do              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    for             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    gosub           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelCls       reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    let             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    id              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelPrint     reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelRead      reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    end             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    loop            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    wend            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    return          reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    else            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    elsif           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    next            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)


state 207

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic . end if

    end             shift and go to state 217


state 208

    (21) else_ifs -> elsif open_parenthesis logic_expression . close_parenthesis then inside_logic
    (27) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_operator -> . and ACTION_ADD_OPERATOR
    (30) logic_operator -> . or ACTION_ADD_OPERATOR
    (31) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 218
    and             shift and go to state 104
    or              shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operator                 shift and go to state 103

state 209

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 9 (inside_logic -> .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 219
    arithmetic_operator            shift and go to state 77
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 210

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (101) ACTION_ADD_TWO_DIM_OPERAND -> .

    open_brackets   shift and go to state 220
    equals          reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    sum             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    substraction    reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    multiplication  reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    division        reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    exponent        reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    comma           reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dim             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    if              reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    while           reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    do              reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    for             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    gosub           reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    let             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    id              reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    end             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    loop            reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    wend            reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    return          reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    else            reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    elsif           reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    next            reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    and             reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    or              reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_equal        reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_than    reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_than       reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    to              reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_brackets  reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    step            reduce using rule 101 (ACTION_ADD_TWO_DIM_OPERAND -> .)

    ACTION_ADD_TWO_DIM_OPERAND     shift and go to state 221

state 211

    (63) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

    sub             shift and go to state 58
    $end            reduce using rule 67 (subroutines -> .)

    subroutines                    shift and go to state 222

state 212

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 223


state 213

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 224


state 214

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 225
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 215

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 226


state 216

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .

    dim             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    if              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    while           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    do              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    for             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    gosub           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelCls       reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    let             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    id              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelPrint     reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelRead      reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    end             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    loop            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    wend            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    return          reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    else            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    elsif           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    next            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)


state 217

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end . if

    if              shift and go to state 227


state 218

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis . then inside_logic

    then            shift and go to state 228


state 219

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 229


state 220

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (48) value -> . possible_values
    (49) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (50) value -> . open_parenthesis value close_parenthesis
    (45) possible_values -> . real_value
    (46) possible_values -> . functions
    (47) possible_values -> . ids_access
    (56) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (57) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (58) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (59) real_value -> . id ACTION_ADD_VAR_VALUE
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 71
    not             shift and go to state 46
    word_value      shift and go to state 50
    float_value     shift and go to state 51
    bool_value      shift and go to state 52
    id              shift and go to state 53

    arithmetic_expression          shift and go to state 230
    value                          shift and go to state 44
    possible_values                shift and go to state 45
    real_value                     shift and go to state 47
    functions                      shift and go to state 48
    ids_access                     shift and go to state 49

state 221

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .

    equals          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    sum             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    substraction    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    multiplication  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    division        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    exponent        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dim             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    if              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    while           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    do              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    for             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    gosub           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelCls       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    let             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    id              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelPrint     reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelRead      reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    end             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    loop            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    wend            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    return          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    else            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    elsif           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    next            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    and             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    or              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_equal        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_not_equal    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_than    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_than       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    to              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_brackets  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    step            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)


state 222

    (63) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 63 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 223

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 231


state 224

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

    sub             shift and go to state 58
    $end            reduce using rule 67 (subroutines -> .)

    subroutines                    shift and go to state 232

state 225

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 233


state 226

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 234


state 227

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .

    dim             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    if              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    while           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    do              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    for             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    gosub           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelCls       reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    let             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    id              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelPrint     reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelRead      reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    end             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    loop            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    wend            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    return          reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    else            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    elsif           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    next            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)


state 228

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (60) calls -> . gosub id
    (61) calls -> . functions
    (77) read_or_write -> . print
    (78) read_or_write -> . read
    (79) read_or_write -> . dunkelCls
    (68) assign -> . let ids_access equals logic_expression
    (69) assign -> . let ids_access equals arithmetic_expression
    (72) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (80) print -> . dunkelPrint multiple_print
    (81) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (85) read -> . dunkelRead multiple_read
    (86) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 235
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 229

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 236


state 230

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (41) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 237
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operator            shift and go to state 77

state 231

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

    sub             shift and go to state 58
    $end            reduce using rule 67 (subroutines -> .)

    subroutines                    shift and go to state 238

state 232

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 64 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 233

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 239


state 234

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 240


state 235

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .

    end             reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    else            reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    elsif           reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)


state 236

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelCls       reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    let             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    else            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    elsif           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 237

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_THREE_DIM_OPERAND
    (102) ACTION_ADD_THREE_DIM_OPERAND -> .

    equals          reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    sum             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    substraction    reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    multiplication  reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    division        reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    exponent        reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    comma           reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dim             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    if              reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    while           reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    do              reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    for             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    gosub           reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    let             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    id              reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    end             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    loop            reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    wend            reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    return          reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    else            reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    elsif           reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    next            reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    and             reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    or              reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_equal        reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_than    reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_than       reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    to              reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    step            reduce using rule 102 (ACTION_ADD_THREE_DIM_OPERAND -> .)

    ACTION_ADD_THREE_DIM_OPERAND   shift and go to state 241

state 238

    (65) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 65 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 239

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (62) subroutines -> . sub procedure id inside_logic return subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> .

    sub             shift and go to state 58
    $end            reduce using rule 67 (subroutines -> .)

    subroutines                    shift and go to state 242

state 240

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 241

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .

    equals          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    sum             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    substraction    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    multiplication  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    division        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    exponent        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    comma           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dim             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    if              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    while           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    do              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    for             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    gosub           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelCls       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    let             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    id              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelRead      reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    end             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    loop            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    wend            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    return          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    else            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    elsif           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    next            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_parenthesis reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    and             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    or              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_equal        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_not_equal    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_than    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_than       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    to              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_brackets  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    step            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)


state 242

    (66) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 66 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for close_parenthesis in state 73 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 74 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 75 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 101 resolved as shift
WARNING: shift/reduce conflict for comma in state 119 resolved as shift
WARNING: shift/reduce conflict for and in state 144 resolved as shift
WARNING: shift/reduce conflict for or in state 144 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 144 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 144 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 144 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 144 resolved as shift
WARNING: shift/reduce conflict for less_than in state 144 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 144 resolved as shift
WARNING: shift/reduce conflict for comma in state 163 resolved as shift
WARNING: shift/reduce conflict for elsif in state 193 resolved as shift
WARNING: shift/reduce conflict for comma in state 203 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 23
WARNING: reduce/reduce conflict in state 87 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 87
WARNING: reduce/reduce conflict in state 116 resolved using rule (logic_expression -> arithmetic_expression)
WARNING: rejected rule (assign -> let ids_access equals arithmetic_expression) in state 116
WARNING: reduce/reduce conflict in state 124 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 124
WARNING: Rule (real_value -> id ACTION_ADD_VAR_VALUE) is never reduced
WARNING: Rule (assign -> let ids_access equals arithmetic_expression) is never reduced
