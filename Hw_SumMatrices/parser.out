Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if
Rule 18    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
Rule 19    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
Rule 20    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
Rule 21    else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic
Rule 22    else_ifs -> else_ifs else_ifs
Rule 23    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 24    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 25    loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 26    logic_expression -> value
Rule 27    logic_expression -> not value
Rule 28    logic_expression -> logic_expression arithmetic_operator value
Rule 29    logic_expression -> logic_expression arithmetic_operator not value
Rule 30    logic_expression -> bool_value ACTION_ADD_BOOL_VALUE
Rule 31    logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE
Rule 32    logic_expression -> not ACTION_ADD_OPERATOR logic_expression
Rule 33    logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
Rule 34    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 35    logic_operator -> and ACTION_ADD_OPERATOR
Rule 36    logic_operator -> or ACTION_ADD_OPERATOR
Rule 37    logic_operator -> is_equal ACTION_ADD_OPERATOR
Rule 38    logic_operator -> is_not_equal ACTION_ADD_OPERATOR
Rule 39    logic_operator -> greater_than ACTION_ADD_OPERATOR
Rule 40    logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR
Rule 41    logic_operator -> less_than ACTION_ADD_OPERATOR
Rule 42    logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR
Rule 43    arithmetic_expression -> value
Rule 44    arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
Rule 45    arithmetic_operator -> sum ACTION_ADD_OPERATOR
Rule 46    arithmetic_operator -> substraction ACTION_ADD_OPERATOR
Rule 47    arithmetic_operator -> multiplication ACTION_ADD_OPERATOR
Rule 48    arithmetic_operator -> division ACTION_ADD_OPERATOR
Rule 49    arithmetic_operator -> exponent ACTION_ADD_OPERATOR
Rule 50    value -> real_value
Rule 51    value -> functions
Rule 52    value -> ids_access
Rule 53    ids_access -> id ACTION_ADD_VAR_VALUE
Rule 54    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
Rule 55    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
Rule 56    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
Rule 57    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 58    real_value -> word_value ACTION_ADD_WORD_VALUE
Rule 59    real_value -> float_value ACTION_ADD_FLOAT_VALUE
Rule 60    real_value -> id ACTION_ADD_VAR_VALUE
Rule 61    calls -> gosub id
Rule 62    calls -> functions
Rule 63    subroutines -> sub procedure id inside_logic return subroutines
Rule 64    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 65    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 66    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 67    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 68    subroutines -> <empty>
Rule 69    assign -> let ids_access equals logic_expression
Rule 70    assign -> let ids_access equals arithmetic_expression
Rule 71    parameters -> variable
Rule 72    parameters -> parameters comma parameters
Rule 73    functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
Rule 74    functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
Rule 75    arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND
Rule 76    arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND
Rule 77    arguments -> arguments comma arguments
Rule 78    read_or_write -> print
Rule 79    read_or_write -> read
Rule 80    read_or_write -> dunkelCls
Rule 81    print -> dunkelPrint multiple_print
Rule 82    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 83    multiple_print -> string
Rule 84    multiple_print -> arithmetic_expression
Rule 85    multiple_print -> multiple_print comma multiple_print
Rule 86    read -> dunkelRead multiple_read
Rule 87    read -> dunkelRead string comma multiple_read
Rule 88    multiple_read -> ids_access
Rule 89    multiple_read -> multiple_read comma ids_access
Rule 90    ACTION_ADD_FOR_VALUE -> <empty>
Rule 91    ACTION_ADD_VAR_VALUE -> <empty>
Rule 92    ACTION_ADD_WORD_VALUE -> <empty>
Rule 93    ACTION_ADD_FLOAT_VALUE -> <empty>
Rule 94    ACTION_ADD_BOOL_VALUE -> <empty>
Rule 95    ACTION_ADD_OPERATOR -> <empty>
Rule 96    ACTION_ADD_FUNCTION_OPERAND -> <empty>
Rule 97    ACTION_ADD_FUNCTION -> <empty>
Rule 98    ACTION_ADD_PARAMETERS -> <empty>
Rule 99    ACTION_ADD_NOT_QUADRUPLET -> <empty>
Rule 100   ACTION_ADD_QUADRUPLET -> <empty>
Rule 101   ACTION_ADD_ONE_DIM_OPERAND -> <empty>
Rule 102   ACTION_ADD_TWO_DIM_OPERAND -> <empty>
Rule 103   ACTION_ADD_THREE_DIM_OPERAND -> <empty>

Terminals, with rules where they appear

ByRef                : 76
ByVal                : 75
and                  : 35
as                   : 10 11 12 13 66 67
bool                 : 16
bool_value           : 30 31
close_braces         : 
close_brackets       : 11 12 12 13 13 13 54 55 55 56 56 56
close_parenthesis    : 17 18 19 20 21 23 24 34 57 64 65 66 67 73 74 82
colon                : 
comma                : 72 77 85 87 89
dim                  : 10 11 12 13
division             : 48
do                   : 24
dunkelCls            : 80
dunkelPrint          : 81 82
dunkelRead           : 86 87
else                 : 18 20
elsif                : 21
end                  : 1 2 17 18 19 20 64 65 66 67
end_if               : 
equals               : 25 69 70
error                : 
exit                 : 
exponent             : 49
false                : 
float                : 15
float_value          : 59
for                  : 25
function             : 64 65 66 67
gosub                : 61
goto                 : 
greater_or_equal_than : 40
greater_than         : 39
id                   : 10 11 12 13 25 25 53 54 55 56 60 61 63 64 65 66 67 73 74 76
if                   : 17 17 18 18 19 19 20 20
is_equal             : 37
is_not_equal         : 38
less_or_equal_than   : 42
less_than            : 41
let                  : 69 70
loop                 : 24
multiplication       : 47
next                 : 25
not                  : 27 29 31 32
open_braces          : 
open_brackets        : 11 12 12 13 13 13 54 55 55 56 56 56
open_parenthesis     : 17 18 19 20 21 23 24 34 57 64 65 66 67 73 74 82
or                   : 36
procedure            : 63
return               : 63
semicolon            : 
step                 : 25
string               : 83 87
sub                  : 63 64 64 65 65 66 66 67 67
substraction         : 46
sum                  : 45
then                 : 17 18 19 20 21
to                   : 25
true                 : 
until                : 24
wend                 : 23
while                : 23
word                 : 14
word_value           : 11 12 12 13 13 13 58

Nonterminals, with rules where they appear

ACTION_ADD_BOOL_VALUE : 30 31
ACTION_ADD_FLOAT_VALUE : 59
ACTION_ADD_FOR_VALUE : 25
ACTION_ADD_FUNCTION  : 73 74
ACTION_ADD_FUNCTION_OPERAND : 75 76
ACTION_ADD_NOT_QUADRUPLET : 
ACTION_ADD_ONE_DIM_OPERAND : 54
ACTION_ADD_OPERATOR  : 32 35 36 37 38 39 40 41 42 45 46 47 48 49
ACTION_ADD_PARAMETERS : 74
ACTION_ADD_QUADRUPLET : 33 44
ACTION_ADD_THREE_DIM_OPERAND : 56
ACTION_ADD_TWO_DIM_OPERAND : 55
ACTION_ADD_VAR_VALUE : 53 54 55 56 60
ACTION_ADD_WORD_VALUE : 58
arguments            : 74 77 77
arithmetic_expression : 25 25 25 44 54 55 55 56 56 56 70 84
arithmetic_operator  : 28 29 44
assign               : 8
calls                : 6
conditions           : 4
else_ifs             : 19 20 22 22
functions            : 51 62
ids_access           : 52 57 69 70 88 89
inside_logic         : 1 2 3 4 5 6 7 8 17 18 18 19 20 20 21 23 24 25 63 64 65 66 67
logic_expression     : 17 18 19 20 21 23 24 28 29 32 33 33 34 69
logic_operator       : 33
loops                : 5
multiple_print       : 81 82 85 85
multiple_read        : 86 87 89
parameters           : 65 67 72 72
print                : 78
program              : 0
read                 : 79
read_or_write        : 7
real_value           : 50
subroutines          : 2 63 64 65 66 67
value                : 26 27 28 29 43 44 75
variable             : 3 71
variable_type        : 10 11 12 13 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 23


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 24
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 25
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 29
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 30


state 10

    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (97) ACTION_ADD_FUNCTION -> .

    open_parenthesis reduce using rule 97 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_FUNCTION            shift and go to state 31

state 11

    (17) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if

    open_parenthesis shift and go to state 32


state 12

    (23) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 33


state 13

    (24) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 34
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 14

    (25) loops -> for . id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 35


state 15

    (61) calls -> gosub . id

    id              shift and go to state 36


state 16

    (62) calls -> functions .

    dim             reduce using rule 62 (calls -> functions .)
    if              reduce using rule 62 (calls -> functions .)
    while           reduce using rule 62 (calls -> functions .)
    do              reduce using rule 62 (calls -> functions .)
    for             reduce using rule 62 (calls -> functions .)
    gosub           reduce using rule 62 (calls -> functions .)
    dunkelCls       reduce using rule 62 (calls -> functions .)
    let             reduce using rule 62 (calls -> functions .)
    id              reduce using rule 62 (calls -> functions .)
    dunkelPrint     reduce using rule 62 (calls -> functions .)
    dunkelRead      reduce using rule 62 (calls -> functions .)
    end             reduce using rule 62 (calls -> functions .)
    loop            reduce using rule 62 (calls -> functions .)
    wend            reduce using rule 62 (calls -> functions .)
    return          reduce using rule 62 (calls -> functions .)
    else            reduce using rule 62 (calls -> functions .)
    elsif           reduce using rule 62 (calls -> functions .)
    next            reduce using rule 62 (calls -> functions .)


state 17

    (78) read_or_write -> print .

    dim             reduce using rule 78 (read_or_write -> print .)
    if              reduce using rule 78 (read_or_write -> print .)
    while           reduce using rule 78 (read_or_write -> print .)
    do              reduce using rule 78 (read_or_write -> print .)
    for             reduce using rule 78 (read_or_write -> print .)
    gosub           reduce using rule 78 (read_or_write -> print .)
    dunkelCls       reduce using rule 78 (read_or_write -> print .)
    let             reduce using rule 78 (read_or_write -> print .)
    id              reduce using rule 78 (read_or_write -> print .)
    dunkelPrint     reduce using rule 78 (read_or_write -> print .)
    dunkelRead      reduce using rule 78 (read_or_write -> print .)
    end             reduce using rule 78 (read_or_write -> print .)
    loop            reduce using rule 78 (read_or_write -> print .)
    wend            reduce using rule 78 (read_or_write -> print .)
    return          reduce using rule 78 (read_or_write -> print .)
    else            reduce using rule 78 (read_or_write -> print .)
    elsif           reduce using rule 78 (read_or_write -> print .)
    next            reduce using rule 78 (read_or_write -> print .)


state 18

    (79) read_or_write -> read .

    dim             reduce using rule 79 (read_or_write -> read .)
    if              reduce using rule 79 (read_or_write -> read .)
    while           reduce using rule 79 (read_or_write -> read .)
    do              reduce using rule 79 (read_or_write -> read .)
    for             reduce using rule 79 (read_or_write -> read .)
    gosub           reduce using rule 79 (read_or_write -> read .)
    dunkelCls       reduce using rule 79 (read_or_write -> read .)
    let             reduce using rule 79 (read_or_write -> read .)
    id              reduce using rule 79 (read_or_write -> read .)
    dunkelPrint     reduce using rule 79 (read_or_write -> read .)
    dunkelRead      reduce using rule 79 (read_or_write -> read .)
    end             reduce using rule 79 (read_or_write -> read .)
    loop            reduce using rule 79 (read_or_write -> read .)
    wend            reduce using rule 79 (read_or_write -> read .)
    return          reduce using rule 79 (read_or_write -> read .)
    else            reduce using rule 79 (read_or_write -> read .)
    elsif           reduce using rule 79 (read_or_write -> read .)
    next            reduce using rule 79 (read_or_write -> read .)


state 19

    (80) read_or_write -> dunkelCls .

    dim             reduce using rule 80 (read_or_write -> dunkelCls .)
    if              reduce using rule 80 (read_or_write -> dunkelCls .)
    while           reduce using rule 80 (read_or_write -> dunkelCls .)
    do              reduce using rule 80 (read_or_write -> dunkelCls .)
    for             reduce using rule 80 (read_or_write -> dunkelCls .)
    gosub           reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelCls       reduce using rule 80 (read_or_write -> dunkelCls .)
    let             reduce using rule 80 (read_or_write -> dunkelCls .)
    id              reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelPrint     reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelRead      reduce using rule 80 (read_or_write -> dunkelCls .)
    end             reduce using rule 80 (read_or_write -> dunkelCls .)
    loop            reduce using rule 80 (read_or_write -> dunkelCls .)
    wend            reduce using rule 80 (read_or_write -> dunkelCls .)
    return          reduce using rule 80 (read_or_write -> dunkelCls .)
    else            reduce using rule 80 (read_or_write -> dunkelCls .)
    elsif           reduce using rule 80 (read_or_write -> dunkelCls .)
    next            reduce using rule 80 (read_or_write -> dunkelCls .)


state 20

    (69) assign -> let . ids_access equals logic_expression
    (70) assign -> let . ids_access equals arithmetic_expression
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 37

state 21

    (81) print -> dunkelPrint . multiple_print
    (82) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 41
    string          shift and go to state 42
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    multiple_print                 shift and go to state 40
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 22

    (86) read -> dunkelRead . multiple_read
    (87) read -> dunkelRead . string comma multiple_read
    (88) multiple_read -> . ids_access
    (89) multiple_read -> . multiple_read comma ids_access
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 52
    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 51
    ids_access                     shift and go to state 53

state 23

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 55

  ! $end            [ reduce using rule 68 (subroutines -> .) ]

    subroutines                    shift and go to state 54

state 24

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    else            reduce using rule 3 (inside_logic -> variable inside_logic .)
    elsif           reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 25

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    else            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    elsif           reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 26

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    else            reduce using rule 5 (inside_logic -> loops inside_logic .)
    elsif           reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 27

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    else            reduce using rule 6 (inside_logic -> calls inside_logic .)
    elsif           reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 28

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    else            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    elsif           reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 29

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    else            reduce using rule 8 (inside_logic -> assign inside_logic .)
    elsif           reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 30

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 56


state 31

    (73) functions -> id ACTION_ADD_FUNCTION . open_parenthesis close_parenthesis
    (74) functions -> id ACTION_ADD_FUNCTION . open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 57


state 32

    (17) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 59
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 33

    (23) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 63
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 34

    (24) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 64


state 35

    (25) loops -> for id . ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (90) ACTION_ADD_FOR_VALUE -> .

    equals          reduce using rule 90 (ACTION_ADD_FOR_VALUE -> .)

    ACTION_ADD_FOR_VALUE           shift and go to state 65

state 36

    (61) calls -> gosub id .

    dim             reduce using rule 61 (calls -> gosub id .)
    if              reduce using rule 61 (calls -> gosub id .)
    while           reduce using rule 61 (calls -> gosub id .)
    do              reduce using rule 61 (calls -> gosub id .)
    for             reduce using rule 61 (calls -> gosub id .)
    gosub           reduce using rule 61 (calls -> gosub id .)
    dunkelCls       reduce using rule 61 (calls -> gosub id .)
    let             reduce using rule 61 (calls -> gosub id .)
    id              reduce using rule 61 (calls -> gosub id .)
    dunkelPrint     reduce using rule 61 (calls -> gosub id .)
    dunkelRead      reduce using rule 61 (calls -> gosub id .)
    end             reduce using rule 61 (calls -> gosub id .)
    loop            reduce using rule 61 (calls -> gosub id .)
    wend            reduce using rule 61 (calls -> gosub id .)
    return          reduce using rule 61 (calls -> gosub id .)
    else            reduce using rule 61 (calls -> gosub id .)
    elsif           reduce using rule 61 (calls -> gosub id .)
    next            reduce using rule 61 (calls -> gosub id .)


state 37

    (69) assign -> let ids_access . equals logic_expression
    (70) assign -> let ids_access . equals arithmetic_expression

    equals          shift and go to state 66


state 38

    (53) ids_access -> id . ACTION_ADD_VAR_VALUE
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (91) ACTION_ADD_VAR_VALUE -> .

    open_brackets   reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    equals          reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 67

state 39

    (57) ids_access -> open_parenthesis . ids_access close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 68

state 40

    (81) print -> dunkelPrint multiple_print .
    (85) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 81 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 81 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 81 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 81 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 81 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 81 (print -> dunkelPrint multiple_print .)
    dunkelCls       reduce using rule 81 (print -> dunkelPrint multiple_print .)
    let             reduce using rule 81 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 81 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 81 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 81 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 81 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 81 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 81 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 81 (print -> dunkelPrint multiple_print .)
    else            reduce using rule 81 (print -> dunkelPrint multiple_print .)
    elsif           reduce using rule 81 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 81 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 69


state 41

    (82) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (57) ids_access -> open_parenthesis . ids_access close_parenthesis
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    string          shift and go to state 42
    id              shift and go to state 72
    open_parenthesis shift and go to state 39
    word_value      shift and go to state 48
    float_value     shift and go to state 49

    multiple_print                 shift and go to state 70
    ids_access                     shift and go to state 71
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 42

    (83) multiple_print -> string .

    comma           reduce using rule 83 (multiple_print -> string .)
    dim             reduce using rule 83 (multiple_print -> string .)
    if              reduce using rule 83 (multiple_print -> string .)
    while           reduce using rule 83 (multiple_print -> string .)
    do              reduce using rule 83 (multiple_print -> string .)
    for             reduce using rule 83 (multiple_print -> string .)
    gosub           reduce using rule 83 (multiple_print -> string .)
    dunkelCls       reduce using rule 83 (multiple_print -> string .)
    let             reduce using rule 83 (multiple_print -> string .)
    id              reduce using rule 83 (multiple_print -> string .)
    dunkelPrint     reduce using rule 83 (multiple_print -> string .)
    dunkelRead      reduce using rule 83 (multiple_print -> string .)
    end             reduce using rule 83 (multiple_print -> string .)
    loop            reduce using rule 83 (multiple_print -> string .)
    wend            reduce using rule 83 (multiple_print -> string .)
    return          reduce using rule 83 (multiple_print -> string .)
    else            reduce using rule 83 (multiple_print -> string .)
    elsif           reduce using rule 83 (multiple_print -> string .)
    next            reduce using rule 83 (multiple_print -> string .)
    close_parenthesis reduce using rule 83 (multiple_print -> string .)


state 43

    (84) multiple_print -> arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    comma           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dim             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    if              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    while           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    do              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    for             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    gosub           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelCls       reduce using rule 84 (multiple_print -> arithmetic_expression .)
    let             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    id              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelPrint     reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelRead      reduce using rule 84 (multiple_print -> arithmetic_expression .)
    end             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    loop            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    wend            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    return          reduce using rule 84 (multiple_print -> arithmetic_expression .)
    else            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    elsif           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    next            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    close_parenthesis reduce using rule 84 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 44

    (43) arithmetic_expression -> value .

    sum             reduce using rule 43 (arithmetic_expression -> value .)
    substraction    reduce using rule 43 (arithmetic_expression -> value .)
    multiplication  reduce using rule 43 (arithmetic_expression -> value .)
    division        reduce using rule 43 (arithmetic_expression -> value .)
    exponent        reduce using rule 43 (arithmetic_expression -> value .)
    comma           reduce using rule 43 (arithmetic_expression -> value .)
    dim             reduce using rule 43 (arithmetic_expression -> value .)
    if              reduce using rule 43 (arithmetic_expression -> value .)
    while           reduce using rule 43 (arithmetic_expression -> value .)
    do              reduce using rule 43 (arithmetic_expression -> value .)
    for             reduce using rule 43 (arithmetic_expression -> value .)
    gosub           reduce using rule 43 (arithmetic_expression -> value .)
    dunkelCls       reduce using rule 43 (arithmetic_expression -> value .)
    let             reduce using rule 43 (arithmetic_expression -> value .)
    id              reduce using rule 43 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 43 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 43 (arithmetic_expression -> value .)
    end             reduce using rule 43 (arithmetic_expression -> value .)
    loop            reduce using rule 43 (arithmetic_expression -> value .)
    wend            reduce using rule 43 (arithmetic_expression -> value .)
    return          reduce using rule 43 (arithmetic_expression -> value .)
    else            reduce using rule 43 (arithmetic_expression -> value .)
    elsif           reduce using rule 43 (arithmetic_expression -> value .)
    next            reduce using rule 43 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 43 (arithmetic_expression -> value .)
    to              reduce using rule 43 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 43 (arithmetic_expression -> value .)
    step            reduce using rule 43 (arithmetic_expression -> value .)


state 45

    (50) value -> real_value .

    sum             reduce using rule 50 (value -> real_value .)
    substraction    reduce using rule 50 (value -> real_value .)
    multiplication  reduce using rule 50 (value -> real_value .)
    division        reduce using rule 50 (value -> real_value .)
    exponent        reduce using rule 50 (value -> real_value .)
    comma           reduce using rule 50 (value -> real_value .)
    dim             reduce using rule 50 (value -> real_value .)
    if              reduce using rule 50 (value -> real_value .)
    while           reduce using rule 50 (value -> real_value .)
    do              reduce using rule 50 (value -> real_value .)
    for             reduce using rule 50 (value -> real_value .)
    gosub           reduce using rule 50 (value -> real_value .)
    dunkelCls       reduce using rule 50 (value -> real_value .)
    let             reduce using rule 50 (value -> real_value .)
    id              reduce using rule 50 (value -> real_value .)
    dunkelPrint     reduce using rule 50 (value -> real_value .)
    dunkelRead      reduce using rule 50 (value -> real_value .)
    end             reduce using rule 50 (value -> real_value .)
    loop            reduce using rule 50 (value -> real_value .)
    wend            reduce using rule 50 (value -> real_value .)
    return          reduce using rule 50 (value -> real_value .)
    else            reduce using rule 50 (value -> real_value .)
    elsif           reduce using rule 50 (value -> real_value .)
    next            reduce using rule 50 (value -> real_value .)
    close_parenthesis reduce using rule 50 (value -> real_value .)
    and             reduce using rule 50 (value -> real_value .)
    or              reduce using rule 50 (value -> real_value .)
    is_equal        reduce using rule 50 (value -> real_value .)
    is_not_equal    reduce using rule 50 (value -> real_value .)
    greater_than    reduce using rule 50 (value -> real_value .)
    greater_or_equal_than reduce using rule 50 (value -> real_value .)
    less_than       reduce using rule 50 (value -> real_value .)
    less_or_equal_than reduce using rule 50 (value -> real_value .)
    to              reduce using rule 50 (value -> real_value .)
    close_brackets  reduce using rule 50 (value -> real_value .)
    step            reduce using rule 50 (value -> real_value .)


state 46

    (51) value -> functions .

    sum             reduce using rule 51 (value -> functions .)
    substraction    reduce using rule 51 (value -> functions .)
    multiplication  reduce using rule 51 (value -> functions .)
    division        reduce using rule 51 (value -> functions .)
    exponent        reduce using rule 51 (value -> functions .)
    comma           reduce using rule 51 (value -> functions .)
    dim             reduce using rule 51 (value -> functions .)
    if              reduce using rule 51 (value -> functions .)
    while           reduce using rule 51 (value -> functions .)
    do              reduce using rule 51 (value -> functions .)
    for             reduce using rule 51 (value -> functions .)
    gosub           reduce using rule 51 (value -> functions .)
    dunkelCls       reduce using rule 51 (value -> functions .)
    let             reduce using rule 51 (value -> functions .)
    id              reduce using rule 51 (value -> functions .)
    dunkelPrint     reduce using rule 51 (value -> functions .)
    dunkelRead      reduce using rule 51 (value -> functions .)
    end             reduce using rule 51 (value -> functions .)
    loop            reduce using rule 51 (value -> functions .)
    wend            reduce using rule 51 (value -> functions .)
    return          reduce using rule 51 (value -> functions .)
    else            reduce using rule 51 (value -> functions .)
    elsif           reduce using rule 51 (value -> functions .)
    next            reduce using rule 51 (value -> functions .)
    close_parenthesis reduce using rule 51 (value -> functions .)
    and             reduce using rule 51 (value -> functions .)
    or              reduce using rule 51 (value -> functions .)
    is_equal        reduce using rule 51 (value -> functions .)
    is_not_equal    reduce using rule 51 (value -> functions .)
    greater_than    reduce using rule 51 (value -> functions .)
    greater_or_equal_than reduce using rule 51 (value -> functions .)
    less_than       reduce using rule 51 (value -> functions .)
    less_or_equal_than reduce using rule 51 (value -> functions .)
    to              reduce using rule 51 (value -> functions .)
    close_brackets  reduce using rule 51 (value -> functions .)
    step            reduce using rule 51 (value -> functions .)


state 47

    (52) value -> ids_access .

    sum             reduce using rule 52 (value -> ids_access .)
    substraction    reduce using rule 52 (value -> ids_access .)
    multiplication  reduce using rule 52 (value -> ids_access .)
    division        reduce using rule 52 (value -> ids_access .)
    exponent        reduce using rule 52 (value -> ids_access .)
    comma           reduce using rule 52 (value -> ids_access .)
    dim             reduce using rule 52 (value -> ids_access .)
    if              reduce using rule 52 (value -> ids_access .)
    while           reduce using rule 52 (value -> ids_access .)
    do              reduce using rule 52 (value -> ids_access .)
    for             reduce using rule 52 (value -> ids_access .)
    gosub           reduce using rule 52 (value -> ids_access .)
    dunkelCls       reduce using rule 52 (value -> ids_access .)
    let             reduce using rule 52 (value -> ids_access .)
    id              reduce using rule 52 (value -> ids_access .)
    dunkelPrint     reduce using rule 52 (value -> ids_access .)
    dunkelRead      reduce using rule 52 (value -> ids_access .)
    end             reduce using rule 52 (value -> ids_access .)
    loop            reduce using rule 52 (value -> ids_access .)
    wend            reduce using rule 52 (value -> ids_access .)
    return          reduce using rule 52 (value -> ids_access .)
    else            reduce using rule 52 (value -> ids_access .)
    elsif           reduce using rule 52 (value -> ids_access .)
    next            reduce using rule 52 (value -> ids_access .)
    close_parenthesis reduce using rule 52 (value -> ids_access .)
    and             reduce using rule 52 (value -> ids_access .)
    or              reduce using rule 52 (value -> ids_access .)
    is_equal        reduce using rule 52 (value -> ids_access .)
    is_not_equal    reduce using rule 52 (value -> ids_access .)
    greater_than    reduce using rule 52 (value -> ids_access .)
    greater_or_equal_than reduce using rule 52 (value -> ids_access .)
    less_than       reduce using rule 52 (value -> ids_access .)
    less_or_equal_than reduce using rule 52 (value -> ids_access .)
    to              reduce using rule 52 (value -> ids_access .)
    close_brackets  reduce using rule 52 (value -> ids_access .)
    step            reduce using rule 52 (value -> ids_access .)


state 48

    (58) real_value -> word_value . ACTION_ADD_WORD_VALUE
    (92) ACTION_ADD_WORD_VALUE -> .

    sum             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    substraction    reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    multiplication  reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    division        reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    exponent        reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    comma           reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    dim             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    if              reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    while           reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    do              reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    for             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    gosub           reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    dunkelCls       reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    let             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    id              reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    dunkelPrint     reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    dunkelRead      reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    end             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    loop            reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    wend            reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    return          reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    else            reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    elsif           reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    next            reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    close_parenthesis reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    and             reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    or              reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    is_equal        reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    is_not_equal    reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    greater_than    reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    greater_or_equal_than reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    less_than       reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    less_or_equal_than reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    to              reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    close_brackets  reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)
    step            reduce using rule 92 (ACTION_ADD_WORD_VALUE -> .)

    ACTION_ADD_WORD_VALUE          shift and go to state 79

state 49

    (59) real_value -> float_value . ACTION_ADD_FLOAT_VALUE
    (93) ACTION_ADD_FLOAT_VALUE -> .

    sum             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    substraction    reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    multiplication  reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    division        reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    exponent        reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    comma           reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    dim             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    if              reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    while           reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    do              reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    for             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    gosub           reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    let             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    id              reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    end             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    loop            reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    wend            reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    return          reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    else            reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    elsif           reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    next            reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    close_parenthesis reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    and             reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    or              reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    is_equal        reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    is_not_equal    reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_than    reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_or_equal_than reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    less_than       reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    less_or_equal_than reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    to              reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    close_brackets  reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)
    step            reduce using rule 93 (ACTION_ADD_FLOAT_VALUE -> .)

    ACTION_ADD_FLOAT_VALUE         shift and go to state 80

state 50

    (60) real_value -> id . ACTION_ADD_VAR_VALUE
    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (91) ACTION_ADD_VAR_VALUE -> .
    (97) ACTION_ADD_FUNCTION -> .

    open_brackets   reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    to              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    close_brackets  reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    step            reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 97 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 81
    ACTION_ADD_FUNCTION            shift and go to state 31

state 51

    (86) read -> dunkelRead multiple_read .
    (89) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 86 (read -> dunkelRead multiple_read .)
    if              reduce using rule 86 (read -> dunkelRead multiple_read .)
    while           reduce using rule 86 (read -> dunkelRead multiple_read .)
    do              reduce using rule 86 (read -> dunkelRead multiple_read .)
    for             reduce using rule 86 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 86 (read -> dunkelRead multiple_read .)
    dunkelCls       reduce using rule 86 (read -> dunkelRead multiple_read .)
    let             reduce using rule 86 (read -> dunkelRead multiple_read .)
    id              reduce using rule 86 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 86 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 86 (read -> dunkelRead multiple_read .)
    end             reduce using rule 86 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 86 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 86 (read -> dunkelRead multiple_read .)
    return          reduce using rule 86 (read -> dunkelRead multiple_read .)
    else            reduce using rule 86 (read -> dunkelRead multiple_read .)
    elsif           reduce using rule 86 (read -> dunkelRead multiple_read .)
    next            reduce using rule 86 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 82


state 52

    (87) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 83


state 53

    (88) multiple_read -> ids_access .

    comma           reduce using rule 88 (multiple_read -> ids_access .)
    dim             reduce using rule 88 (multiple_read -> ids_access .)
    if              reduce using rule 88 (multiple_read -> ids_access .)
    while           reduce using rule 88 (multiple_read -> ids_access .)
    do              reduce using rule 88 (multiple_read -> ids_access .)
    for             reduce using rule 88 (multiple_read -> ids_access .)
    gosub           reduce using rule 88 (multiple_read -> ids_access .)
    dunkelCls       reduce using rule 88 (multiple_read -> ids_access .)
    let             reduce using rule 88 (multiple_read -> ids_access .)
    id              reduce using rule 88 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 88 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 88 (multiple_read -> ids_access .)
    end             reduce using rule 88 (multiple_read -> ids_access .)
    loop            reduce using rule 88 (multiple_read -> ids_access .)
    wend            reduce using rule 88 (multiple_read -> ids_access .)
    return          reduce using rule 88 (multiple_read -> ids_access .)
    else            reduce using rule 88 (multiple_read -> ids_access .)
    elsif           reduce using rule 88 (multiple_read -> ids_access .)
    next            reduce using rule 88 (multiple_read -> ids_access .)


state 54

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 55

    (63) subroutines -> sub . procedure id inside_logic return subroutines
    (64) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 84
    function        shift and go to state 85


state 56

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 87
    float           shift and go to state 88
    bool            shift and go to state 89

    variable_type                  shift and go to state 86

state 57

    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis . close_parenthesis
    (74) functions -> id ACTION_ADD_FUNCTION open_parenthesis . arguments ACTION_ADD_PARAMETERS close_parenthesis
    (75) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (77) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 90
    ByVal           shift and go to state 92
    ByRef           shift and go to state 93

    arguments                      shift and go to state 91

state 58

    (34) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (57) ids_access -> open_parenthesis . ids_access close_parenthesis
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    id              shift and go to state 72
    word_value      shift and go to state 48
    float_value     shift and go to state 49

    logic_expression               shift and go to state 94
    ids_access                     shift and go to state 71
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 59

    (17) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs else inside_logic end if
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 95
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 60

    (26) logic_expression -> value .

    close_parenthesis reduce using rule 26 (logic_expression -> value .)
    sum             reduce using rule 26 (logic_expression -> value .)
    substraction    reduce using rule 26 (logic_expression -> value .)
    multiplication  reduce using rule 26 (logic_expression -> value .)
    division        reduce using rule 26 (logic_expression -> value .)
    exponent        reduce using rule 26 (logic_expression -> value .)
    and             reduce using rule 26 (logic_expression -> value .)
    or              reduce using rule 26 (logic_expression -> value .)
    is_equal        reduce using rule 26 (logic_expression -> value .)
    is_not_equal    reduce using rule 26 (logic_expression -> value .)
    greater_than    reduce using rule 26 (logic_expression -> value .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> value .)
    less_than       reduce using rule 26 (logic_expression -> value .)
    less_or_equal_than reduce using rule 26 (logic_expression -> value .)
    dim             reduce using rule 26 (logic_expression -> value .)
    if              reduce using rule 26 (logic_expression -> value .)
    while           reduce using rule 26 (logic_expression -> value .)
    do              reduce using rule 26 (logic_expression -> value .)
    for             reduce using rule 26 (logic_expression -> value .)
    gosub           reduce using rule 26 (logic_expression -> value .)
    dunkelCls       reduce using rule 26 (logic_expression -> value .)
    let             reduce using rule 26 (logic_expression -> value .)
    id              reduce using rule 26 (logic_expression -> value .)
    dunkelPrint     reduce using rule 26 (logic_expression -> value .)
    dunkelRead      reduce using rule 26 (logic_expression -> value .)
    end             reduce using rule 26 (logic_expression -> value .)
    loop            reduce using rule 26 (logic_expression -> value .)
    wend            reduce using rule 26 (logic_expression -> value .)
    return          reduce using rule 26 (logic_expression -> value .)
    else            reduce using rule 26 (logic_expression -> value .)
    elsif           reduce using rule 26 (logic_expression -> value .)
    next            reduce using rule 26 (logic_expression -> value .)


state 61

    (27) logic_expression -> not . value
    (31) logic_expression -> not . bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> not . ACTION_ADD_OPERATOR logic_expression
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (95) ACTION_ADD_OPERATOR -> .
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

  ! shift/reduce conflict for bool_value resolved as shift
  ! shift/reduce conflict for word_value resolved as shift
  ! shift/reduce conflict for float_value resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for open_parenthesis resolved as shift
    bool_value      shift and go to state 107
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

  ! bool_value      [ reduce using rule 95 (ACTION_ADD_OPERATOR -> .) ]
  ! open_parenthesis [ reduce using rule 95 (ACTION_ADD_OPERATOR -> .) ]
  ! word_value      [ reduce using rule 95 (ACTION_ADD_OPERATOR -> .) ]
  ! float_value     [ reduce using rule 95 (ACTION_ADD_OPERATOR -> .) ]
  ! id              [ reduce using rule 95 (ACTION_ADD_OPERATOR -> .) ]

    value                          shift and go to state 106
    ACTION_ADD_OPERATOR            shift and go to state 108
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 62

    (30) logic_expression -> bool_value . ACTION_ADD_BOOL_VALUE
    (94) ACTION_ADD_BOOL_VALUE -> .

    close_parenthesis reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    sum             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    substraction    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    multiplication  reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    division        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    exponent        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    and             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    or              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    is_equal        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    is_not_equal    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    greater_than    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    greater_or_equal_than reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    less_than       reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    less_or_equal_than reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dim             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    if              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    while           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    do              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    for             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    gosub           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelCls       reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    let             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    id              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelPrint     reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelRead      reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    end             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    loop            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    wend            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    return          reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    else            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    elsif           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    next            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)

    ACTION_ADD_BOOL_VALUE          shift and go to state 109

state 63

    (23) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 110
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 64

    (24) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 111


state 65

    (25) loops -> for id ACTION_ADD_FOR_VALUE . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 112


state 66

    (69) assign -> let ids_access equals . logic_expression
    (70) assign -> let ids_access equals . arithmetic_expression
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    ids_access                     shift and go to state 47
    logic_expression               shift and go to state 113
    arithmetic_expression          shift and go to state 114
    value                          shift and go to state 115
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 67

    (53) ids_access -> id ACTION_ADD_VAR_VALUE .
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

    equals          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116


state 68

    (57) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 117


state 69

    (85) multiple_print -> multiple_print comma . multiple_print
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 42
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    multiple_print                 shift and go to state 118
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 70

    (82) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (85) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 119
    comma           shift and go to state 69


state 71

    (57) ids_access -> open_parenthesis ids_access . close_parenthesis
    (52) value -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 117
    sum             reduce using rule 52 (value -> ids_access .)
    substraction    reduce using rule 52 (value -> ids_access .)
    multiplication  reduce using rule 52 (value -> ids_access .)
    division        reduce using rule 52 (value -> ids_access .)
    exponent        reduce using rule 52 (value -> ids_access .)
    comma           reduce using rule 52 (value -> ids_access .)
    and             reduce using rule 52 (value -> ids_access .)
    or              reduce using rule 52 (value -> ids_access .)
    is_equal        reduce using rule 52 (value -> ids_access .)
    is_not_equal    reduce using rule 52 (value -> ids_access .)
    greater_than    reduce using rule 52 (value -> ids_access .)
    greater_or_equal_than reduce using rule 52 (value -> ids_access .)
    less_than       reduce using rule 52 (value -> ids_access .)
    less_or_equal_than reduce using rule 52 (value -> ids_access .)

  ! close_parenthesis [ reduce using rule 52 (value -> ids_access .) ]


state 72

    (53) ids_access -> id . ACTION_ADD_VAR_VALUE
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (60) real_value -> id . ACTION_ADD_VAR_VALUE
    (73) functions -> id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (91) ACTION_ADD_VAR_VALUE -> .
    (97) ACTION_ADD_FUNCTION -> .

    open_brackets   reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 91 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 97 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 120
    ACTION_ADD_FUNCTION            shift and go to state 31

state 73

    (44) arithmetic_expression -> arithmetic_expression arithmetic_operator . value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 121
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 74

    (45) arithmetic_operator -> sum . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 122

state 75

    (46) arithmetic_operator -> substraction . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 123

state 76

    (47) arithmetic_operator -> multiplication . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 124

state 77

    (48) arithmetic_operator -> division . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 125

state 78

    (49) arithmetic_operator -> exponent . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 126

state 79

    (58) real_value -> word_value ACTION_ADD_WORD_VALUE .

    sum             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    substraction    reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    multiplication  reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    division        reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    exponent        reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    comma           reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dim             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    if              reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    while           reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    do              reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    for             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    gosub           reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelCls       reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    let             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    id              reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelPrint     reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelRead      reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    end             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    loop            reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    wend            reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    return          reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    else            reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    elsif           reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    next            reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_parenthesis reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    and             reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    or              reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_equal        reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_not_equal    reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_than    reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_or_equal_than reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_than       reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_or_equal_than reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    to              reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_brackets  reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    step            reduce using rule 58 (real_value -> word_value ACTION_ADD_WORD_VALUE .)


state 80

    (59) real_value -> float_value ACTION_ADD_FLOAT_VALUE .

    sum             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    substraction    reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    multiplication  reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    division        reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    exponent        reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    comma           reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dim             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    if              reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    while           reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    do              reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    for             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    gosub           reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelCls       reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    let             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    id              reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelPrint     reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelRead      reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    end             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    loop            reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    wend            reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    return          reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    else            reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    elsif           reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    next            reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_parenthesis reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    and             reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    or              reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_equal        reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_not_equal    reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_than    reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_or_equal_than reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_than       reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_or_equal_than reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    to              reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_brackets  reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    step            reduce using rule 59 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)


state 81

    (60) real_value -> id ACTION_ADD_VAR_VALUE .
    (53) ids_access -> id ACTION_ADD_VAR_VALUE .
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

  ! reduce/reduce conflict for sum resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dim resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for if resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for while resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for do resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for for resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for gosub resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for let resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for id resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for end resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for loop resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for wend resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for return resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for else resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for elsif resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for next resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for to resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_brackets resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for step resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    to              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_brackets  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    step            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116

  ! sum             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dim             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! if              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! while           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! do              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! for             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! gosub           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelCls       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! let             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! id              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelPrint     [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelRead      [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! end             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! loop            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! wend            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! return          [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! else            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! elsif           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! next            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! to              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_brackets  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! step            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 82

    (89) multiple_read -> multiple_read comma . ids_access
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 127

state 83

    (87) read -> dunkelRead string comma . multiple_read
    (88) multiple_read -> . ids_access
    (89) multiple_read -> . multiple_read comma ids_access
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 128
    ids_access                     shift and go to state 53

state 84

    (63) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 129


state 85

    (64) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 130


state 86

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelCls       reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    else            reduce using rule 10 (variable -> dim id as variable_type .)
    elsif           reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 131


state 87

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    dunkelCls       reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    else            reduce using rule 14 (variable_type -> word .)
    elsif           reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 88

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    dunkelCls       reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    else            reduce using rule 15 (variable_type -> float .)
    elsif           reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 89

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    dunkelCls       reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    else            reduce using rule 16 (variable_type -> bool .)
    elsif           reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 90

    (73) functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .

    dim             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    if              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    while           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    do              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    for             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    gosub           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelCls       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    let             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    id              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    end             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    loop            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    wend            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    return          reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    else            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    elsif           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    next            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    sum             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    substraction    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    division        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    exponent        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    comma           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    and             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    or              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    less_than       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    to              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)
    step            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis .)


state 91

    (74) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments . ACTION_ADD_PARAMETERS close_parenthesis
    (77) arguments -> arguments . comma arguments
    (98) ACTION_ADD_PARAMETERS -> .

    comma           shift and go to state 133
    close_parenthesis reduce using rule 98 (ACTION_ADD_PARAMETERS -> .)

    ACTION_ADD_PARAMETERS          shift and go to state 132

state 92

    (75) arguments -> ByVal . value ACTION_ADD_FUNCTION_OPERAND
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 134
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 93

    (76) arguments -> ByRef . id ACTION_ADD_FUNCTION_OPERAND

    id              shift and go to state 135


state 94

    (34) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 136
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 95

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs else inside_logic end if

    then            shift and go to state 137


state 96

    (28) logic_expression -> logic_expression arithmetic_operator . value
    (29) logic_expression -> logic_expression arithmetic_operator . not value
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 139
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 138
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 97

    (33) logic_expression -> logic_expression logic_operator . logic_expression ACTION_ADD_QUADRUPLET
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 140
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 98

    (35) logic_operator -> and . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 141

state 99

    (36) logic_operator -> or . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 142

state 100

    (37) logic_operator -> is_equal . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 143

state 101

    (38) logic_operator -> is_not_equal . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 144

state 102

    (39) logic_operator -> greater_than . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 145

state 103

    (40) logic_operator -> greater_or_equal_than . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 146

state 104

    (41) logic_operator -> less_than . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 147

state 105

    (42) logic_operator -> less_or_equal_than . ACTION_ADD_OPERATOR
    (95) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 95 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 95 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 148

state 106

    (27) logic_expression -> not value .

    close_parenthesis reduce using rule 27 (logic_expression -> not value .)
    sum             reduce using rule 27 (logic_expression -> not value .)
    substraction    reduce using rule 27 (logic_expression -> not value .)
    multiplication  reduce using rule 27 (logic_expression -> not value .)
    division        reduce using rule 27 (logic_expression -> not value .)
    exponent        reduce using rule 27 (logic_expression -> not value .)
    and             reduce using rule 27 (logic_expression -> not value .)
    or              reduce using rule 27 (logic_expression -> not value .)
    is_equal        reduce using rule 27 (logic_expression -> not value .)
    is_not_equal    reduce using rule 27 (logic_expression -> not value .)
    greater_than    reduce using rule 27 (logic_expression -> not value .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> not value .)
    less_than       reduce using rule 27 (logic_expression -> not value .)
    less_or_equal_than reduce using rule 27 (logic_expression -> not value .)
    dim             reduce using rule 27 (logic_expression -> not value .)
    if              reduce using rule 27 (logic_expression -> not value .)
    while           reduce using rule 27 (logic_expression -> not value .)
    do              reduce using rule 27 (logic_expression -> not value .)
    for             reduce using rule 27 (logic_expression -> not value .)
    gosub           reduce using rule 27 (logic_expression -> not value .)
    dunkelCls       reduce using rule 27 (logic_expression -> not value .)
    let             reduce using rule 27 (logic_expression -> not value .)
    id              reduce using rule 27 (logic_expression -> not value .)
    dunkelPrint     reduce using rule 27 (logic_expression -> not value .)
    dunkelRead      reduce using rule 27 (logic_expression -> not value .)
    end             reduce using rule 27 (logic_expression -> not value .)
    loop            reduce using rule 27 (logic_expression -> not value .)
    wend            reduce using rule 27 (logic_expression -> not value .)
    return          reduce using rule 27 (logic_expression -> not value .)
    else            reduce using rule 27 (logic_expression -> not value .)
    elsif           reduce using rule 27 (logic_expression -> not value .)
    next            reduce using rule 27 (logic_expression -> not value .)


state 107

    (31) logic_expression -> not bool_value . ACTION_ADD_BOOL_VALUE
    (94) ACTION_ADD_BOOL_VALUE -> .

    close_parenthesis reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    sum             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    substraction    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    multiplication  reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    division        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    exponent        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    and             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    or              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    is_equal        reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    is_not_equal    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    greater_than    reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    greater_or_equal_than reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    less_than       reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    less_or_equal_than reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dim             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    if              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    while           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    do              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    for             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    gosub           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelCls       reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    let             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    id              reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelPrint     reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelRead      reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    end             reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    loop            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    wend            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    return          reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    else            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    elsif           reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)
    next            reduce using rule 94 (ACTION_ADD_BOOL_VALUE -> .)

    ACTION_ADD_BOOL_VALUE          shift and go to state 149

state 108

    (32) logic_expression -> not ACTION_ADD_OPERATOR . logic_expression
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 150
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 109

    (30) logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .

    close_parenthesis reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    sum             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    substraction    reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    multiplication  reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    division        reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    exponent        reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    and             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    or              reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_equal        reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_not_equal    reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_than    reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_or_equal_than reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_than       reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_or_equal_than reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dim             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    if              reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    while           reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    do              reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    for             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    gosub           reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelCls       reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    let             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    id              reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelPrint     reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelRead      reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    end             reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    loop            reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    wend            reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    return          reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    else            reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    elsif           reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    next            reduce using rule 30 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)


state 110

    (23) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 151
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 111

    (24) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 152


state 112

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 153
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 113

    (69) assign -> let ids_access equals logic_expression .
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    dim             reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    if              reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    while           reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    do              reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    for             reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    gosub           reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    dunkelCls       reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    let             reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    id              reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    dunkelPrint     reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    dunkelRead      reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    end             reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    loop            reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    wend            reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    return          reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    else            reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    elsif           reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    next            reduce using rule 69 (assign -> let ids_access equals logic_expression .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 114

    (70) assign -> let ids_access equals arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    dim             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    if              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    while           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    do              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    for             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    gosub           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    dunkelCls       reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    let             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    id              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    dunkelPrint     reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    dunkelRead      reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    end             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    loop            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    wend            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    return          reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    else            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    elsif           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    next            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 115

    (26) logic_expression -> value .
    (43) arithmetic_expression -> value .

  ! reduce/reduce conflict for sum resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for substraction resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for multiplication resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for division resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for exponent resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for dim resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for if resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for while resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for do resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for for resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for gosub resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for let resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for id resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for end resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for loop resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for wend resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for return resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for else resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for elsif resolved using rule 26 (logic_expression -> value .)
  ! reduce/reduce conflict for next resolved using rule 26 (logic_expression -> value .)
    sum             reduce using rule 26 (logic_expression -> value .)
    substraction    reduce using rule 26 (logic_expression -> value .)
    multiplication  reduce using rule 26 (logic_expression -> value .)
    division        reduce using rule 26 (logic_expression -> value .)
    exponent        reduce using rule 26 (logic_expression -> value .)
    and             reduce using rule 26 (logic_expression -> value .)
    or              reduce using rule 26 (logic_expression -> value .)
    is_equal        reduce using rule 26 (logic_expression -> value .)
    is_not_equal    reduce using rule 26 (logic_expression -> value .)
    greater_than    reduce using rule 26 (logic_expression -> value .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> value .)
    less_than       reduce using rule 26 (logic_expression -> value .)
    less_or_equal_than reduce using rule 26 (logic_expression -> value .)
    dim             reduce using rule 26 (logic_expression -> value .)
    if              reduce using rule 26 (logic_expression -> value .)
    while           reduce using rule 26 (logic_expression -> value .)
    do              reduce using rule 26 (logic_expression -> value .)
    for             reduce using rule 26 (logic_expression -> value .)
    gosub           reduce using rule 26 (logic_expression -> value .)
    dunkelCls       reduce using rule 26 (logic_expression -> value .)
    let             reduce using rule 26 (logic_expression -> value .)
    id              reduce using rule 26 (logic_expression -> value .)
    dunkelPrint     reduce using rule 26 (logic_expression -> value .)
    dunkelRead      reduce using rule 26 (logic_expression -> value .)
    end             reduce using rule 26 (logic_expression -> value .)
    loop            reduce using rule 26 (logic_expression -> value .)
    wend            reduce using rule 26 (logic_expression -> value .)
    return          reduce using rule 26 (logic_expression -> value .)
    else            reduce using rule 26 (logic_expression -> value .)
    elsif           reduce using rule 26 (logic_expression -> value .)
    next            reduce using rule 26 (logic_expression -> value .)

  ! sum             [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! substraction    [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! multiplication  [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! division        [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! exponent        [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! dim             [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! if              [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! while           [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! do              [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! for             [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! gosub           [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! dunkelCls       [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! let             [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! id              [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! dunkelPrint     [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! dunkelRead      [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! end             [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! loop            [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! wend            [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! return          [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! else            [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! elsif           [ reduce using rule 43 (arithmetic_expression -> value .) ]
  ! next            [ reduce using rule 43 (arithmetic_expression -> value .) ]


state 116

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 154
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 117

    (57) ids_access -> open_parenthesis ids_access close_parenthesis .

    equals          reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    comma           reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelCls       reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    else            reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    elsif           reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 57 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 118

    (85) multiple_print -> multiple_print comma multiple_print .
    (85) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelCls       reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    else            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    elsif           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 69

  ! comma           [ reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .) ]


state 119

    (82) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelCls       reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    let             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    else            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    elsif           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 120

    (53) ids_access -> id ACTION_ADD_VAR_VALUE .
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (60) real_value -> id ACTION_ADD_VAR_VALUE .

  ! reduce/reduce conflict for sum resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116

  ! sum             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 121

    (44) arithmetic_expression -> arithmetic_expression arithmetic_operator value . ACTION_ADD_QUADRUPLET
    (100) ACTION_ADD_QUADRUPLET -> .

    sum             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    substraction    reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    multiplication  reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    division        reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    exponent        reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    close_parenthesis reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    to              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    close_brackets  reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    step            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 155

state 122

    (45) arithmetic_operator -> sum ACTION_ADD_OPERATOR .

    word_value      reduce using rule 45 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 45 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    id              reduce using rule 45 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 45 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    not             reduce using rule 45 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)


state 123

    (46) arithmetic_operator -> substraction ACTION_ADD_OPERATOR .

    word_value      reduce using rule 46 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 46 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    id              reduce using rule 46 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 46 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    not             reduce using rule 46 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)


state 124

    (47) arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .

    word_value      reduce using rule 47 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 47 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    id              reduce using rule 47 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 47 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    not             reduce using rule 47 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)


state 125

    (48) arithmetic_operator -> division ACTION_ADD_OPERATOR .

    word_value      reduce using rule 48 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 48 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    id              reduce using rule 48 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 48 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    not             reduce using rule 48 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)


state 126

    (49) arithmetic_operator -> exponent ACTION_ADD_OPERATOR .

    word_value      reduce using rule 49 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 49 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    id              reduce using rule 49 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 49 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    not             reduce using rule 49 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)


state 127

    (89) multiple_read -> multiple_read comma ids_access .

    comma           reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    dim             reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    if              reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    while           reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    do              reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    for             reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    gosub           reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    dunkelCls       reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    let             reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    id              reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    dunkelPrint     reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    dunkelRead      reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    end             reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    loop            reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    wend            reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    return          reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    else            reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    elsif           reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)
    next            reduce using rule 89 (multiple_read -> multiple_read comma ids_access .)


state 128

    (87) read -> dunkelRead string comma multiple_read .
    (89) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    dunkelCls       reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    let             reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    else            reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    elsif           reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 87 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 82


state 129

    (63) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 156
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 130

    (64) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 157


state 131

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 158


state 132

    (74) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS . close_parenthesis

    close_parenthesis shift and go to state 159


state 133

    (77) arguments -> arguments comma . arguments
    (75) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (77) arguments -> . arguments comma arguments

    ByVal           shift and go to state 92
    ByRef           shift and go to state 93

    arguments                      shift and go to state 160

state 134

    (75) arguments -> ByVal value . ACTION_ADD_FUNCTION_OPERAND
    (96) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 96 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 96 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 161

state 135

    (76) arguments -> ByRef id . ACTION_ADD_FUNCTION_OPERAND
    (96) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 96 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 96 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 162

state 136

    (34) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    sum             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    substraction    reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    multiplication  reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    division        reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    exponent        reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 34 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 137

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs else inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 163
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 138

    (28) logic_expression -> logic_expression arithmetic_operator value .

    close_parenthesis reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    sum             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    substraction    reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    multiplication  reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    division        reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    exponent        reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    and             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    or              reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    is_equal        reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    is_not_equal    reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    greater_than    reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    greater_or_equal_than reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    less_than       reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    less_or_equal_than reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    dim             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    if              reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    while           reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    do              reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    for             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    gosub           reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    dunkelCls       reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    let             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    id              reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    dunkelPrint     reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    dunkelRead      reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    end             reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    loop            reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    wend            reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    return          reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    else            reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    elsif           reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)
    next            reduce using rule 28 (logic_expression -> logic_expression arithmetic_operator value .)


state 139

    (29) logic_expression -> logic_expression arithmetic_operator not . value
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 164
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 140

    (33) logic_expression -> logic_expression logic_operator logic_expression . ACTION_ADD_QUADRUPLET
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (100) ACTION_ADD_QUADRUPLET -> .
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for sum resolved as shift
  ! shift/reduce conflict for substraction resolved as shift
  ! shift/reduce conflict for multiplication resolved as shift
  ! shift/reduce conflict for division resolved as shift
  ! shift/reduce conflict for exponent resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

  ! sum             [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! substraction    [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! multiplication  [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! division        [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! exponent        [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! and             [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! or              [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_equal        [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_not_equal    [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_than    [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_or_equal_than [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_than       [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_or_equal_than [ reduce using rule 100 (ACTION_ADD_QUADRUPLET -> .) ]

    logic_operator                 shift and go to state 97
    ACTION_ADD_QUADRUPLET          shift and go to state 165
    arithmetic_operator            shift and go to state 96

state 141

    (35) logic_operator -> and ACTION_ADD_OPERATOR .

    not             reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)
    id              reduce using rule 35 (logic_operator -> and ACTION_ADD_OPERATOR .)


state 142

    (36) logic_operator -> or ACTION_ADD_OPERATOR .

    not             reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)
    id              reduce using rule 36 (logic_operator -> or ACTION_ADD_OPERATOR .)


state 143

    (37) logic_operator -> is_equal ACTION_ADD_OPERATOR .

    not             reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 37 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)


state 144

    (38) logic_operator -> is_not_equal ACTION_ADD_OPERATOR .

    not             reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 38 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)


state 145

    (39) logic_operator -> greater_than ACTION_ADD_OPERATOR .

    not             reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 39 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)


state 146

    (40) logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .

    not             reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 40 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)


state 147

    (41) logic_operator -> less_than ACTION_ADD_OPERATOR .

    not             reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 41 (logic_operator -> less_than ACTION_ADD_OPERATOR .)


state 148

    (42) logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .

    not             reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 42 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)


state 149

    (31) logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .

    close_parenthesis reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    sum             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    substraction    reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    multiplication  reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    division        reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    exponent        reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    and             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    or              reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    is_equal        reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    is_not_equal    reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    greater_than    reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    greater_or_equal_than reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    less_than       reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    less_or_equal_than reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    dim             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    if              reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    while           reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    do              reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    for             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    gosub           reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelCls       reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    let             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    id              reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelPrint     reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelRead      reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    end             reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    loop            reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    wend            reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    return          reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    else            reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    elsif           reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)
    next            reduce using rule 31 (logic_expression -> not bool_value ACTION_ADD_BOOL_VALUE .)


state 150

    (32) logic_expression -> not ACTION_ADD_OPERATOR logic_expression .
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for sum resolved as shift
  ! shift/reduce conflict for substraction resolved as shift
  ! shift/reduce conflict for multiplication resolved as shift
  ! shift/reduce conflict for division resolved as shift
  ! shift/reduce conflict for exponent resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dim             reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    if              reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    while           reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    do              reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    for             reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    gosub           reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelCls       reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    let             reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    id              reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelPrint     reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelRead      reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    end             reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    loop            reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    wend            reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    return          reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    else            reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    elsif           reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    next            reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

  ! sum             [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! substraction    [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! multiplication  [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! division        [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! exponent        [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! and             [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! or              [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! is_equal        [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! is_not_equal    [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! greater_than    [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! less_than       [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 32 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 151

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 166


state 152

    (24) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 167
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 153

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    to              shift and go to state 168
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 154

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 169
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 155

    (44) arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .

    sum             reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_parenthesis reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    to              reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_brackets  reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    step            reduce using rule 44 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)


state 156

    (63) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 170


state 157

    (64) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (71) parameters -> . variable
    (72) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 171
    dim             shift and go to state 9

    parameters                     shift and go to state 172
    variable                       shift and go to state 173

state 158

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 174


state 159

    (74) functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .

    dim             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    if              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    while           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    do              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    for             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    gosub           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelCls       reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    let             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    id              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelPrint     reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelRead      reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    end             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    loop            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    wend            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    return          reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    else            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    elsif           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    next            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    sum             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    substraction    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    multiplication  reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    division        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    exponent        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    comma           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_parenthesis reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    and             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    or              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_equal        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_not_equal    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_than    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_or_equal_than reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_than       reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_or_equal_than reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    to              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_brackets  reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    step            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)


state 160

    (77) arguments -> arguments comma arguments .
    (77) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 77 (arguments -> arguments comma arguments .)
    comma           shift and go to state 133

  ! comma           [ reduce using rule 77 (arguments -> arguments comma arguments .) ]


state 161

    (75) arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 75 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 75 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)


state 162

    (76) arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 76 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 76 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)


state 163

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs else inside_logic end if
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 175
    else            shift and go to state 176
    elsif           shift and go to state 178

    else_ifs                       shift and go to state 177

state 164

    (29) logic_expression -> logic_expression arithmetic_operator not value .

    close_parenthesis reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    sum             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    substraction    reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    multiplication  reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    division        reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    exponent        reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    and             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    or              reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    is_equal        reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    is_not_equal    reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    greater_than    reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    greater_or_equal_than reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    less_than       reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    less_or_equal_than reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    dim             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    if              reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    while           reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    do              reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    for             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    gosub           reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    dunkelCls       reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    let             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    id              reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    dunkelPrint     reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    dunkelRead      reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    end             reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    loop            reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    wend            reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    return          reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    else            reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    elsif           reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)
    next            reduce using rule 29 (logic_expression -> logic_expression arithmetic_operator not value .)


state 165

    (33) logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .

    close_parenthesis reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    sum             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 33 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)


state 166

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelCls       reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    let             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    else            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    elsif           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 167

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 179
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 168

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 180
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 169

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (101) ACTION_ADD_ONE_DIM_OPERAND -> .

    open_brackets   shift and go to state 181
    equals          reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    sum             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    substraction    reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    multiplication  reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    division        reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    exponent        reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    comma           reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dim             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    if              reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    while           reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    do              reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    for             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    gosub           reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    let             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    id              reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    end             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    loop            reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    wend            reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    return          reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    else            reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    elsif           reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    next            reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    and             reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    or              reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_equal        reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_than    reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_than       reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    to              reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    step            reduce using rule 101 (ACTION_ADD_ONE_DIM_OPERAND -> .)

    ACTION_ADD_ONE_DIM_OPERAND     shift and go to state 182

state 170

    (63) subroutines -> sub procedure id inside_logic return . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 183

state 171

    (64) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (66) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 185
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 184
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 172

    (65) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (67) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (72) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 186
    comma           shift and go to state 187


state 173

    (71) parameters -> variable .

    close_parenthesis reduce using rule 71 (parameters -> variable .)
    comma           reduce using rule 71 (parameters -> variable .)


state 174

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    else            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    elsif           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 188


state 175

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end . if

    if              shift and go to state 189


state 176

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 190
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 177

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . else inside_logic end if
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 192
    else            shift and go to state 193
    elsif           shift and go to state 178

    else_ifs                       shift and go to state 191

state 178

    (21) else_ifs -> elsif . open_parenthesis logic_expression close_parenthesis then inside_logic

    open_parenthesis shift and go to state 194


state 179

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 180

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    step            shift and go to state 195
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 181

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 196
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 182

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .

    equals          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    sum             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    substraction    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    multiplication  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    division        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    exponent        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    comma           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dim             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    if              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    while           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    do              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    for             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    gosub           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelCls       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    let             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    id              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelRead      reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    end             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    loop            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    wend            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    return          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    else            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    elsif           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    next            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_parenthesis reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    and             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    or              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_equal        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_not_equal    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_than    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_than       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    to              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_brackets  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    step            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)


state 183

    (63) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 63 (subroutines -> sub procedure id inside_logic return subroutines .)


state 184

    (64) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 197


state 185

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 87
    float           shift and go to state 88
    bool            shift and go to state 89

    variable_type                  shift and go to state 198

state 186

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 200
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 199
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 187

    (72) parameters -> parameters comma . parameters
    (71) parameters -> . variable
    (72) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 201
    variable                       shift and go to state 173

state 188

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 202


state 189

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .

    dim             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    if              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    while           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    do              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    for             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    gosub           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelCls       reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    let             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    id              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelPrint     reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelRead      reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    end             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    loop            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    wend            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    return          reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    else            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    elsif           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    next            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)


state 190

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic . end if

    end             shift and go to state 203


state 191

    (22) else_ifs -> else_ifs else_ifs .
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

  ! shift/reduce conflict for elsif resolved as shift
    end             reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    else            reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    elsif           shift and go to state 178

  ! elsif           [ reduce using rule 22 (else_ifs -> else_ifs else_ifs .) ]

    else_ifs                       shift and go to state 191

state 192

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end . if

    if              shift and go to state 204


state 193

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 205
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 194

    (21) else_ifs -> elsif open_parenthesis . logic_expression close_parenthesis then inside_logic
    (26) logic_expression -> . value
    (27) logic_expression -> . not value
    (28) logic_expression -> . logic_expression arithmetic_operator value
    (29) logic_expression -> . logic_expression arithmetic_operator not value
    (30) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (31) logic_expression -> . not bool_value ACTION_ADD_BOOL_VALUE
    (32) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (33) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (34) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 61
    bool_value      shift and go to state 62
    open_parenthesis shift and go to state 58
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 206
    value                          shift and go to state 60
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 195

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 207
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 196

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 208
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 197

    (64) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 209


state 198

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 210
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 199

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 211


state 200

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 87
    float           shift and go to state 88
    bool            shift and go to state 89

    variable_type                  shift and go to state 212

state 201

    (72) parameters -> parameters comma parameters .
    (72) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 72 (parameters -> parameters comma parameters .)
    comma           shift and go to state 187

  ! comma           [ reduce using rule 72 (parameters -> parameters comma parameters .) ]


state 202

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 213


state 203

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end . if

    if              shift and go to state 214


state 204

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .

    dim             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    if              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    while           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    do              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    for             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    gosub           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelCls       reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    let             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    id              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelPrint     reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelRead      reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    end             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    loop            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    wend            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    return          reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    else            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    elsif           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    next            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)


state 205

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic . end if

    end             shift and go to state 215


state 206

    (21) else_ifs -> elsif open_parenthesis logic_expression . close_parenthesis then inside_logic
    (28) logic_expression -> logic_expression . arithmetic_operator value
    (29) logic_expression -> logic_expression . arithmetic_operator not value
    (33) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (35) logic_operator -> . and ACTION_ADD_OPERATOR
    (36) logic_operator -> . or ACTION_ADD_OPERATOR
    (37) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (38) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (39) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (40) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (41) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (42) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 216
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    and             shift and go to state 98
    or              shift and go to state 99
    is_equal        shift and go to state 100
    is_not_equal    shift and go to state 101
    greater_than    shift and go to state 102
    greater_or_equal_than shift and go to state 103
    less_than       shift and go to state 104
    less_or_equal_than shift and go to state 105

    arithmetic_operator            shift and go to state 96
    logic_operator                 shift and go to state 97

state 207

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 9 (inside_logic -> .)
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 217
    arithmetic_operator            shift and go to state 73
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 208

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (102) ACTION_ADD_TWO_DIM_OPERAND -> .

    open_brackets   shift and go to state 218
    equals          reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    sum             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    substraction    reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    multiplication  reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    division        reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    exponent        reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    comma           reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dim             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    if              reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    while           reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    do              reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    for             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    gosub           reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    let             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    id              reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    end             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    loop            reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    wend            reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    return          reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    else            reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    elsif           reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    next            reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    and             reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    or              reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_equal        reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_than    reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_than       reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    to              reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_brackets  reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    step            reduce using rule 102 (ACTION_ADD_TWO_DIM_OPERAND -> .)

    ACTION_ADD_TWO_DIM_OPERAND     shift and go to state 219

state 209

    (64) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 220

state 210

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 221


state 211

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 222


state 212

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 223
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 213

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 224


state 214

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .

    dim             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    if              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    while           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    do              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    for             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    gosub           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelCls       reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    let             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    id              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelPrint     reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelRead      reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    end             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    loop            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    wend            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    return          reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    else            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    elsif           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    next            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)


state 215

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end . if

    if              shift and go to state 225


state 216

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis . then inside_logic

    then            shift and go to state 226


state 217

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 227


state 218

    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (43) arithmetic_expression -> . value
    (44) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (50) value -> . real_value
    (51) value -> . functions
    (52) value -> . ids_access
    (58) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (59) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (56) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 228
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 219

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .

    equals          reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    sum             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    substraction    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    multiplication  reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    division        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    exponent        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    comma           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dim             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    if              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    while           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    do              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    for             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    gosub           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelCls       reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    let             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    id              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelPrint     reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelRead      reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    end             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    loop            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    wend            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    return          reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    else            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    elsif           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    next            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_parenthesis reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    and             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    or              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_equal        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_not_equal    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_than    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_than       reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_or_equal_than reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    to              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_brackets  reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    step            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)


state 220

    (64) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 64 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 221

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 229


state 222

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 230

state 223

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 231


state 224

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 232


state 225

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .

    dim             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    if              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    while           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    do              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    for             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    gosub           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelCls       reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    let             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    id              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelPrint     reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelRead      reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    end             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    loop            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    wend            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    return          reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    else            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    elsif           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    next            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)


state 226

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (61) calls -> . gosub id
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression
    (70) assign -> . let ids_access equals arithmetic_expression
    (73) functions -> . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (86) read -> . dunkelRead multiple_read
    (87) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 233
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 227

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 234


state 228

    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (44) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (45) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (47) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (48) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (49) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 235
    sum             shift and go to state 74
    substraction    shift and go to state 75
    multiplication  shift and go to state 76
    division        shift and go to state 77
    exponent        shift and go to state 78

    arithmetic_operator            shift and go to state 73

state 229

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 236

state 230

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 65 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 231

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 237


state 232

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 238


state 233

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .

    end             reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    else            reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    elsif           reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)


state 234

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelCls       reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    let             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    else            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    elsif           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 235

    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_THREE_DIM_OPERAND
    (103) ACTION_ADD_THREE_DIM_OPERAND -> .

    equals          reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    sum             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    substraction    reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    multiplication  reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    division        reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    exponent        reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    comma           reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dim             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    if              reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    while           reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    do              reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    for             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    gosub           reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    let             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    id              reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    end             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    loop            reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    wend            reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    return          reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    else            reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    elsif           reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    next            reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    and             reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    or              reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_equal        reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_than    reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_than       reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    to              reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    step            reduce using rule 103 (ACTION_ADD_THREE_DIM_OPERAND -> .)

    ACTION_ADD_THREE_DIM_OPERAND   shift and go to state 239

state 236

    (66) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 66 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 237

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (63) subroutines -> . sub procedure id inside_logic return subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (66) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (67) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 240

state 238

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 239

    (56) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .

    equals          reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    sum             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    substraction    reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    multiplication  reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    division        reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    exponent        reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    comma           reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dim             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    if              reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    while           reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    do              reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    for             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    gosub           reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelCls       reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    let             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    id              reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelRead      reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    end             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    loop            reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    wend            reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    return          reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    else            reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    elsif           reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    next            reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_parenthesis reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    and             reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    or              reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_equal        reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_not_equal    reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_than    reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_than       reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    to              reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_brackets  reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    step            reduce using rule 56 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)


state 240

    (67) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 67 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for bool_value in state 61 resolved as shift
WARNING: shift/reduce conflict for word_value in state 61 resolved as shift
WARNING: shift/reduce conflict for float_value in state 61 resolved as shift
WARNING: shift/reduce conflict for id in state 61 resolved as shift
WARNING: shift/reduce conflict for open_parenthesis in state 61 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 71 resolved as shift
WARNING: shift/reduce conflict for comma in state 118 resolved as shift
WARNING: shift/reduce conflict for sum in state 140 resolved as shift
WARNING: shift/reduce conflict for substraction in state 140 resolved as shift
WARNING: shift/reduce conflict for multiplication in state 140 resolved as shift
WARNING: shift/reduce conflict for division in state 140 resolved as shift
WARNING: shift/reduce conflict for exponent in state 140 resolved as shift
WARNING: shift/reduce conflict for and in state 140 resolved as shift
WARNING: shift/reduce conflict for or in state 140 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 140 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 140 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 140 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 140 resolved as shift
WARNING: shift/reduce conflict for less_than in state 140 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 140 resolved as shift
WARNING: shift/reduce conflict for sum in state 150 resolved as shift
WARNING: shift/reduce conflict for substraction in state 150 resolved as shift
WARNING: shift/reduce conflict for multiplication in state 150 resolved as shift
WARNING: shift/reduce conflict for division in state 150 resolved as shift
WARNING: shift/reduce conflict for exponent in state 150 resolved as shift
WARNING: shift/reduce conflict for and in state 150 resolved as shift
WARNING: shift/reduce conflict for or in state 150 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 150 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 150 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 150 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 150 resolved as shift
WARNING: shift/reduce conflict for less_than in state 150 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 150 resolved as shift
WARNING: shift/reduce conflict for comma in state 160 resolved as shift
WARNING: shift/reduce conflict for elsif in state 191 resolved as shift
WARNING: shift/reduce conflict for comma in state 201 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 23
WARNING: reduce/reduce conflict in state 81 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 81
WARNING: reduce/reduce conflict in state 115 resolved using rule (logic_expression -> value)
WARNING: rejected rule (arithmetic_expression -> value) in state 115
WARNING: reduce/reduce conflict in state 120 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 120
WARNING: Rule (real_value -> id ACTION_ADD_VAR_VALUE) is never reduced
