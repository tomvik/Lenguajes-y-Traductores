Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
Rule 18    conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
Rule 19    conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
Rule 20    conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF
Rule 21    conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
Rule 22    else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
Rule 23    else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
Rule 24    loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
Rule 25    loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
Rule 26    loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
Rule 27    logic_expression -> arithmetic_expression
Rule 28    logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
Rule 29    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 30    logic_operator -> and ACTION_ADD_OPERATOR
Rule 31    logic_operator -> or ACTION_ADD_OPERATOR
Rule 32    logic_operator -> is_equal ACTION_ADD_OPERATOR
Rule 33    logic_operator -> is_not_equal ACTION_ADD_OPERATOR
Rule 34    logic_operator -> greater_than ACTION_ADD_OPERATOR
Rule 35    logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR
Rule 36    logic_operator -> less_than ACTION_ADD_OPERATOR
Rule 37    logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR
Rule 38    arithmetic_expression -> value
Rule 39    arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
Rule 40    arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis
Rule 41    arithmetic_operator -> sum ACTION_ADD_OPERATOR
Rule 42    arithmetic_operator -> substraction ACTION_ADD_OPERATOR
Rule 43    arithmetic_operator -> multiplication ACTION_ADD_OPERATOR
Rule 44    arithmetic_operator -> division ACTION_ADD_OPERATOR
Rule 45    arithmetic_operator -> exponent ACTION_ADD_OPERATOR
Rule 46    possible_values -> real_value
Rule 47    possible_values -> functions
Rule 48    possible_values -> ids_access
Rule 49    value -> possible_values
Rule 50    value -> not possible_values ACTION_ADD_NOT_OPERAND
Rule 51    value -> open_parenthesis value close_parenthesis
Rule 52    ids_access -> id ACTION_ADD_VAR_VALUE
Rule 53    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
Rule 54    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
Rule 55    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
Rule 56    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 57    real_value -> word_value ACTION_ADD_WORD_VALUE
Rule 58    real_value -> float_value ACTION_ADD_FLOAT_VALUE
Rule 59    real_value -> bool_value ACTION_ADD_BOOL_VALUE
Rule 60    real_value -> id ACTION_ADD_VAR_VALUE
Rule 61    calls -> gosub id ACTION_ADD_SUBROUTINE_CALL
Rule 62    calls -> functions
Rule 63    subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
Rule 64    subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
Rule 65    subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
Rule 66    subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
Rule 67    subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
Rule 68    subroutines -> <empty>
Rule 69    assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE
Rule 70    assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
Rule 71    parameters -> variable
Rule 72    parameters -> parameters comma parameters
Rule 73    functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
Rule 74    functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
Rule 75    arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND
Rule 76    arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND
Rule 77    arguments -> arguments comma arguments
Rule 78    read_or_write -> print
Rule 79    read_or_write -> read
Rule 80    read_or_write -> dunkelCls
Rule 81    print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE
Rule 82    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
Rule 83    multiple_print -> string
Rule 84    multiple_print -> arithmetic_expression
Rule 85    multiple_print -> multiple_print comma multiple_print
Rule 86    read -> dunkelRead possible_read ACTION_CONSOLE_READ
Rule 87    possible_read -> string comma multiple_read
Rule 88    possible_read -> multiple_read
Rule 89    multiple_read -> ids_access
Rule 90    multiple_read -> multiple_read comma ids_access
Rule 91    ACTION_ADD_FOR_VALUE -> <empty>
Rule 92    ACTION_ADD_VAR_VALUE -> <empty>
Rule 93    ACTION_ADD_WORD_VALUE -> <empty>
Rule 94    ACTION_ADD_FLOAT_VALUE -> <empty>
Rule 95    ACTION_ADD_BOOL_VALUE -> <empty>
Rule 96    ACTION_ADD_OPERATOR -> <empty>
Rule 97    ACTION_ADD_FUNCTION_OPERAND -> <empty>
Rule 98    ACTION_ADD_FUNCTION_CALL -> <empty>
Rule 99    ACTION_ADD_SUBROUTINE_CALL -> <empty>
Rule 100   ACTION_ADD_FUNCTION -> <empty>
Rule 101   ACTION_ADD_PROCEDURE -> <empty>
Rule 102   ACTION_ADD_END_FUNCTION -> <empty>
Rule 103   ACTION_ASSIGN_VALUE -> <empty>
Rule 104   ACTION_ADD_PARAMETERS -> <empty>
Rule 105   ACTION_ADD_NOT_OPERAND -> <empty>
Rule 106   ACTION_ADD_QUADRUPLET -> <empty>
Rule 107   ACTION_ADD_ONE_DIM_OPERAND -> <empty>
Rule 108   ACTION_ADD_TWO_DIM_OPERAND -> <empty>
Rule 109   ACTION_ADD_THREE_DIM_OPERAND -> <empty>
Rule 110   ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> <empty>
Rule 111   ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> <empty>
Rule 112   ACTION_NEW_IF -> <empty>
Rule 113   ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> <empty>
Rule 114   ACTION_FILL_JUMP -> <empty>
Rule 115   ACTION_FILL_JUMP_END_IF -> <empty>
Rule 116   ACTION_FOR_JUMP_BACK -> <empty>
Rule 117   ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP -> <empty>
Rule 118   ACTION_FOR_INCREMENT -> <empty>
Rule 119   ACTION_FOR_GOTO -> <empty>
Rule 120   ACTION_WHILE_GOTO -> <empty>
Rule 121   ACTION_DO_WHILE_INDEX -> <empty>
Rule 122   ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> <empty>
Rule 123   ACTION_CONSOLE_WRITE -> <empty>
Rule 124   ACTION_CONSOLE_READ -> <empty>

Terminals, with rules where they appear

ByRef                : 76
ByVal                : 75
and                  : 30
as                   : 10 11 12 13 66 67
bool                 : 16
bool_value           : 59
close_braces         : 
close_brackets       : 11 12 12 13 13 13 53 54 54 55 55 55
close_parenthesis    : 17 22 23 24 25 29 40 51 56 64 65 66 67 73 74 82
colon                : 
comma                : 72 77 85 87 90
dim                  : 10 11 12 13
division             : 44
do                   : 25
dunkelCls            : 80
dunkelPrint          : 81 82
dunkelRead           : 86
else                 : 19 21
elsif                : 22 23
end                  : 1 2 18 19 20 21 64 65 66 67
end_if               : 
equals               : 26 69 70
error                : 
exit                 : 
exponent             : 45
false                : 
float                : 15
float_value          : 58
for                  : 26
function             : 64 65 66 67
gosub                : 61
goto                 : 
greater_or_equal_than : 35
greater_than         : 34
id                   : 10 11 12 13 26 26 52 53 54 55 60 61 63 64 65 66 67 73 74 76
if                   : 17 18 19 20 21
is_equal             : 32
is_not_equal         : 33
less_or_equal_than   : 37
less_than            : 36
let                  : 69 70
loop                 : 25
multiplication       : 43
next                 : 26
not                  : 50
open_braces          : 
open_brackets        : 11 12 12 13 13 13 53 54 54 55 55 55
open_parenthesis     : 17 22 23 24 25 29 40 51 56 64 65 66 67 73 74 82
or                   : 31
procedure            : 63
return               : 63
semicolon            : 
step                 : 26
string               : 83 87
sub                  : 63 64 64 65 65 66 66 67 67
substraction         : 42
sum                  : 41
then                 : 17 22 23
to                   : 26
true                 : 
until                : 25
wend                 : 24
while                : 24
word                 : 14
word_value           : 11 12 12 13 13 13 57

Nonterminals, with rules where they appear

ACTION_ADD_BOOL_VALUE : 59
ACTION_ADD_END_FUNCTION : 63 64 65 66 67
ACTION_ADD_FLOAT_VALUE : 58
ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP : 26
ACTION_ADD_FOR_VALUE : 26
ACTION_ADD_FUNCTION  : 64 65 66 67
ACTION_ADD_FUNCTION_CALL : 73 74
ACTION_ADD_FUNCTION_OPERAND : 75 76
ACTION_ADD_NOT_OPERAND : 50
ACTION_ADD_ONE_DIM_OPERAND : 53
ACTION_ADD_OPERATOR  : 30 31 32 33 34 35 36 37 41 42 43 44 45
ACTION_ADD_PARAMETERS : 74
ACTION_ADD_PROCEDURE : 63
ACTION_ADD_QUADRUPLET : 28 39
ACTION_ADD_QUADRUPLET_EMPTY_JUMP : 17 22 23
ACTION_ADD_SUBROUTINE_CALL : 61
ACTION_ADD_THREE_DIM_OPERAND : 55
ACTION_ADD_TWO_DIM_OPERAND : 54
ACTION_ADD_VAR_VALUE : 52 53 54 55 60
ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP : 24
ACTION_ADD_WORD_VALUE : 57
ACTION_ASSIGN_VALUE  : 26 69 70
ACTION_CONSOLE_READ  : 86
ACTION_CONSOLE_WRITE : 81 82
ACTION_DO_WHILE_INDEX : 25
ACTION_FILL_JUMP     : 18 19 21 22 23
ACTION_FILL_JUMP_END_IF : 18 19 20 21
ACTION_FOR_GOTO      : 26
ACTION_FOR_INCREMENT : 26
ACTION_FOR_JUMP_BACK : 26
ACTION_NEW_IF        : 17
ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE : 25
ACTION_QUADRUPLET_EMPTY_JUMP_END_IF : 17 22 23
ACTION_WHILE_GOTO    : 24
arguments            : 74 77 77
arithmetic_expression : 26 26 26 27 39 40 53 54 54 55 55 55 70 84
arithmetic_operator  : 39
assign               : 8
base_if              : 18 19 20 21
calls                : 6
conditions           : 4
else_ifs             : 20 21 23
functions            : 47 62
ids_access           : 48 56 69 70 89 90
inside_logic         : 1 2 3 4 5 6 7 8 17 19 21 22 23 24 25 26 63 64 65 66 67
logic_expression     : 17 22 23 24 25 28 28 29 69
logic_operator       : 28
loops                : 5
multiple_print       : 81 82 85 85
multiple_read        : 87 88 90
parameters           : 65 67 72 72
possible_read        : 86
possible_values      : 49 50
print                : 78
program              : 0
read                 : 79
read_or_write        : 7
real_value           : 46
subroutines          : 2 63 64 65 66 67
value                : 38 39 51 75
variable             : 3 71
variable_type        : 10 11 12 13 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 24


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 25
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 29
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 30
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 31


state 10

    (73) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (98) ACTION_ADD_FUNCTION_CALL -> .

    open_parenthesis reduce using rule 98 (ACTION_ADD_FUNCTION_CALL -> .)

    ACTION_ADD_FUNCTION_CALL       shift and go to state 32

state 11

    (18) conditions -> base_if . ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> base_if . else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> base_if . else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> base_if . else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (114) ACTION_FILL_JUMP -> .
    (22) else_ifs -> . elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (23) else_ifs -> . else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    else            shift and go to state 34
    end             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    elsif           shift and go to state 36

    ACTION_FILL_JUMP               shift and go to state 33
    else_ifs                       shift and go to state 35

state 12

    (17) base_if -> if . open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    open_parenthesis shift and go to state 37


state 13

    (24) loops -> while . open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO

    open_parenthesis shift and go to state 38


state 14

    (25) loops -> do . ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (121) ACTION_DO_WHILE_INDEX -> .

    dim             reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    while           reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    do              reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    for             reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    gosub           reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    dunkelCls       reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    let             reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    if              reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    id              reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    dunkelPrint     reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    dunkelRead      reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)
    loop            reduce using rule 121 (ACTION_DO_WHILE_INDEX -> .)

    ACTION_DO_WHILE_INDEX          shift and go to state 39

state 15

    (26) loops -> for . id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO

    id              shift and go to state 40


state 16

    (61) calls -> gosub . id ACTION_ADD_SUBROUTINE_CALL

    id              shift and go to state 41


state 17

    (62) calls -> functions .

    dim             reduce using rule 62 (calls -> functions .)
    while           reduce using rule 62 (calls -> functions .)
    do              reduce using rule 62 (calls -> functions .)
    for             reduce using rule 62 (calls -> functions .)
    gosub           reduce using rule 62 (calls -> functions .)
    dunkelCls       reduce using rule 62 (calls -> functions .)
    let             reduce using rule 62 (calls -> functions .)
    if              reduce using rule 62 (calls -> functions .)
    id              reduce using rule 62 (calls -> functions .)
    dunkelPrint     reduce using rule 62 (calls -> functions .)
    dunkelRead      reduce using rule 62 (calls -> functions .)
    end             reduce using rule 62 (calls -> functions .)
    loop            reduce using rule 62 (calls -> functions .)
    wend            reduce using rule 62 (calls -> functions .)
    return          reduce using rule 62 (calls -> functions .)
    else            reduce using rule 62 (calls -> functions .)
    elsif           reduce using rule 62 (calls -> functions .)
    next            reduce using rule 62 (calls -> functions .)


state 18

    (78) read_or_write -> print .

    dim             reduce using rule 78 (read_or_write -> print .)
    while           reduce using rule 78 (read_or_write -> print .)
    do              reduce using rule 78 (read_or_write -> print .)
    for             reduce using rule 78 (read_or_write -> print .)
    gosub           reduce using rule 78 (read_or_write -> print .)
    dunkelCls       reduce using rule 78 (read_or_write -> print .)
    let             reduce using rule 78 (read_or_write -> print .)
    if              reduce using rule 78 (read_or_write -> print .)
    id              reduce using rule 78 (read_or_write -> print .)
    dunkelPrint     reduce using rule 78 (read_or_write -> print .)
    dunkelRead      reduce using rule 78 (read_or_write -> print .)
    end             reduce using rule 78 (read_or_write -> print .)
    loop            reduce using rule 78 (read_or_write -> print .)
    wend            reduce using rule 78 (read_or_write -> print .)
    return          reduce using rule 78 (read_or_write -> print .)
    else            reduce using rule 78 (read_or_write -> print .)
    elsif           reduce using rule 78 (read_or_write -> print .)
    next            reduce using rule 78 (read_or_write -> print .)


state 19

    (79) read_or_write -> read .

    dim             reduce using rule 79 (read_or_write -> read .)
    while           reduce using rule 79 (read_or_write -> read .)
    do              reduce using rule 79 (read_or_write -> read .)
    for             reduce using rule 79 (read_or_write -> read .)
    gosub           reduce using rule 79 (read_or_write -> read .)
    dunkelCls       reduce using rule 79 (read_or_write -> read .)
    let             reduce using rule 79 (read_or_write -> read .)
    if              reduce using rule 79 (read_or_write -> read .)
    id              reduce using rule 79 (read_or_write -> read .)
    dunkelPrint     reduce using rule 79 (read_or_write -> read .)
    dunkelRead      reduce using rule 79 (read_or_write -> read .)
    end             reduce using rule 79 (read_or_write -> read .)
    loop            reduce using rule 79 (read_or_write -> read .)
    wend            reduce using rule 79 (read_or_write -> read .)
    return          reduce using rule 79 (read_or_write -> read .)
    else            reduce using rule 79 (read_or_write -> read .)
    elsif           reduce using rule 79 (read_or_write -> read .)
    next            reduce using rule 79 (read_or_write -> read .)


state 20

    (80) read_or_write -> dunkelCls .

    dim             reduce using rule 80 (read_or_write -> dunkelCls .)
    while           reduce using rule 80 (read_or_write -> dunkelCls .)
    do              reduce using rule 80 (read_or_write -> dunkelCls .)
    for             reduce using rule 80 (read_or_write -> dunkelCls .)
    gosub           reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelCls       reduce using rule 80 (read_or_write -> dunkelCls .)
    let             reduce using rule 80 (read_or_write -> dunkelCls .)
    if              reduce using rule 80 (read_or_write -> dunkelCls .)
    id              reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelPrint     reduce using rule 80 (read_or_write -> dunkelCls .)
    dunkelRead      reduce using rule 80 (read_or_write -> dunkelCls .)
    end             reduce using rule 80 (read_or_write -> dunkelCls .)
    loop            reduce using rule 80 (read_or_write -> dunkelCls .)
    wend            reduce using rule 80 (read_or_write -> dunkelCls .)
    return          reduce using rule 80 (read_or_write -> dunkelCls .)
    else            reduce using rule 80 (read_or_write -> dunkelCls .)
    elsif           reduce using rule 80 (read_or_write -> dunkelCls .)
    next            reduce using rule 80 (read_or_write -> dunkelCls .)


state 21

    (69) assign -> let . ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> let . ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 43
    open_parenthesis shift and go to state 44

    ids_access                     shift and go to state 42

state 22

    (81) print -> dunkelPrint . multiple_print ACTION_CONSOLE_WRITE
    (82) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 46
    string          shift and go to state 47
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    multiple_print                 shift and go to state 45
    arithmetic_expression          shift and go to state 48
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 23

    (86) read -> dunkelRead . possible_read ACTION_CONSOLE_READ
    (87) possible_read -> . string comma multiple_read
    (88) possible_read -> . multiple_read
    (89) multiple_read -> . ids_access
    (90) multiple_read -> . multiple_read comma ids_access
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 60
    id              shift and go to state 43
    open_parenthesis shift and go to state 44

    possible_read                  shift and go to state 59
    multiple_read                  shift and go to state 61
    ids_access                     shift and go to state 62

state 24

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 64

  ! $end            [ reduce using rule 68 (subroutines -> .) ]

    subroutines                    shift and go to state 63

state 25

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    else            reduce using rule 3 (inside_logic -> variable inside_logic .)
    elsif           reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 26

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    else            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    elsif           reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 27

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    else            reduce using rule 5 (inside_logic -> loops inside_logic .)
    elsif           reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 28

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    else            reduce using rule 6 (inside_logic -> calls inside_logic .)
    elsif           reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 29

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    else            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    elsif           reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 30

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    else            reduce using rule 8 (inside_logic -> assign inside_logic .)
    elsif           reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 31

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 65


state 32

    (73) functions -> id ACTION_ADD_FUNCTION_CALL . open_parenthesis close_parenthesis
    (74) functions -> id ACTION_ADD_FUNCTION_CALL . open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 66


state 33

    (18) conditions -> base_if ACTION_FILL_JUMP . end if ACTION_FILL_JUMP_END_IF

    end             shift and go to state 67


state 34

    (19) conditions -> base_if else . ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (114) ACTION_FILL_JUMP -> .

    dim             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 114 (ACTION_FILL_JUMP -> .)
    do              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    gosub           reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelCls       reduce using rule 114 (ACTION_FILL_JUMP -> .)
    let             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelPrint     reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelRead      reduce using rule 114 (ACTION_FILL_JUMP -> .)
    end             reduce using rule 114 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 68

state 35

    (20) conditions -> base_if else_ifs . end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> base_if else_ifs . else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (23) else_ifs -> else_ifs . elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    end             shift and go to state 69
    else            shift and go to state 70
    elsif           shift and go to state 71


state 36

    (22) else_ifs -> elsif . ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (114) ACTION_FILL_JUMP -> .

    open_parenthesis reduce using rule 114 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 72

state 37

    (17) base_if -> if open_parenthesis . logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 74
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 38

    (24) loops -> while open_parenthesis . logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 76
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 39

    (25) loops -> do ACTION_DO_WHILE_INDEX . inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 77
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 40

    (26) loops -> for id . ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (91) ACTION_ADD_FOR_VALUE -> .

    equals          reduce using rule 91 (ACTION_ADD_FOR_VALUE -> .)

    ACTION_ADD_FOR_VALUE           shift and go to state 78

state 41

    (61) calls -> gosub id . ACTION_ADD_SUBROUTINE_CALL
    (99) ACTION_ADD_SUBROUTINE_CALL -> .

    dim             reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    while           reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    do              reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    for             reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    gosub           reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    dunkelCls       reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    let             reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    if              reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    id              reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    dunkelPrint     reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    dunkelRead      reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    end             reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    loop            reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    wend            reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    return          reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    else            reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    elsif           reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)
    next            reduce using rule 99 (ACTION_ADD_SUBROUTINE_CALL -> .)

    ACTION_ADD_SUBROUTINE_CALL     shift and go to state 79

state 42

    (69) assign -> let ids_access . equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> let ids_access . equals arithmetic_expression ACTION_ASSIGN_VALUE

    equals          shift and go to state 80


state 43

    (52) ids_access -> id . ACTION_ADD_VAR_VALUE
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (92) ACTION_ADD_VAR_VALUE -> .

    open_brackets   reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    equals          reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 81

state 44

    (56) ids_access -> open_parenthesis . ids_access close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 43
    open_parenthesis shift and go to state 44

    ids_access                     shift and go to state 82

state 45

    (81) print -> dunkelPrint multiple_print . ACTION_CONSOLE_WRITE
    (85) multiple_print -> multiple_print . comma multiple_print
    (123) ACTION_CONSOLE_WRITE -> .

    comma           shift and go to state 84
    dim             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    while           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    do              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    for             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    gosub           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelCls       reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    let             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    if              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    id              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelPrint     reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelRead      reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    end             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    loop            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    wend            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    return          reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    else            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    elsif           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    next            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)

    ACTION_CONSOLE_WRITE           shift and go to state 83

state 46

    (82) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (40) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (51) value -> open_parenthesis . value close_parenthesis
    (56) ids_access -> open_parenthesis . ids_access close_parenthesis
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    string          shift and go to state 47
    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    id              shift and go to state 90
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57

    multiple_print                 shift and go to state 86
    arithmetic_expression          shift and go to state 87
    value                          shift and go to state 88
    ids_access                     shift and go to state 89
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53

state 47

    (83) multiple_print -> string .

    comma           reduce using rule 83 (multiple_print -> string .)
    dim             reduce using rule 83 (multiple_print -> string .)
    while           reduce using rule 83 (multiple_print -> string .)
    do              reduce using rule 83 (multiple_print -> string .)
    for             reduce using rule 83 (multiple_print -> string .)
    gosub           reduce using rule 83 (multiple_print -> string .)
    dunkelCls       reduce using rule 83 (multiple_print -> string .)
    let             reduce using rule 83 (multiple_print -> string .)
    if              reduce using rule 83 (multiple_print -> string .)
    id              reduce using rule 83 (multiple_print -> string .)
    dunkelPrint     reduce using rule 83 (multiple_print -> string .)
    dunkelRead      reduce using rule 83 (multiple_print -> string .)
    end             reduce using rule 83 (multiple_print -> string .)
    loop            reduce using rule 83 (multiple_print -> string .)
    wend            reduce using rule 83 (multiple_print -> string .)
    return          reduce using rule 83 (multiple_print -> string .)
    else            reduce using rule 83 (multiple_print -> string .)
    elsif           reduce using rule 83 (multiple_print -> string .)
    next            reduce using rule 83 (multiple_print -> string .)
    close_parenthesis reduce using rule 83 (multiple_print -> string .)


state 48

    (84) multiple_print -> arithmetic_expression .
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    comma           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dim             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    while           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    do              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    for             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    gosub           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelCls       reduce using rule 84 (multiple_print -> arithmetic_expression .)
    let             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    if              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    id              reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelPrint     reduce using rule 84 (multiple_print -> arithmetic_expression .)
    dunkelRead      reduce using rule 84 (multiple_print -> arithmetic_expression .)
    end             reduce using rule 84 (multiple_print -> arithmetic_expression .)
    loop            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    wend            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    return          reduce using rule 84 (multiple_print -> arithmetic_expression .)
    else            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    elsif           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    next            reduce using rule 84 (multiple_print -> arithmetic_expression .)
    close_parenthesis reduce using rule 84 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 49

    (38) arithmetic_expression -> value .

    sum             reduce using rule 38 (arithmetic_expression -> value .)
    substraction    reduce using rule 38 (arithmetic_expression -> value .)
    multiplication  reduce using rule 38 (arithmetic_expression -> value .)
    division        reduce using rule 38 (arithmetic_expression -> value .)
    exponent        reduce using rule 38 (arithmetic_expression -> value .)
    comma           reduce using rule 38 (arithmetic_expression -> value .)
    dim             reduce using rule 38 (arithmetic_expression -> value .)
    while           reduce using rule 38 (arithmetic_expression -> value .)
    do              reduce using rule 38 (arithmetic_expression -> value .)
    for             reduce using rule 38 (arithmetic_expression -> value .)
    gosub           reduce using rule 38 (arithmetic_expression -> value .)
    dunkelCls       reduce using rule 38 (arithmetic_expression -> value .)
    let             reduce using rule 38 (arithmetic_expression -> value .)
    if              reduce using rule 38 (arithmetic_expression -> value .)
    id              reduce using rule 38 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 38 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 38 (arithmetic_expression -> value .)
    end             reduce using rule 38 (arithmetic_expression -> value .)
    loop            reduce using rule 38 (arithmetic_expression -> value .)
    wend            reduce using rule 38 (arithmetic_expression -> value .)
    return          reduce using rule 38 (arithmetic_expression -> value .)
    else            reduce using rule 38 (arithmetic_expression -> value .)
    elsif           reduce using rule 38 (arithmetic_expression -> value .)
    next            reduce using rule 38 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 38 (arithmetic_expression -> value .)
    and             reduce using rule 38 (arithmetic_expression -> value .)
    or              reduce using rule 38 (arithmetic_expression -> value .)
    is_equal        reduce using rule 38 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 38 (arithmetic_expression -> value .)
    greater_than    reduce using rule 38 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 38 (arithmetic_expression -> value .)
    less_than       reduce using rule 38 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 38 (arithmetic_expression -> value .)
    to              reduce using rule 38 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 38 (arithmetic_expression -> value .)
    step            reduce using rule 38 (arithmetic_expression -> value .)


state 50

    (49) value -> possible_values .

    sum             reduce using rule 49 (value -> possible_values .)
    substraction    reduce using rule 49 (value -> possible_values .)
    multiplication  reduce using rule 49 (value -> possible_values .)
    division        reduce using rule 49 (value -> possible_values .)
    exponent        reduce using rule 49 (value -> possible_values .)
    comma           reduce using rule 49 (value -> possible_values .)
    dim             reduce using rule 49 (value -> possible_values .)
    while           reduce using rule 49 (value -> possible_values .)
    do              reduce using rule 49 (value -> possible_values .)
    for             reduce using rule 49 (value -> possible_values .)
    gosub           reduce using rule 49 (value -> possible_values .)
    dunkelCls       reduce using rule 49 (value -> possible_values .)
    let             reduce using rule 49 (value -> possible_values .)
    if              reduce using rule 49 (value -> possible_values .)
    id              reduce using rule 49 (value -> possible_values .)
    dunkelPrint     reduce using rule 49 (value -> possible_values .)
    dunkelRead      reduce using rule 49 (value -> possible_values .)
    end             reduce using rule 49 (value -> possible_values .)
    loop            reduce using rule 49 (value -> possible_values .)
    wend            reduce using rule 49 (value -> possible_values .)
    return          reduce using rule 49 (value -> possible_values .)
    else            reduce using rule 49 (value -> possible_values .)
    elsif           reduce using rule 49 (value -> possible_values .)
    next            reduce using rule 49 (value -> possible_values .)
    close_parenthesis reduce using rule 49 (value -> possible_values .)
    and             reduce using rule 49 (value -> possible_values .)
    or              reduce using rule 49 (value -> possible_values .)
    is_equal        reduce using rule 49 (value -> possible_values .)
    is_not_equal    reduce using rule 49 (value -> possible_values .)
    greater_than    reduce using rule 49 (value -> possible_values .)
    greater_or_equal_than reduce using rule 49 (value -> possible_values .)
    less_than       reduce using rule 49 (value -> possible_values .)
    less_or_equal_than reduce using rule 49 (value -> possible_values .)
    to              reduce using rule 49 (value -> possible_values .)
    close_brackets  reduce using rule 49 (value -> possible_values .)
    step            reduce using rule 49 (value -> possible_values .)


state 51

    (50) value -> not . possible_values ACTION_ADD_NOT_OPERAND
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58
    open_parenthesis shift and go to state 44

    possible_values                shift and go to state 97
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 52

    (46) possible_values -> real_value .

    sum             reduce using rule 46 (possible_values -> real_value .)
    substraction    reduce using rule 46 (possible_values -> real_value .)
    multiplication  reduce using rule 46 (possible_values -> real_value .)
    division        reduce using rule 46 (possible_values -> real_value .)
    exponent        reduce using rule 46 (possible_values -> real_value .)
    comma           reduce using rule 46 (possible_values -> real_value .)
    dim             reduce using rule 46 (possible_values -> real_value .)
    while           reduce using rule 46 (possible_values -> real_value .)
    do              reduce using rule 46 (possible_values -> real_value .)
    for             reduce using rule 46 (possible_values -> real_value .)
    gosub           reduce using rule 46 (possible_values -> real_value .)
    dunkelCls       reduce using rule 46 (possible_values -> real_value .)
    let             reduce using rule 46 (possible_values -> real_value .)
    if              reduce using rule 46 (possible_values -> real_value .)
    id              reduce using rule 46 (possible_values -> real_value .)
    dunkelPrint     reduce using rule 46 (possible_values -> real_value .)
    dunkelRead      reduce using rule 46 (possible_values -> real_value .)
    end             reduce using rule 46 (possible_values -> real_value .)
    loop            reduce using rule 46 (possible_values -> real_value .)
    wend            reduce using rule 46 (possible_values -> real_value .)
    return          reduce using rule 46 (possible_values -> real_value .)
    else            reduce using rule 46 (possible_values -> real_value .)
    elsif           reduce using rule 46 (possible_values -> real_value .)
    next            reduce using rule 46 (possible_values -> real_value .)
    close_parenthesis reduce using rule 46 (possible_values -> real_value .)
    and             reduce using rule 46 (possible_values -> real_value .)
    or              reduce using rule 46 (possible_values -> real_value .)
    is_equal        reduce using rule 46 (possible_values -> real_value .)
    is_not_equal    reduce using rule 46 (possible_values -> real_value .)
    greater_than    reduce using rule 46 (possible_values -> real_value .)
    greater_or_equal_than reduce using rule 46 (possible_values -> real_value .)
    less_than       reduce using rule 46 (possible_values -> real_value .)
    less_or_equal_than reduce using rule 46 (possible_values -> real_value .)
    to              reduce using rule 46 (possible_values -> real_value .)
    close_brackets  reduce using rule 46 (possible_values -> real_value .)
    step            reduce using rule 46 (possible_values -> real_value .)


state 53

    (47) possible_values -> functions .

    sum             reduce using rule 47 (possible_values -> functions .)
    substraction    reduce using rule 47 (possible_values -> functions .)
    multiplication  reduce using rule 47 (possible_values -> functions .)
    division        reduce using rule 47 (possible_values -> functions .)
    exponent        reduce using rule 47 (possible_values -> functions .)
    comma           reduce using rule 47 (possible_values -> functions .)
    dim             reduce using rule 47 (possible_values -> functions .)
    while           reduce using rule 47 (possible_values -> functions .)
    do              reduce using rule 47 (possible_values -> functions .)
    for             reduce using rule 47 (possible_values -> functions .)
    gosub           reduce using rule 47 (possible_values -> functions .)
    dunkelCls       reduce using rule 47 (possible_values -> functions .)
    let             reduce using rule 47 (possible_values -> functions .)
    if              reduce using rule 47 (possible_values -> functions .)
    id              reduce using rule 47 (possible_values -> functions .)
    dunkelPrint     reduce using rule 47 (possible_values -> functions .)
    dunkelRead      reduce using rule 47 (possible_values -> functions .)
    end             reduce using rule 47 (possible_values -> functions .)
    loop            reduce using rule 47 (possible_values -> functions .)
    wend            reduce using rule 47 (possible_values -> functions .)
    return          reduce using rule 47 (possible_values -> functions .)
    else            reduce using rule 47 (possible_values -> functions .)
    elsif           reduce using rule 47 (possible_values -> functions .)
    next            reduce using rule 47 (possible_values -> functions .)
    close_parenthesis reduce using rule 47 (possible_values -> functions .)
    and             reduce using rule 47 (possible_values -> functions .)
    or              reduce using rule 47 (possible_values -> functions .)
    is_equal        reduce using rule 47 (possible_values -> functions .)
    is_not_equal    reduce using rule 47 (possible_values -> functions .)
    greater_than    reduce using rule 47 (possible_values -> functions .)
    greater_or_equal_than reduce using rule 47 (possible_values -> functions .)
    less_than       reduce using rule 47 (possible_values -> functions .)
    less_or_equal_than reduce using rule 47 (possible_values -> functions .)
    to              reduce using rule 47 (possible_values -> functions .)
    close_brackets  reduce using rule 47 (possible_values -> functions .)
    step            reduce using rule 47 (possible_values -> functions .)


state 54

    (48) possible_values -> ids_access .

    sum             reduce using rule 48 (possible_values -> ids_access .)
    substraction    reduce using rule 48 (possible_values -> ids_access .)
    multiplication  reduce using rule 48 (possible_values -> ids_access .)
    division        reduce using rule 48 (possible_values -> ids_access .)
    exponent        reduce using rule 48 (possible_values -> ids_access .)
    comma           reduce using rule 48 (possible_values -> ids_access .)
    dim             reduce using rule 48 (possible_values -> ids_access .)
    while           reduce using rule 48 (possible_values -> ids_access .)
    do              reduce using rule 48 (possible_values -> ids_access .)
    for             reduce using rule 48 (possible_values -> ids_access .)
    gosub           reduce using rule 48 (possible_values -> ids_access .)
    dunkelCls       reduce using rule 48 (possible_values -> ids_access .)
    let             reduce using rule 48 (possible_values -> ids_access .)
    if              reduce using rule 48 (possible_values -> ids_access .)
    id              reduce using rule 48 (possible_values -> ids_access .)
    dunkelPrint     reduce using rule 48 (possible_values -> ids_access .)
    dunkelRead      reduce using rule 48 (possible_values -> ids_access .)
    end             reduce using rule 48 (possible_values -> ids_access .)
    loop            reduce using rule 48 (possible_values -> ids_access .)
    wend            reduce using rule 48 (possible_values -> ids_access .)
    return          reduce using rule 48 (possible_values -> ids_access .)
    else            reduce using rule 48 (possible_values -> ids_access .)
    elsif           reduce using rule 48 (possible_values -> ids_access .)
    next            reduce using rule 48 (possible_values -> ids_access .)
    close_parenthesis reduce using rule 48 (possible_values -> ids_access .)
    and             reduce using rule 48 (possible_values -> ids_access .)
    or              reduce using rule 48 (possible_values -> ids_access .)
    is_equal        reduce using rule 48 (possible_values -> ids_access .)
    is_not_equal    reduce using rule 48 (possible_values -> ids_access .)
    greater_than    reduce using rule 48 (possible_values -> ids_access .)
    greater_or_equal_than reduce using rule 48 (possible_values -> ids_access .)
    less_than       reduce using rule 48 (possible_values -> ids_access .)
    less_or_equal_than reduce using rule 48 (possible_values -> ids_access .)
    to              reduce using rule 48 (possible_values -> ids_access .)
    close_brackets  reduce using rule 48 (possible_values -> ids_access .)
    step            reduce using rule 48 (possible_values -> ids_access .)


state 55

    (57) real_value -> word_value . ACTION_ADD_WORD_VALUE
    (93) ACTION_ADD_WORD_VALUE -> .

    sum             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    substraction    reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    multiplication  reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    division        reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    exponent        reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    comma           reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    dim             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    while           reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    do              reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    for             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    gosub           reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    let             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    if              reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    id              reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    end             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    loop            reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    wend            reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    return          reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    else            reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    elsif           reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    next            reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    close_parenthesis reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    and             reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    or              reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    is_equal        reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    is_not_equal    reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    greater_than    reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    greater_or_equal_than reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    less_than       reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    less_or_equal_than reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    to              reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    close_brackets  reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)
    step            reduce using rule 93 (ACTION_ADD_WORD_VALUE -> .)

    ACTION_ADD_WORD_VALUE          shift and go to state 98

state 56

    (58) real_value -> float_value . ACTION_ADD_FLOAT_VALUE
    (94) ACTION_ADD_FLOAT_VALUE -> .

    sum             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    substraction    reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    multiplication  reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    division        reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    exponent        reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    comma           reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    dim             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    while           reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    do              reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    for             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    gosub           reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelCls       reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    let             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    if              reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    id              reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelPrint     reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelRead      reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    end             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    loop            reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    wend            reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    return          reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    else            reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    elsif           reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    next            reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    close_parenthesis reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    and             reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    or              reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    is_equal        reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    is_not_equal    reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_than    reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_or_equal_than reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    less_than       reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    less_or_equal_than reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    to              reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    close_brackets  reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)
    step            reduce using rule 94 (ACTION_ADD_FLOAT_VALUE -> .)

    ACTION_ADD_FLOAT_VALUE         shift and go to state 99

state 57

    (59) real_value -> bool_value . ACTION_ADD_BOOL_VALUE
    (95) ACTION_ADD_BOOL_VALUE -> .

    sum             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    substraction    reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    multiplication  reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    division        reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    exponent        reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    comma           reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    dim             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    while           reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    do              reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    for             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    gosub           reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelCls       reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    let             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    if              reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    id              reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelPrint     reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelRead      reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    end             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    loop            reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    wend            reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    return          reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    else            reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    elsif           reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    next            reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    close_parenthesis reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    and             reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    or              reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    is_equal        reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    is_not_equal    reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    greater_than    reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    greater_or_equal_than reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    less_than       reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    less_or_equal_than reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    to              reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    close_brackets  reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)
    step            reduce using rule 95 (ACTION_ADD_BOOL_VALUE -> .)

    ACTION_ADD_BOOL_VALUE          shift and go to state 100

state 58

    (60) real_value -> id . ACTION_ADD_VAR_VALUE
    (73) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (92) ACTION_ADD_VAR_VALUE -> .
    (98) ACTION_ADD_FUNCTION_CALL -> .

    open_brackets   reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    to              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    close_brackets  reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    step            reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 98 (ACTION_ADD_FUNCTION_CALL -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 101
    ACTION_ADD_FUNCTION_CALL       shift and go to state 32

state 59

    (86) read -> dunkelRead possible_read . ACTION_CONSOLE_READ
    (124) ACTION_CONSOLE_READ -> .

    dim             reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    while           reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    do              reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    for             reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    gosub           reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    dunkelCls       reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    let             reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    if              reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    id              reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    dunkelPrint     reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    dunkelRead      reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    end             reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    loop            reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    wend            reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    return          reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    else            reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    elsif           reduce using rule 124 (ACTION_CONSOLE_READ -> .)
    next            reduce using rule 124 (ACTION_CONSOLE_READ -> .)

    ACTION_CONSOLE_READ            shift and go to state 102

state 60

    (87) possible_read -> string . comma multiple_read

    comma           shift and go to state 103


state 61

    (88) possible_read -> multiple_read .
    (90) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 88 (possible_read -> multiple_read .)
    while           reduce using rule 88 (possible_read -> multiple_read .)
    do              reduce using rule 88 (possible_read -> multiple_read .)
    for             reduce using rule 88 (possible_read -> multiple_read .)
    gosub           reduce using rule 88 (possible_read -> multiple_read .)
    dunkelCls       reduce using rule 88 (possible_read -> multiple_read .)
    let             reduce using rule 88 (possible_read -> multiple_read .)
    if              reduce using rule 88 (possible_read -> multiple_read .)
    id              reduce using rule 88 (possible_read -> multiple_read .)
    dunkelPrint     reduce using rule 88 (possible_read -> multiple_read .)
    dunkelRead      reduce using rule 88 (possible_read -> multiple_read .)
    end             reduce using rule 88 (possible_read -> multiple_read .)
    loop            reduce using rule 88 (possible_read -> multiple_read .)
    wend            reduce using rule 88 (possible_read -> multiple_read .)
    return          reduce using rule 88 (possible_read -> multiple_read .)
    else            reduce using rule 88 (possible_read -> multiple_read .)
    elsif           reduce using rule 88 (possible_read -> multiple_read .)
    next            reduce using rule 88 (possible_read -> multiple_read .)
    comma           shift and go to state 104


state 62

    (89) multiple_read -> ids_access .

    comma           reduce using rule 89 (multiple_read -> ids_access .)
    dim             reduce using rule 89 (multiple_read -> ids_access .)
    while           reduce using rule 89 (multiple_read -> ids_access .)
    do              reduce using rule 89 (multiple_read -> ids_access .)
    for             reduce using rule 89 (multiple_read -> ids_access .)
    gosub           reduce using rule 89 (multiple_read -> ids_access .)
    dunkelCls       reduce using rule 89 (multiple_read -> ids_access .)
    let             reduce using rule 89 (multiple_read -> ids_access .)
    if              reduce using rule 89 (multiple_read -> ids_access .)
    id              reduce using rule 89 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 89 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 89 (multiple_read -> ids_access .)
    end             reduce using rule 89 (multiple_read -> ids_access .)
    loop            reduce using rule 89 (multiple_read -> ids_access .)
    wend            reduce using rule 89 (multiple_read -> ids_access .)
    return          reduce using rule 89 (multiple_read -> ids_access .)
    else            reduce using rule 89 (multiple_read -> ids_access .)
    elsif           reduce using rule 89 (multiple_read -> ids_access .)
    next            reduce using rule 89 (multiple_read -> ids_access .)


state 63

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 64

    (63) subroutines -> sub . procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> sub . function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> sub . function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub . function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub . function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines

    procedure       shift and go to state 105
    function        shift and go to state 106


state 65

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 108
    float           shift and go to state 109
    bool            shift and go to state 110

    variable_type                  shift and go to state 107

state 66

    (73) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis . close_parenthesis
    (74) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis . arguments ACTION_ADD_PARAMETERS close_parenthesis
    (75) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (77) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 111
    ByVal           shift and go to state 113
    ByRef           shift and go to state 114

    arguments                      shift and go to state 112

state 67

    (18) conditions -> base_if ACTION_FILL_JUMP end . if ACTION_FILL_JUMP_END_IF

    if              shift and go to state 115


state 68

    (19) conditions -> base_if else ACTION_FILL_JUMP . inside_logic end if ACTION_FILL_JUMP_END_IF
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    base_if                        shift and go to state 11
    inside_logic                   shift and go to state 116
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 69

    (20) conditions -> base_if else_ifs end . if ACTION_FILL_JUMP_END_IF

    if              shift and go to state 117


state 70

    (21) conditions -> base_if else_ifs else . ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (114) ACTION_FILL_JUMP -> .

    dim             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 114 (ACTION_FILL_JUMP -> .)
    do              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    gosub           reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelCls       reduce using rule 114 (ACTION_FILL_JUMP -> .)
    let             reduce using rule 114 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelPrint     reduce using rule 114 (ACTION_FILL_JUMP -> .)
    dunkelRead      reduce using rule 114 (ACTION_FILL_JUMP -> .)
    end             reduce using rule 114 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 118

state 71

    (23) else_ifs -> else_ifs elsif . ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (114) ACTION_FILL_JUMP -> .

    open_parenthesis reduce using rule 114 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 119

state 72

    (22) else_ifs -> elsif ACTION_FILL_JUMP . open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    open_parenthesis shift and go to state 120


state 73

    (29) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (40) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (51) value -> open_parenthesis . value close_parenthesis
    (56) ids_access -> open_parenthesis . ids_access close_parenthesis
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    id              shift and go to state 90
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57

    logic_expression               shift and go to state 121
    arithmetic_expression          shift and go to state 122
    value                          shift and go to state 88
    ids_access                     shift and go to state 89
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53

state 74

    (17) base_if -> if open_parenthesis logic_expression . close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 123
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 75

    (27) logic_expression -> arithmetic_expression .
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_parenthesis reduce using rule 27 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 27 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 27 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 27 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 76

    (24) loops -> while open_parenthesis logic_expression . close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 133
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 77

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic . loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE

    loop            shift and go to state 134


state 78

    (26) loops -> for id ACTION_ADD_FOR_VALUE . equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO

    equals          shift and go to state 135


state 79

    (61) calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .

    dim             reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    while           reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    do              reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    for             reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    gosub           reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    dunkelCls       reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    let             reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    if              reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    id              reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    dunkelPrint     reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    dunkelRead      reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    end             reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    loop            reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    wend            reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    return          reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    else            reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    elsif           reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)
    next            reduce using rule 61 (calls -> gosub id ACTION_ADD_SUBROUTINE_CALL .)


state 80

    (69) assign -> let ids_access equals . logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> let ids_access equals . arithmetic_expression ACTION_ASSIGN_VALUE
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    ids_access                     shift and go to state 54
    logic_expression               shift and go to state 136
    arithmetic_expression          shift and go to state 137
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53

state 81

    (52) ids_access -> id ACTION_ADD_VAR_VALUE .
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

    equals          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 138


state 82

    (56) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 139


state 83

    (81) print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .

    dim             reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    while           reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    do              reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    for             reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    gosub           reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    dunkelCls       reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    let             reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    if              reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    id              reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    dunkelPrint     reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    dunkelRead      reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    end             reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    loop            reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    wend            reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    return          reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    else            reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    elsif           reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)
    next            reduce using rule 81 (print -> dunkelPrint multiple_print ACTION_CONSOLE_WRITE .)


state 84

    (85) multiple_print -> multiple_print comma . multiple_print
    (83) multiple_print -> . string
    (84) multiple_print -> . arithmetic_expression
    (85) multiple_print -> . multiple_print comma multiple_print
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 47
    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    multiple_print                 shift and go to state 140
    arithmetic_expression          shift and go to state 48
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 85

    (40) arithmetic_expression -> open_parenthesis . arithmetic_expression close_parenthesis
    (51) value -> open_parenthesis . value close_parenthesis
    (56) ids_access -> open_parenthesis . ids_access close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    id              shift and go to state 90
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57

    arithmetic_expression          shift and go to state 141
    value                          shift and go to state 88
    ids_access                     shift and go to state 89
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53

state 86

    (82) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis ACTION_CONSOLE_WRITE
    (85) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 142
    comma           shift and go to state 84


state 87

    (40) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (84) multiple_print -> arithmetic_expression .
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 143
    comma           reduce using rule 84 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

  ! close_parenthesis [ reduce using rule 84 (multiple_print -> arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 91

state 88

    (51) value -> open_parenthesis value . close_parenthesis
    (38) arithmetic_expression -> value .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 144
    sum             reduce using rule 38 (arithmetic_expression -> value .)
    substraction    reduce using rule 38 (arithmetic_expression -> value .)
    multiplication  reduce using rule 38 (arithmetic_expression -> value .)
    division        reduce using rule 38 (arithmetic_expression -> value .)
    exponent        reduce using rule 38 (arithmetic_expression -> value .)
    comma           reduce using rule 38 (arithmetic_expression -> value .)
    and             reduce using rule 38 (arithmetic_expression -> value .)
    or              reduce using rule 38 (arithmetic_expression -> value .)
    is_equal        reduce using rule 38 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 38 (arithmetic_expression -> value .)
    greater_than    reduce using rule 38 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 38 (arithmetic_expression -> value .)
    less_than       reduce using rule 38 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 38 (arithmetic_expression -> value .)

  ! close_parenthesis [ reduce using rule 38 (arithmetic_expression -> value .) ]


state 89

    (56) ids_access -> open_parenthesis ids_access . close_parenthesis
    (48) possible_values -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 139
    sum             reduce using rule 48 (possible_values -> ids_access .)
    substraction    reduce using rule 48 (possible_values -> ids_access .)
    multiplication  reduce using rule 48 (possible_values -> ids_access .)
    division        reduce using rule 48 (possible_values -> ids_access .)
    exponent        reduce using rule 48 (possible_values -> ids_access .)
    comma           reduce using rule 48 (possible_values -> ids_access .)
    and             reduce using rule 48 (possible_values -> ids_access .)
    or              reduce using rule 48 (possible_values -> ids_access .)
    is_equal        reduce using rule 48 (possible_values -> ids_access .)
    is_not_equal    reduce using rule 48 (possible_values -> ids_access .)
    greater_than    reduce using rule 48 (possible_values -> ids_access .)
    greater_or_equal_than reduce using rule 48 (possible_values -> ids_access .)
    less_than       reduce using rule 48 (possible_values -> ids_access .)
    less_or_equal_than reduce using rule 48 (possible_values -> ids_access .)

  ! close_parenthesis [ reduce using rule 48 (possible_values -> ids_access .) ]


state 90

    (52) ids_access -> id . ACTION_ADD_VAR_VALUE
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (60) real_value -> id . ACTION_ADD_VAR_VALUE
    (73) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> id . ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (92) ACTION_ADD_VAR_VALUE -> .
    (98) ACTION_ADD_FUNCTION_CALL -> .

    open_brackets   reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 92 (ACTION_ADD_VAR_VALUE -> .)
    open_parenthesis reduce using rule 98 (ACTION_ADD_FUNCTION_CALL -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 145
    ACTION_ADD_FUNCTION_CALL       shift and go to state 32

state 91

    (39) arithmetic_expression -> arithmetic_expression arithmetic_operator . value ACTION_ADD_QUADRUPLET
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 51
    open_parenthesis shift and go to state 147
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    value                          shift and go to state 146
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 92

    (41) arithmetic_operator -> sum . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 148

state 93

    (42) arithmetic_operator -> substraction . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 149

state 94

    (43) arithmetic_operator -> multiplication . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 150

state 95

    (44) arithmetic_operator -> division . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 151

state 96

    (45) arithmetic_operator -> exponent . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 152

state 97

    (50) value -> not possible_values . ACTION_ADD_NOT_OPERAND
    (105) ACTION_ADD_NOT_OPERAND -> .

    sum             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    substraction    reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    multiplication  reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    division        reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    exponent        reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    comma           reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    dim             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    while           reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    do              reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    for             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    gosub           reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelCls       reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    let             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    if              reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    id              reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelPrint     reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    dunkelRead      reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    end             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    loop            reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    wend            reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    return          reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    else            reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    elsif           reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    next            reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    close_parenthesis reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    and             reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    or              reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    is_equal        reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    is_not_equal    reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    greater_than    reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    greater_or_equal_than reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    less_than       reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    less_or_equal_than reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    to              reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    close_brackets  reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)
    step            reduce using rule 105 (ACTION_ADD_NOT_OPERAND -> .)

    ACTION_ADD_NOT_OPERAND         shift and go to state 153

state 98

    (57) real_value -> word_value ACTION_ADD_WORD_VALUE .

    sum             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    substraction    reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    multiplication  reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    division        reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    exponent        reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    comma           reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dim             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    while           reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    do              reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    for             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    gosub           reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelCls       reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    let             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    if              reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    id              reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelPrint     reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelRead      reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    end             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    loop            reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    wend            reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    return          reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    else            reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    elsif           reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    next            reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_parenthesis reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    and             reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    or              reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_equal        reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_not_equal    reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_than    reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_or_equal_than reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_than       reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_or_equal_than reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    to              reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_brackets  reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    step            reduce using rule 57 (real_value -> word_value ACTION_ADD_WORD_VALUE .)


state 99

    (58) real_value -> float_value ACTION_ADD_FLOAT_VALUE .

    sum             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    substraction    reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    multiplication  reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    division        reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    exponent        reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    comma           reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dim             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    while           reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    do              reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    for             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    gosub           reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelCls       reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    let             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    if              reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    id              reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelPrint     reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelRead      reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    end             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    loop            reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    wend            reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    return          reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    else            reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    elsif           reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    next            reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_parenthesis reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    and             reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    or              reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_equal        reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_not_equal    reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_than    reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_or_equal_than reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_than       reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_or_equal_than reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    to              reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_brackets  reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    step            reduce using rule 58 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)


state 100

    (59) real_value -> bool_value ACTION_ADD_BOOL_VALUE .

    sum             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    substraction    reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    multiplication  reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    division        reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    exponent        reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    comma           reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dim             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    while           reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    do              reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    for             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    gosub           reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelCls       reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    let             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    if              reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    id              reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelPrint     reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelRead      reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    end             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    loop            reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    wend            reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    return          reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    else            reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    elsif           reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    next            reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    close_parenthesis reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    and             reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    or              reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_equal        reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_not_equal    reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_than    reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_or_equal_than reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_than       reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_or_equal_than reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    to              reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    close_brackets  reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)
    step            reduce using rule 59 (real_value -> bool_value ACTION_ADD_BOOL_VALUE .)


state 101

    (60) real_value -> id ACTION_ADD_VAR_VALUE .
    (52) ids_access -> id ACTION_ADD_VAR_VALUE .
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

  ! reduce/reduce conflict for sum resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dim resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for while resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for do resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for for resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for gosub resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for let resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for if resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for id resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for end resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for loop resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for wend resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for return resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for else resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for elsif resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for next resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for to resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_brackets resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for step resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    to              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_brackets  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    step            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 138

  ! sum             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dim             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! while           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! do              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! for             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! gosub           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelCls       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! let             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! if              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! id              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelPrint     [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelRead      [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! end             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! loop            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! wend            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! return          [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! else            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! elsif           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! next            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! to              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_brackets  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! step            [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 102

    (86) read -> dunkelRead possible_read ACTION_CONSOLE_READ .

    dim             reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    while           reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    do              reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    for             reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    gosub           reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    dunkelCls       reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    let             reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    if              reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    id              reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    dunkelPrint     reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    dunkelRead      reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    end             reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    loop            reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    wend            reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    return          reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    else            reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    elsif           reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)
    next            reduce using rule 86 (read -> dunkelRead possible_read ACTION_CONSOLE_READ .)


state 103

    (87) possible_read -> string comma . multiple_read
    (89) multiple_read -> . ids_access
    (90) multiple_read -> . multiple_read comma ids_access
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 43
    open_parenthesis shift and go to state 44

    multiple_read                  shift and go to state 154
    ids_access                     shift and go to state 62

state 104

    (90) multiple_read -> multiple_read comma . ids_access
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 43
    open_parenthesis shift and go to state 44

    ids_access                     shift and go to state 155

state 105

    (63) subroutines -> sub procedure . id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines

    id              shift and go to state 156


state 106

    (64) subroutines -> sub function . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> sub function . id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub function . id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function . id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines

    id              shift and go to state 157


state 107

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelCls       reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    else            reduce using rule 10 (variable -> dim id as variable_type .)
    elsif           reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 158


state 108

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    dunkelCls       reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    else            reduce using rule 14 (variable_type -> word .)
    elsif           reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 109

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    dunkelCls       reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    else            reduce using rule 15 (variable_type -> float .)
    elsif           reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 110

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    dunkelCls       reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    else            reduce using rule 16 (variable_type -> bool .)
    elsif           reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 111

    (73) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .

    dim             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    while           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    do              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    for             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    gosub           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    dunkelCls       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    let             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    if              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    id              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    end             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    loop            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    wend            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    return          reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    else            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    elsif           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    next            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    sum             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    substraction    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    division        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    exponent        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    comma           reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    and             reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    or              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    less_than       reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    to              reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)
    step            reduce using rule 73 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis .)


state 112

    (74) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments . ACTION_ADD_PARAMETERS close_parenthesis
    (77) arguments -> arguments . comma arguments
    (104) ACTION_ADD_PARAMETERS -> .

    comma           shift and go to state 160
    close_parenthesis reduce using rule 104 (ACTION_ADD_PARAMETERS -> .)

    ACTION_ADD_PARAMETERS          shift and go to state 159

state 113

    (75) arguments -> ByVal . value ACTION_ADD_FUNCTION_OPERAND
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 51
    open_parenthesis shift and go to state 147
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    value                          shift and go to state 161
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 114

    (76) arguments -> ByRef . id ACTION_ADD_FUNCTION_OPERAND

    id              shift and go to state 162


state 115

    (18) conditions -> base_if ACTION_FILL_JUMP end if . ACTION_FILL_JUMP_END_IF
    (115) ACTION_FILL_JUMP_END_IF -> .

    dim             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    do              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    gosub           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelCls       reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    let             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelPrint     reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelRead      reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    end             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    loop            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    wend            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    return          reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    else            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    elsif           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    next            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 163

state 116

    (19) conditions -> base_if else ACTION_FILL_JUMP inside_logic . end if ACTION_FILL_JUMP_END_IF

    end             shift and go to state 164


state 117

    (20) conditions -> base_if else_ifs end if . ACTION_FILL_JUMP_END_IF
    (115) ACTION_FILL_JUMP_END_IF -> .

    dim             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    do              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    gosub           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelCls       reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    let             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelPrint     reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelRead      reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    end             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    loop            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    wend            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    return          reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    else            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    elsif           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    next            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 165

state 118

    (21) conditions -> base_if else_ifs else ACTION_FILL_JUMP . inside_logic end if ACTION_FILL_JUMP_END_IF
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    base_if                        shift and go to state 11
    inside_logic                   shift and go to state 166
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 119

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP . open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    open_parenthesis shift and go to state 167


state 120

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis . logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 168
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 121

    (29) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 169
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 122

    (40) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (27) logic_expression -> arithmetic_expression .
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 143
    and             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

  ! close_parenthesis [ reduce using rule 27 (logic_expression -> arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 91

state 123

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis . then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    then            shift and go to state 170


state 124

    (28) logic_expression -> logic_expression logic_operator . logic_expression ACTION_ADD_QUADRUPLET
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 171
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 125

    (30) logic_operator -> and . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 172

state 126

    (31) logic_operator -> or . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 173

state 127

    (32) logic_operator -> is_equal . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 174

state 128

    (33) logic_operator -> is_not_equal . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 175

state 129

    (34) logic_operator -> greater_than . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 176

state 130

    (35) logic_operator -> greater_or_equal_than . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 177

state 131

    (36) logic_operator -> less_than . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 178

state 132

    (37) logic_operator -> less_or_equal_than . ACTION_ADD_OPERATOR
    (96) ACTION_ADD_OPERATOR -> .

    open_parenthesis reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    bool_value      reduce using rule 96 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 96 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 179

state 133

    (24) loops -> while open_parenthesis logic_expression close_parenthesis . ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (111) ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .

    dim             reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    while           reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    do              reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    for             reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    gosub           reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelCls       reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    let             reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    if              reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    id              reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelPrint     reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelRead      reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)
    wend            reduce using rule 111 (ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP shift and go to state 180

state 134

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop . until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE

    until           shift and go to state 181


state 135

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals . arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 182
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 136

    (69) assign -> let ids_access equals logic_expression . ACTION_ASSIGN_VALUE
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (103) ACTION_ASSIGN_VALUE -> .
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    dim             reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    while           reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    do              reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    for             reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    gosub           reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    dunkelCls       reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    let             reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    if              reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    id              reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    dunkelPrint     reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    dunkelRead      reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    end             reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    loop            reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    wend            reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    return          reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    else            reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    elsif           reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    next            reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    ACTION_ASSIGN_VALUE            shift and go to state 183
    logic_operator                 shift and go to state 124

state 137

    (70) assign -> let ids_access equals arithmetic_expression . ACTION_ASSIGN_VALUE
    (27) logic_expression -> arithmetic_expression .
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (103) ACTION_ASSIGN_VALUE -> .
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! reduce/reduce conflict for dim resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for while resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for do resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for for resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for gosub resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for let resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for if resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for id resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for end resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for loop resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for wend resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for return resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for else resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for elsif resolved using rule 27 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for next resolved using rule 27 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 27 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 27 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 27 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 27 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 27 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 27 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 27 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 27 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 27 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 27 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

  ! dim             [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! while           [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! do              [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! for             [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! gosub           [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! dunkelCls       [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! let             [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! if              [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! id              [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! dunkelPrint     [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! dunkelRead      [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! end             [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! loop            [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! wend            [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! return          [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! else            [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! elsif           [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]
  ! next            [ reduce using rule 103 (ACTION_ASSIGN_VALUE -> .) ]

    ACTION_ASSIGN_VALUE            shift and go to state 184
    arithmetic_operator            shift and go to state 91

state 138

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 185
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 139

    (56) ids_access -> open_parenthesis ids_access close_parenthesis .

    equals          reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    comma           reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelCls       reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    else            reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    elsif           reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 56 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 140

    (85) multiple_print -> multiple_print comma multiple_print .
    (85) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelCls       reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    else            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    elsif           reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 84

  ! comma           [ reduce using rule 85 (multiple_print -> multiple_print comma multiple_print .) ]


state 141

    (40) arithmetic_expression -> open_parenthesis arithmetic_expression . close_parenthesis
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 143
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 142

    (82) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis . ACTION_CONSOLE_WRITE
    (123) ACTION_CONSOLE_WRITE -> .

    dim             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    while           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    do              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    for             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    gosub           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelCls       reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    let             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    if              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    id              reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelPrint     reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    dunkelRead      reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    end             reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    loop            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    wend            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    return          reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    else            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    elsif           reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)
    next            reduce using rule 123 (ACTION_CONSOLE_WRITE -> .)

    ACTION_CONSOLE_WRITE           shift and go to state 186

state 143

    (40) arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .

    sum             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    substraction    reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    multiplication  reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    division        reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    exponent        reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    comma           reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dim             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    while           reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    do              reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    for             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    gosub           reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelCls       reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    let             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    if              reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    id              reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelRead      reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    end             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    loop            reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    wend            reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    return          reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    else            reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    elsif           reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    next            reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_parenthesis reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    and             reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    or              reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_equal        reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_not_equal    reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_than    reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_than       reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    to              reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_brackets  reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)
    step            reduce using rule 40 (arithmetic_expression -> open_parenthesis arithmetic_expression close_parenthesis .)


state 144

    (51) value -> open_parenthesis value close_parenthesis .

    sum             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    substraction    reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    multiplication  reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    division        reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    exponent        reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    comma           reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    dim             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    while           reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    do              reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    for             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    gosub           reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    dunkelCls       reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    let             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    if              reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    id              reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    dunkelPrint     reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    dunkelRead      reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    end             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    loop            reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    wend            reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    return          reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    else            reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    elsif           reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    next            reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    close_parenthesis reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    and             reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    or              reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    is_equal        reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    is_not_equal    reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    greater_than    reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    greater_or_equal_than reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    less_than       reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    less_or_equal_than reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    to              reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    close_brackets  reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)
    step            reduce using rule 51 (value -> open_parenthesis value close_parenthesis .)


state 145

    (52) ids_access -> id ACTION_ADD_VAR_VALUE .
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (60) real_value -> id ACTION_ADD_VAR_VALUE .

  ! reduce/reduce conflict for close_parenthesis resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for sum resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 138

  ! close_parenthesis [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! sum             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 60 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 146

    (39) arithmetic_expression -> arithmetic_expression arithmetic_operator value . ACTION_ADD_QUADRUPLET
    (106) ACTION_ADD_QUADRUPLET -> .

    sum             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    substraction    reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    multiplication  reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    division        reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    exponent        reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    close_parenthesis reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    is_equal        reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    is_not_equal    reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    greater_than    reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    greater_or_equal_than reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    less_than       reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    less_or_equal_than reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    to              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    close_brackets  reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    step            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 187

state 147

    (51) value -> open_parenthesis . value close_parenthesis
    (56) ids_access -> open_parenthesis . ids_access close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis

    not             shift and go to state 51
    open_parenthesis shift and go to state 147
    id              shift and go to state 90
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57

    value                          shift and go to state 188
    ids_access                     shift and go to state 89
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53

state 148

    (41) arithmetic_operator -> sum ACTION_ADD_OPERATOR .

    not             reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    id              reduce using rule 41 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)


state 149

    (42) arithmetic_operator -> substraction ACTION_ADD_OPERATOR .

    not             reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    id              reduce using rule 42 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)


state 150

    (43) arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .

    not             reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    id              reduce using rule 43 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)


state 151

    (44) arithmetic_operator -> division ACTION_ADD_OPERATOR .

    not             reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    id              reduce using rule 44 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)


state 152

    (45) arithmetic_operator -> exponent ACTION_ADD_OPERATOR .

    not             reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    id              reduce using rule 45 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)


state 153

    (50) value -> not possible_values ACTION_ADD_NOT_OPERAND .

    sum             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    substraction    reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    multiplication  reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    division        reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    exponent        reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    comma           reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dim             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    while           reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    do              reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    for             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    gosub           reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelCls       reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    let             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    if              reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    id              reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelPrint     reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    dunkelRead      reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    end             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    loop            reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    wend            reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    return          reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    else            reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    elsif           reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    next            reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    close_parenthesis reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    and             reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    or              reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    is_equal        reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    is_not_equal    reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    greater_than    reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    greater_or_equal_than reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    less_than       reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    less_or_equal_than reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    to              reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    close_brackets  reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)
    step            reduce using rule 50 (value -> not possible_values ACTION_ADD_NOT_OPERAND .)


state 154

    (87) possible_read -> string comma multiple_read .
    (90) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 87 (possible_read -> string comma multiple_read .)
    while           reduce using rule 87 (possible_read -> string comma multiple_read .)
    do              reduce using rule 87 (possible_read -> string comma multiple_read .)
    for             reduce using rule 87 (possible_read -> string comma multiple_read .)
    gosub           reduce using rule 87 (possible_read -> string comma multiple_read .)
    dunkelCls       reduce using rule 87 (possible_read -> string comma multiple_read .)
    let             reduce using rule 87 (possible_read -> string comma multiple_read .)
    if              reduce using rule 87 (possible_read -> string comma multiple_read .)
    id              reduce using rule 87 (possible_read -> string comma multiple_read .)
    dunkelPrint     reduce using rule 87 (possible_read -> string comma multiple_read .)
    dunkelRead      reduce using rule 87 (possible_read -> string comma multiple_read .)
    end             reduce using rule 87 (possible_read -> string comma multiple_read .)
    loop            reduce using rule 87 (possible_read -> string comma multiple_read .)
    wend            reduce using rule 87 (possible_read -> string comma multiple_read .)
    return          reduce using rule 87 (possible_read -> string comma multiple_read .)
    else            reduce using rule 87 (possible_read -> string comma multiple_read .)
    elsif           reduce using rule 87 (possible_read -> string comma multiple_read .)
    next            reduce using rule 87 (possible_read -> string comma multiple_read .)
    comma           shift and go to state 104


state 155

    (90) multiple_read -> multiple_read comma ids_access .

    comma           reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    dim             reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    while           reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    do              reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    for             reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    gosub           reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    dunkelCls       reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    let             reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    if              reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    id              reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    dunkelPrint     reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    dunkelRead      reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    end             reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    loop            reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    wend            reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    return          reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    else            reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    elsif           reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)
    next            reduce using rule 90 (multiple_read -> multiple_read comma ids_access .)


state 156

    (63) subroutines -> sub procedure id . ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (101) ACTION_ADD_PROCEDURE -> .

    dim             reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    while           reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    do              reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    for             reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    gosub           reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    dunkelCls       reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    let             reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    if              reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    id              reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    dunkelPrint     reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    dunkelRead      reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)
    return          reduce using rule 101 (ACTION_ADD_PROCEDURE -> .)

    ACTION_ADD_PROCEDURE           shift and go to state 189

state 157

    (64) subroutines -> sub function id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> sub function id . ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub function id . ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function id . ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (100) ACTION_ADD_FUNCTION -> .

    open_parenthesis reduce using rule 100 (ACTION_ADD_FUNCTION -> .)

    ACTION_ADD_FUNCTION            shift and go to state 190

state 158

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 191


state 159

    (74) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS . close_parenthesis

    close_parenthesis shift and go to state 192


state 160

    (77) arguments -> arguments comma . arguments
    (75) arguments -> . ByVal value ACTION_ADD_FUNCTION_OPERAND
    (76) arguments -> . ByRef id ACTION_ADD_FUNCTION_OPERAND
    (77) arguments -> . arguments comma arguments

    ByVal           shift and go to state 113
    ByRef           shift and go to state 114

    arguments                      shift and go to state 193

state 161

    (75) arguments -> ByVal value . ACTION_ADD_FUNCTION_OPERAND
    (97) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 97 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 97 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 194

state 162

    (76) arguments -> ByRef id . ACTION_ADD_FUNCTION_OPERAND
    (97) ACTION_ADD_FUNCTION_OPERAND -> .

    comma           reduce using rule 97 (ACTION_ADD_FUNCTION_OPERAND -> .)
    close_parenthesis reduce using rule 97 (ACTION_ADD_FUNCTION_OPERAND -> .)

    ACTION_ADD_FUNCTION_OPERAND    shift and go to state 195

state 163

    (18) conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .

    dim             reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    while           reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    do              reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    for             reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    gosub           reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    dunkelCls       reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    let             reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    if              reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    id              reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    dunkelPrint     reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    dunkelRead      reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    end             reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    loop            reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    wend            reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    return          reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    else            reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    elsif           reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)
    next            reduce using rule 18 (conditions -> base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF .)


state 164

    (19) conditions -> base_if else ACTION_FILL_JUMP inside_logic end . if ACTION_FILL_JUMP_END_IF

    if              shift and go to state 196


state 165

    (20) conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .

    dim             reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    while           reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    do              reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    for             reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    gosub           reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    dunkelCls       reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    let             reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    if              reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    id              reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    dunkelPrint     reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    dunkelRead      reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    end             reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    loop            reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    wend            reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    return          reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    else            reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    elsif           reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)
    next            reduce using rule 20 (conditions -> base_if else_ifs end if ACTION_FILL_JUMP_END_IF .)


state 166

    (21) conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic . end if ACTION_FILL_JUMP_END_IF

    end             shift and go to state 197


state 167

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis . logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 198
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 168

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression . close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 199
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 169

    (29) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 29 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 170

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis then . ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (110) ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .

    dim             reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    while           reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    do              reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    for             reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    gosub           reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelCls       reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    let             reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    if              reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    id              reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelPrint     reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    dunkelRead      reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    else            reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    elsif           reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)
    end             reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_ADD_QUADRUPLET_EMPTY_JUMP shift and go to state 200

state 171

    (28) logic_expression -> logic_expression logic_operator logic_expression . ACTION_ADD_QUADRUPLET
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (106) ACTION_ADD_QUADRUPLET -> .
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .)
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

  ! and             [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! or              [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_equal        [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_not_equal    [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_than    [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_or_equal_than [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_than       [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_or_equal_than [ reduce using rule 106 (ACTION_ADD_QUADRUPLET -> .) ]

    logic_operator                 shift and go to state 124
    ACTION_ADD_QUADRUPLET          shift and go to state 201

state 172

    (30) logic_operator -> and ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)
    not             reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)
    id              reduce using rule 30 (logic_operator -> and ACTION_ADD_OPERATOR .)


state 173

    (31) logic_operator -> or ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)
    not             reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)
    id              reduce using rule 31 (logic_operator -> or ACTION_ADD_OPERATOR .)


state 174

    (32) logic_operator -> is_equal ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 32 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)


state 175

    (33) logic_operator -> is_not_equal ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 33 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)


state 176

    (34) logic_operator -> greater_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 34 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)


state 177

    (35) logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 35 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)


state 178

    (36) logic_operator -> less_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 36 (logic_operator -> less_than ACTION_ADD_OPERATOR .)


state 179

    (37) logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .

    open_parenthesis reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    bool_value      reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 37 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)


state 180

    (24) loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP . inside_logic wend ACTION_WHILE_GOTO
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 202
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 181

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until . open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE

    open_parenthesis shift and go to state 203


state 182

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression . ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (103) ACTION_ASSIGN_VALUE -> .
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    to              reduce using rule 103 (ACTION_ASSIGN_VALUE -> .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    ACTION_ASSIGN_VALUE            shift and go to state 204
    arithmetic_operator            shift and go to state 91

state 183

    (69) assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .

    dim             reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    while           reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    do              reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    for             reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    gosub           reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    dunkelCls       reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    let             reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    if              reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    id              reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    dunkelPrint     reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    dunkelRead      reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    end             reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    loop            reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    wend            reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    return          reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    else            reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    elsif           reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)
    next            reduce using rule 69 (assign -> let ids_access equals logic_expression ACTION_ASSIGN_VALUE .)


state 184

    (70) assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .

    dim             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    while           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    do              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    for             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    gosub           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    dunkelCls       reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    let             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    if              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    id              reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    dunkelPrint     reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    dunkelRead      reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    end             reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    loop            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    wend            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    return          reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    else            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    elsif           reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)
    next            reduce using rule 70 (assign -> let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE .)


state 185

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 205
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 186

    (82) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .

    dim             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    while           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    do              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    for             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    gosub           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    dunkelCls       reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    let             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    if              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    id              reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    dunkelPrint     reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    dunkelRead      reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    end             reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    loop            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    wend            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    return          reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    else            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    elsif           reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)
    next            reduce using rule 82 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE .)


state 187

    (39) arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .

    sum             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_parenthesis reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    to              reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_brackets  reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    step            reduce using rule 39 (arithmetic_expression -> arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET .)


state 188

    (51) value -> open_parenthesis value . close_parenthesis

    close_parenthesis shift and go to state 144


state 189

    (63) subroutines -> sub procedure id ACTION_ADD_PROCEDURE . inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 206
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 190

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION . open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> sub function id ACTION_ADD_FUNCTION . open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub function id ACTION_ADD_FUNCTION . open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function id ACTION_ADD_FUNCTION . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines

    open_parenthesis shift and go to state 207


state 191

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 208


state 192

    (74) functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .

    dim             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    while           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    do              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    for             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    gosub           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelCls       reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    let             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    if              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    id              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelPrint     reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    dunkelRead      reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    end             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    loop            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    wend            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    return          reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    else            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    elsif           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    next            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    sum             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    substraction    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    multiplication  reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    division        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    exponent        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    comma           reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_parenthesis reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    and             reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    or              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_equal        reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    is_not_equal    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_than    reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    greater_or_equal_than reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_than       reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    less_or_equal_than reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    to              reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    close_brackets  reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)
    step            reduce using rule 74 (functions -> id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis .)


state 193

    (77) arguments -> arguments comma arguments .
    (77) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 77 (arguments -> arguments comma arguments .)
    comma           shift and go to state 160

  ! comma           [ reduce using rule 77 (arguments -> arguments comma arguments .) ]


state 194

    (75) arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 75 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 75 (arguments -> ByVal value ACTION_ADD_FUNCTION_OPERAND .)


state 195

    (76) arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .

    comma           reduce using rule 76 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)
    close_parenthesis reduce using rule 76 (arguments -> ByRef id ACTION_ADD_FUNCTION_OPERAND .)


state 196

    (19) conditions -> base_if else ACTION_FILL_JUMP inside_logic end if . ACTION_FILL_JUMP_END_IF
    (115) ACTION_FILL_JUMP_END_IF -> .

    dim             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    do              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    gosub           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelCls       reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    let             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelPrint     reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelRead      reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    end             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    loop            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    wend            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    return          reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    else            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    elsif           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    next            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 209

state 197

    (21) conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end . if ACTION_FILL_JUMP_END_IF

    if              shift and go to state 210


state 198

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression . close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 211
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 199

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis . ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (110) ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .

    then            reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_ADD_QUADRUPLET_EMPTY_JUMP shift and go to state 212

state 200

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP . inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 213
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 201

    (28) logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .

    close_parenthesis reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 28 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)


state 202

    (24) loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic . wend ACTION_WHILE_GOTO

    wend            shift and go to state 214


state 203

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis . logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (27) logic_expression -> . arithmetic_expression
    (28) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (29) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 73
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    logic_expression               shift and go to state 215
    arithmetic_expression          shift and go to state 75
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 204

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE . to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO

    to              shift and go to state 216


state 205

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (107) ACTION_ADD_ONE_DIM_OPERAND -> .

    open_brackets   shift and go to state 217
    equals          reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    sum             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    substraction    reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    multiplication  reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    division        reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    exponent        reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    comma           reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dim             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    while           reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    do              reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    for             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    gosub           reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    let             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    if              reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    id              reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    end             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    loop            reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    wend            reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    return          reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    else            reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    elsif           reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    next            reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    and             reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    or              reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_equal        reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_than    reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_than       reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    to              reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    step            reduce using rule 107 (ACTION_ADD_ONE_DIM_OPERAND -> .)

    ACTION_ADD_ONE_DIM_OPERAND     shift and go to state 218

state 206

    (63) subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic . return ACTION_ADD_END_FUNCTION subroutines

    return          shift and go to state 219


state 207

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis . close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis . parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis . close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (71) parameters -> . variable
    (72) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 220
    dim             shift and go to state 9

    parameters                     shift and go to state 221
    variable                       shift and go to state 222

state 208

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    else            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    elsif           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 223


state 209

    (19) conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .

    dim             reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    while           reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    do              reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    for             reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    gosub           reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelCls       reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    let             reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    if              reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    id              reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelPrint     reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelRead      reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    end             reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    loop            reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    wend            reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    return          reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    else            reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    elsif           reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    next            reduce using rule 19 (conditions -> base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)


state 210

    (21) conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if . ACTION_FILL_JUMP_END_IF
    (115) ACTION_FILL_JUMP_END_IF -> .

    dim             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    do              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    gosub           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelCls       reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    let             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelPrint     reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    dunkelRead      reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    end             reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    loop            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    wend            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    return          reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    else            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    elsif           reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)
    next            reduce using rule 115 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 224

state 211

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis . ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (110) ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .

    then            reduce using rule 110 (ACTION_ADD_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_ADD_QUADRUPLET_EMPTY_JUMP shift and go to state 225

state 212

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP . then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    then            shift and go to state 226


state 213

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic . ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (112) ACTION_NEW_IF -> .

    else            reduce using rule 112 (ACTION_NEW_IF -> .)
    elsif           reduce using rule 112 (ACTION_NEW_IF -> .)
    end             reduce using rule 112 (ACTION_NEW_IF -> .)

    ACTION_NEW_IF                  shift and go to state 227

state 214

    (24) loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend . ACTION_WHILE_GOTO
    (120) ACTION_WHILE_GOTO -> .

    dim             reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    while           reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    do              reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    for             reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    gosub           reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    dunkelCls       reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    let             reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    if              reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    id              reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    dunkelPrint     reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    dunkelRead      reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    end             reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    loop            reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    wend            reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    return          reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    else            reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    elsif           reduce using rule 120 (ACTION_WHILE_GOTO -> .)
    next            reduce using rule 120 (ACTION_WHILE_GOTO -> .)

    ACTION_WHILE_GOTO              shift and go to state 228

state 215

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression . close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (28) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_operator -> . and ACTION_ADD_OPERATOR
    (31) logic_operator -> . or ACTION_ADD_OPERATOR
    (32) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 229
    and             shift and go to state 125
    or              shift and go to state 126
    is_equal        shift and go to state 127
    is_not_equal    shift and go to state 128
    greater_than    shift and go to state 129
    greater_or_equal_than shift and go to state 130
    less_than       shift and go to state 131
    less_or_equal_than shift and go to state 132

    logic_operator                 shift and go to state 124

state 216

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to . ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (116) ACTION_FOR_JUMP_BACK -> .

    open_parenthesis reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)
    not             reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)
    word_value      reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)
    float_value     reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)
    bool_value      reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)
    id              reduce using rule 116 (ACTION_FOR_JUMP_BACK -> .)

    ACTION_FOR_JUMP_BACK           shift and go to state 230

state 217

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 231
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 218

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .

    equals          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    sum             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    substraction    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    multiplication  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    division        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    exponent        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dim             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    while           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    do              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    for             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    gosub           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelCls       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    let             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    if              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    id              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelRead      reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    end             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    loop            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    wend            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    return          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    else            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    elsif           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    next            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    and             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    or              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_equal        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_not_equal    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_than    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_than       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    to              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_brackets  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    step            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)


state 219

    (63) subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic return . ACTION_ADD_END_FUNCTION subroutines
    (102) ACTION_ADD_END_FUNCTION -> .

    sub             reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)
    $end            reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)

    ACTION_ADD_END_FUNCTION        shift and go to state 232

state 220

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis . inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis . as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    as              shift and go to state 234
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 233
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 221

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters . close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (72) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 235
    comma           shift and go to state 236


state 222

    (71) parameters -> variable .

    close_parenthesis reduce using rule 71 (parameters -> variable .)
    comma           reduce using rule 71 (parameters -> variable .)


state 223

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 237


state 224

    (21) conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .

    dim             reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    while           reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    do              reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    for             reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    gosub           reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelCls       reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    let             reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    if              reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    id              reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelPrint     reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    dunkelRead      reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    end             reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    loop            reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    wend            reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    return          reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    else            reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    elsif           reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)
    next            reduce using rule 21 (conditions -> base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF .)


state 225

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP . then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF

    then            shift and go to state 238


state 226

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then . inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 239
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 227

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (113) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    else            reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    elsif           reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    end             reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 240

state 228

    (24) loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .

    dim             reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    while           reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    do              reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    for             reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    gosub           reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    dunkelCls       reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    let             reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    if              reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    id              reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    dunkelPrint     reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    dunkelRead      reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    end             reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    loop            reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    wend            reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    return          reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    else            reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    elsif           reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)
    next            reduce using rule 24 (loops -> while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO .)


state 229

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis . ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (122) ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .

    dim             reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    while           reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    do              reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    for             reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    gosub           reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    dunkelCls       reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    let             reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    if              reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    id              reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    dunkelPrint     reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    dunkelRead      reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    end             reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    loop            reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    wend            reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    return          reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    else            reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    elsif           reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)
    next            reduce using rule 122 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE shift and go to state 241

state 230

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK . arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 242
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 231

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 243
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 232

    (63) subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

    sub             shift and go to state 64
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 244

state 233

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic . end sub ACTION_ADD_END_FUNCTION subroutines

    end             shift and go to state 245


state 234

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as . variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 108
    float           shift and go to state 109
    bool            shift and go to state 110

    variable_type                  shift and go to state 246

state 235

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis . inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    as              shift and go to state 248
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 247
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 236

    (72) parameters -> parameters comma . parameters
    (71) parameters -> . variable
    (72) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 249
    variable                       shift and go to state 222

state 237

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 250


state 238

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then . inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 251
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 239

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (113) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    end             reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    elsif           reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 252

state 240

    (17) base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .

    else            reduce using rule 17 (base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    elsif           reduce using rule 17 (base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    end             reduce using rule 17 (base_if -> if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)


state 241

    (25) loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .

    dim             reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    while           reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    do              reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    for             reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    gosub           reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    dunkelCls       reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    let             reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    if              reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    id              reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    dunkelPrint     reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    dunkelRead      reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    end             reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    loop            reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    wend            reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    return          reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    else            reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    elsif           reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)
    next            reduce using rule 25 (loops -> do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE .)


state 242

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression . ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (117) ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP -> .
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    step            reduce using rule 117 (ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP -> .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP shift and go to state 253
    arithmetic_operator            shift and go to state 91

state 243

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (108) ACTION_ADD_TWO_DIM_OPERAND -> .

    open_brackets   shift and go to state 254
    equals          reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    sum             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    substraction    reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    multiplication  reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    division        reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    exponent        reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    comma           reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dim             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    while           reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    do              reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    for             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    gosub           reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    let             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    if              reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    id              reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    end             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    loop            reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    wend            reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    return          reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    else            reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    elsif           reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    next            reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    and             reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    or              reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_equal        reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_than    reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_than       reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    to              reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_brackets  reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    step            reduce using rule 108 (ACTION_ADD_TWO_DIM_OPERAND -> .)

    ACTION_ADD_TWO_DIM_OPERAND     shift and go to state 255

state 244

    (63) subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines .

    $end            reduce using rule 63 (subroutines -> sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines .)


state 245

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end . sub ACTION_ADD_END_FUNCTION subroutines

    sub             shift and go to state 256


state 246

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type . inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 257
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 247

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic . end sub ACTION_ADD_END_FUNCTION subroutines

    end             shift and go to state 258


state 248

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 108
    float           shift and go to state 109
    bool            shift and go to state 110

    variable_type                  shift and go to state 259

state 249

    (72) parameters -> parameters comma parameters .
    (72) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 72 (parameters -> parameters comma parameters .)
    comma           shift and go to state 236

  ! comma           [ reduce using rule 72 (parameters -> parameters comma parameters .) ]


state 250

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 260


state 251

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (113) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    end             reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    elsif           reduce using rule 113 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 261

state 252

    (22) else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .

    end             reduce using rule 22 (else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    else            reduce using rule 22 (else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    elsif           reduce using rule 22 (else_ifs -> elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)


state 253

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP . step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO

    step            shift and go to state 262


state 254

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 263
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 255

    (54) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .

    equals          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    sum             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    substraction    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    multiplication  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    division        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    exponent        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    comma           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dim             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    while           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    do              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    for             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    gosub           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelCls       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    let             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    if              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    id              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelPrint     reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelRead      reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    end             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    loop            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    wend            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    return          reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    else            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    elsif           reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    next            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_parenthesis reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    and             reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    or              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_equal        reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_not_equal    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_than    reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_than       reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_or_equal_than reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    to              reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_brackets  reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    step            reduce using rule 54 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)


state 256

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub . ACTION_ADD_END_FUNCTION subroutines
    (102) ACTION_ADD_END_FUNCTION -> .

    sub             reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)
    $end            reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)

    ACTION_ADD_END_FUNCTION        shift and go to state 264

state 257

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic . end sub ACTION_ADD_END_FUNCTION subroutines

    end             shift and go to state 265


state 258

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end . sub ACTION_ADD_END_FUNCTION subroutines

    sub             shift and go to state 266


state 259

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 267
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 260

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 268


state 261

    (23) else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .

    end             reduce using rule 23 (else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    else            reduce using rule 23 (else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)
    elsif           reduce using rule 23 (else_ifs -> else_ifs elsif ACTION_FILL_JUMP open_parenthesis logic_expression close_parenthesis ACTION_ADD_QUADRUPLET_EMPTY_JUMP then inside_logic ACTION_QUADRUPLET_EMPTY_JUMP_END_IF .)


state 262

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step . arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (38) arithmetic_expression -> . value
    (39) arithmetic_expression -> . arithmetic_expression arithmetic_operator value ACTION_ADD_QUADRUPLET
    (40) arithmetic_expression -> . open_parenthesis arithmetic_expression close_parenthesis
    (49) value -> . possible_values
    (50) value -> . not possible_values ACTION_ADD_NOT_OPERAND
    (51) value -> . open_parenthesis value close_parenthesis
    (46) possible_values -> . real_value
    (47) possible_values -> . functions
    (48) possible_values -> . ids_access
    (57) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (58) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (59) real_value -> . bool_value ACTION_ADD_BOOL_VALUE
    (60) real_value -> . id ACTION_ADD_VAR_VALUE
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (54) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (55) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (56) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 85
    not             shift and go to state 51
    word_value      shift and go to state 55
    float_value     shift and go to state 56
    bool_value      shift and go to state 57
    id              shift and go to state 58

    arithmetic_expression          shift and go to state 269
    value                          shift and go to state 49
    possible_values                shift and go to state 50
    real_value                     shift and go to state 52
    functions                      shift and go to state 53
    ids_access                     shift and go to state 54

state 263

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 270
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    arithmetic_operator            shift and go to state 91

state 264

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

    sub             shift and go to state 64
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 271

state 265

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end . sub ACTION_ADD_END_FUNCTION subroutines

    sub             shift and go to state 272


state 266

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub . ACTION_ADD_END_FUNCTION subroutines
    (102) ACTION_ADD_END_FUNCTION -> .

    sub             reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)
    $end            reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)

    ACTION_ADD_END_FUNCTION        shift and go to state 273

state 267

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub ACTION_ADD_END_FUNCTION subroutines

    end             shift and go to state 274


state 268

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 275


state 269

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression . ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (39) arithmetic_expression -> arithmetic_expression . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (118) ACTION_FOR_INCREMENT -> .
    (41) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (42) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    dim             reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    while           reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    do              reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    for             reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    gosub           reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    dunkelCls       reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    let             reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    if              reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    id              reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    dunkelPrint     reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    dunkelRead      reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    next            reduce using rule 118 (ACTION_FOR_INCREMENT -> .)
    sum             shift and go to state 92
    substraction    shift and go to state 93
    multiplication  shift and go to state 94
    division        shift and go to state 95
    exponent        shift and go to state 96

    ACTION_FOR_INCREMENT           shift and go to state 276
    arithmetic_operator            shift and go to state 91

state 270

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_THREE_DIM_OPERAND
    (109) ACTION_ADD_THREE_DIM_OPERAND -> .

    equals          reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    sum             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    substraction    reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    multiplication  reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    division        reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    exponent        reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    comma           reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dim             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    while           reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    do              reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    for             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    gosub           reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    let             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    if              reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    id              reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    end             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    loop            reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    wend            reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    return          reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    else            reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    elsif           reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    next            reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    and             reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    or              reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_equal        reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_than    reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_than       reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    to              reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    step            reduce using rule 109 (ACTION_ADD_THREE_DIM_OPERAND -> .)

    ACTION_ADD_THREE_DIM_OPERAND   shift and go to state 277

state 271

    (64) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .

    $end            reduce using rule 64 (subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .)


state 272

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub . ACTION_ADD_END_FUNCTION subroutines
    (102) ACTION_ADD_END_FUNCTION -> .

    sub             reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)
    $end            reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)

    ACTION_ADD_END_FUNCTION        shift and go to state 278

state 273

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

    sub             shift and go to state 64
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 279

state 274

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub ACTION_ADD_END_FUNCTION subroutines

    sub             shift and go to state 280


state 275

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 276

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT . inside_logic next id ACTION_FOR_GOTO
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (18) conditions -> . base_if ACTION_FILL_JUMP end if ACTION_FILL_JUMP_END_IF
    (19) conditions -> . base_if else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (20) conditions -> . base_if else_ifs end if ACTION_FILL_JUMP_END_IF
    (21) conditions -> . base_if else_ifs else ACTION_FILL_JUMP inside_logic end if ACTION_FILL_JUMP_END_IF
    (24) loops -> . while open_parenthesis logic_expression close_parenthesis ACTION_ADD_WHILE_QUADRUPLET_EMPTY_JUMP inside_logic wend ACTION_WHILE_GOTO
    (25) loops -> . do ACTION_DO_WHILE_INDEX inside_logic loop until open_parenthesis logic_expression close_parenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE
    (26) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO
    (61) calls -> . gosub id ACTION_ADD_SUBROUTINE_CALL
    (62) calls -> . functions
    (78) read_or_write -> . print
    (79) read_or_write -> . read
    (80) read_or_write -> . dunkelCls
    (69) assign -> . let ids_access equals logic_expression ACTION_ASSIGN_VALUE
    (70) assign -> . let ids_access equals arithmetic_expression ACTION_ASSIGN_VALUE
    (17) base_if -> . if open_parenthesis logic_expression close_parenthesis then ACTION_ADD_QUADRUPLET_EMPTY_JUMP inside_logic ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF
    (73) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis close_parenthesis
    (74) functions -> . id ACTION_ADD_FUNCTION_CALL open_parenthesis arguments ACTION_ADD_PARAMETERS close_parenthesis
    (81) print -> . dunkelPrint multiple_print ACTION_CONSOLE_WRITE
    (82) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis ACTION_CONSOLE_WRITE
    (86) read -> . dunkelRead possible_read ACTION_CONSOLE_READ

    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    while           shift and go to state 13
    do              shift and go to state 14
    for             shift and go to state 15
    gosub           shift and go to state 16
    dunkelCls       shift and go to state 20
    let             shift and go to state 21
    if              shift and go to state 12
    id              shift and go to state 10
    dunkelPrint     shift and go to state 22
    dunkelRead      shift and go to state 23

    inside_logic                   shift and go to state 281
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    base_if                        shift and go to state 11
    functions                      shift and go to state 17
    print                          shift and go to state 18
    read                           shift and go to state 19

state 277

    (55) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .

    equals          reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    sum             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    substraction    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    multiplication  reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    division        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    exponent        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    comma           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dim             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    while           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    do              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    for             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    gosub           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelCls       reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    let             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    if              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    id              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelRead      reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    end             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    loop            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    wend            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    return          reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    else            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    elsif           reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    next            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_parenthesis reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    and             reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    or              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_equal        reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_not_equal    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_than    reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_than       reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    to              reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_brackets  reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    step            reduce using rule 55 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)


state 278

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

    sub             shift and go to state 64
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 282

state 279

    (65) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .

    $end            reduce using rule 65 (subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .)


state 280

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . ACTION_ADD_END_FUNCTION subroutines
    (102) ACTION_ADD_END_FUNCTION -> .

    sub             reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)
    $end            reduce using rule 102 (ACTION_ADD_END_FUNCTION -> .)

    ACTION_ADD_END_FUNCTION        shift and go to state 283

state 281

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic . next id ACTION_FOR_GOTO

    next            shift and go to state 284


state 282

    (66) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .

    $end            reduce using rule 66 (subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .)


state 283

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION . subroutines
    (63) subroutines -> . sub procedure id ACTION_ADD_PROCEDURE inside_logic return ACTION_ADD_END_FUNCTION subroutines
    (64) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (65) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (66) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (67) subroutines -> . sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines
    (68) subroutines -> .

    sub             shift and go to state 64
    $end            reduce using rule 68 (subroutines -> .)

    subroutines                    shift and go to state 285

state 284

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next . id ACTION_FOR_GOTO

    id              shift and go to state 286


state 285

    (67) subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .

    $end            reduce using rule 67 (subroutines -> sub function id ACTION_ADD_FUNCTION open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub ACTION_ADD_END_FUNCTION subroutines .)


state 286

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id . ACTION_FOR_GOTO
    (119) ACTION_FOR_GOTO -> .

    dim             reduce using rule 119 (ACTION_FOR_GOTO -> .)
    while           reduce using rule 119 (ACTION_FOR_GOTO -> .)
    do              reduce using rule 119 (ACTION_FOR_GOTO -> .)
    for             reduce using rule 119 (ACTION_FOR_GOTO -> .)
    gosub           reduce using rule 119 (ACTION_FOR_GOTO -> .)
    dunkelCls       reduce using rule 119 (ACTION_FOR_GOTO -> .)
    let             reduce using rule 119 (ACTION_FOR_GOTO -> .)
    if              reduce using rule 119 (ACTION_FOR_GOTO -> .)
    id              reduce using rule 119 (ACTION_FOR_GOTO -> .)
    dunkelPrint     reduce using rule 119 (ACTION_FOR_GOTO -> .)
    dunkelRead      reduce using rule 119 (ACTION_FOR_GOTO -> .)
    end             reduce using rule 119 (ACTION_FOR_GOTO -> .)
    loop            reduce using rule 119 (ACTION_FOR_GOTO -> .)
    wend            reduce using rule 119 (ACTION_FOR_GOTO -> .)
    return          reduce using rule 119 (ACTION_FOR_GOTO -> .)
    else            reduce using rule 119 (ACTION_FOR_GOTO -> .)
    elsif           reduce using rule 119 (ACTION_FOR_GOTO -> .)
    next            reduce using rule 119 (ACTION_FOR_GOTO -> .)

    ACTION_FOR_GOTO                shift and go to state 287

state 287

    (26) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .

    dim             reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    while           reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    do              reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    for             reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    gosub           reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    dunkelCls       reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    let             reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    if              reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    id              reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    dunkelPrint     reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    dunkelRead      reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    end             reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    loop            reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    wend            reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    return          reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    else            reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    elsif           reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)
    next            reduce using rule 26 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression ACTION_ASSIGN_VALUE to ACTION_FOR_JUMP_BACK arithmetic_expression ACTION_ADD_FOR_QUADRUPLET_EMPTY_JUMP step arithmetic_expression ACTION_FOR_INCREMENT inside_logic next id ACTION_FOR_GOTO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for close_parenthesis in state 87 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 88 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 89 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 122 resolved as shift
WARNING: shift/reduce conflict for comma in state 140 resolved as shift
WARNING: shift/reduce conflict for and in state 171 resolved as shift
WARNING: shift/reduce conflict for or in state 171 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 171 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 171 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 171 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 171 resolved as shift
WARNING: shift/reduce conflict for less_than in state 171 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 171 resolved as shift
WARNING: shift/reduce conflict for comma in state 193 resolved as shift
WARNING: shift/reduce conflict for comma in state 249 resolved as shift
WARNING: reduce/reduce conflict in state 24 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 24
WARNING: reduce/reduce conflict in state 101 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 101
WARNING: reduce/reduce conflict in state 137 resolved using rule (logic_expression -> arithmetic_expression)
WARNING: rejected rule (ACTION_ASSIGN_VALUE -> <empty>) in state 137
WARNING: reduce/reduce conflict in state 145 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 145
WARNING: Rule (real_value -> id ACTION_ADD_VAR_VALUE) is never reduced
