Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if
Rule 18    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
Rule 19    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
Rule 20    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
Rule 21    else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic
Rule 22    else_ifs -> else_ifs else_ifs
Rule 23    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 24    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 25    loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 26    logic_expression -> arithmetic_expression
Rule 27    logic_expression -> bool_value ACTION_ADD_BOOL_VALUE
Rule 28    logic_expression -> not ACTION_ADD_OPERATOR logic_expression
Rule 29    logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
Rule 30    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 31    logic_operator -> and ACTION_ADD_OPERATOR
Rule 32    logic_operator -> or ACTION_ADD_OPERATOR
Rule 33    logic_operator -> is_equal ACTION_ADD_OPERATOR
Rule 34    logic_operator -> is_not_equal ACTION_ADD_OPERATOR
Rule 35    logic_operator -> greater_than ACTION_ADD_OPERATOR
Rule 36    logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR
Rule 37    logic_operator -> less_than ACTION_ADD_OPERATOR
Rule 38    logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR
Rule 39    arithmetic_expression -> value
Rule 40    arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET
Rule 41    arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
Rule 42    arithmetic_operator -> sum ACTION_ADD_OPERATOR
Rule 43    arithmetic_operator -> substraction ACTION_ADD_OPERATOR
Rule 44    arithmetic_operator -> multiplication ACTION_ADD_OPERATOR
Rule 45    arithmetic_operator -> division ACTION_ADD_OPERATOR
Rule 46    arithmetic_operator -> exponent ACTION_ADD_OPERATOR
Rule 47    value -> real_value
Rule 48    value -> functions
Rule 49    value -> ids_access
Rule 50    ids_access -> id ACTION_ADD_VAR_VALUE
Rule 51    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
Rule 52    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
Rule 53    ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
Rule 54    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 55    real_value -> word_value ACTION_ADD_WORD_VALUE
Rule 56    real_value -> float_value ACTION_ADD_FLOAT_VALUE
Rule 57    real_value -> id ACTION_ADD_VAR_VALUE
Rule 58    calls -> gosub id
Rule 59    calls -> functions
Rule 60    subroutines -> sub procedure id inside_logic return subroutines
Rule 61    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 62    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 63    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 64    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 65    subroutines -> <empty>
Rule 66    assign -> let ids_access equals logic_expression
Rule 67    assign -> let ids_access equals arithmetic_expression
Rule 68    parameters -> variable
Rule 69    parameters -> parameters comma parameters
Rule 70    functions -> id open_parenthesis close_parenthesis
Rule 71    functions -> id open_parenthesis arguments close_parenthesis
Rule 72    arguments -> ByVal value
Rule 73    arguments -> ByRef id
Rule 74    arguments -> arguments comma arguments
Rule 75    read_or_write -> print
Rule 76    read_or_write -> read
Rule 77    read_or_write -> dunkelCls
Rule 78    print -> dunkelPrint multiple_print
Rule 79    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 80    multiple_print -> string
Rule 81    multiple_print -> arithmetic_expression
Rule 82    multiple_print -> multiple_print comma multiple_print
Rule 83    read -> dunkelRead multiple_read
Rule 84    read -> dunkelRead string comma multiple_read
Rule 85    multiple_read -> ids_access
Rule 86    multiple_read -> multiple_read comma ids_access
Rule 87    ACTION_ADD_FOR_VALUE -> <empty>
Rule 88    ACTION_ADD_VAR_VALUE -> <empty>
Rule 89    ACTION_ADD_WORD_VALUE -> <empty>
Rule 90    ACTION_ADD_FLOAT_VALUE -> <empty>
Rule 91    ACTION_ADD_BOOL_VALUE -> <empty>
Rule 92    ACTION_ADD_OPERATOR -> <empty>
Rule 93    ACTION_ADD_QUADRUPLET -> <empty>
Rule 94    ACTION_ADD_ONE_DIM_OPERAND -> <empty>
Rule 95    ACTION_ADD_TWO_DIM_OPERAND -> <empty>
Rule 96    ACTION_ADD_THREE_DIM_OPERAND -> <empty>

Terminals, with rules where they appear

ByRef                : 73
ByVal                : 72
and                  : 31
as                   : 10 11 12 13 63 64
bool                 : 16
bool_value           : 27
close_braces         : 
close_brackets       : 11 12 12 13 13 13 51 52 52 53 53 53
close_parenthesis    : 17 18 19 20 21 23 24 30 54 61 62 63 64 70 71 79
colon                : 
comma                : 69 74 82 84 86
dim                  : 10 11 12 13
division             : 45
do                   : 24
dunkelCls            : 77
dunkelPrint          : 78 79
dunkelRead           : 83 84
else                 : 18 20
elsif                : 21
end                  : 1 2 17 18 19 20 61 62 63 64
end_if               : 
equals               : 25 66 67
error                : 
exit                 : 
exponent             : 46
false                : 
float                : 15
float_value          : 56
for                  : 25
function             : 61 62 63 64
gosub                : 58
goto                 : 
greater_or_equal_than : 36
greater_than         : 35
id                   : 10 11 12 13 25 25 50 51 52 53 57 58 60 61 62 63 64 70 71 73
if                   : 17 17 18 18 19 19 20 20
is_equal             : 33
is_not_equal         : 34
less_or_equal_than   : 38
less_than            : 37
let                  : 66 67
loop                 : 24
multiplication       : 44
next                 : 25
not                  : 28
open_braces          : 
open_brackets        : 11 12 12 13 13 13 51 52 52 53 53 53
open_parenthesis     : 17 18 19 20 21 23 24 30 54 61 62 63 64 70 71 79
or                   : 32
procedure            : 60
return               : 60
semicolon            : 
step                 : 25
string               : 80 84
sub                  : 60 61 61 62 62 63 63 64 64
substraction         : 43
sum                  : 42
then                 : 17 18 19 20 21
to                   : 25
true                 : 
until                : 24
wend                 : 23
while                : 23
word                 : 14
word_value           : 11 12 12 13 13 13 55

Nonterminals, with rules where they appear

ACTION_ADD_BOOL_VALUE : 27
ACTION_ADD_FLOAT_VALUE : 56
ACTION_ADD_FOR_VALUE : 25
ACTION_ADD_ONE_DIM_OPERAND : 51
ACTION_ADD_OPERATOR  : 28 31 32 33 34 35 36 37 38 42 43 44 45 46
ACTION_ADD_QUADRUPLET : 29 40 41
ACTION_ADD_THREE_DIM_OPERAND : 53
ACTION_ADD_TWO_DIM_OPERAND : 52
ACTION_ADD_VAR_VALUE : 50 51 52 53 57
ACTION_ADD_WORD_VALUE : 55
arguments            : 71 74 74
arithmetic_expression : 25 25 25 26 41 41 51 52 52 53 53 53 67 81
arithmetic_operator  : 40 41
assign               : 8
calls                : 6
conditions           : 4
else_ifs             : 19 20 22 22
functions            : 48 59
ids_access           : 49 54 66 67 85 86
inside_logic         : 1 2 3 4 5 6 7 8 17 18 18 19 20 20 21 23 24 25 60 61 62 63 64
logic_expression     : 17 18 19 20 21 23 24 28 29 29 30 66
logic_operator       : 29
loops                : 5
multiple_print       : 78 79 82 82
multiple_read        : 83 84 86
parameters           : 62 64 69 69
print                : 75
program              : 0
read                 : 76
read_or_write        : 7
real_value           : 47
subroutines          : 2 60 61 62 63 64
value                : 39 40 40 72
variable             : 3 68
variable_type        : 10 11 12 13 63 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 23


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 24
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 25
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 29
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 30


state 10

    (70) functions -> id . open_parenthesis close_parenthesis
    (71) functions -> id . open_parenthesis arguments close_parenthesis

    open_parenthesis shift and go to state 31


state 11

    (17) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if

    open_parenthesis shift and go to state 32


state 12

    (23) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 33


state 13

    (24) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 34
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 14

    (25) loops -> for . id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 35


state 15

    (58) calls -> gosub . id

    id              shift and go to state 36


state 16

    (59) calls -> functions .

    dim             reduce using rule 59 (calls -> functions .)
    if              reduce using rule 59 (calls -> functions .)
    while           reduce using rule 59 (calls -> functions .)
    do              reduce using rule 59 (calls -> functions .)
    for             reduce using rule 59 (calls -> functions .)
    gosub           reduce using rule 59 (calls -> functions .)
    dunkelCls       reduce using rule 59 (calls -> functions .)
    let             reduce using rule 59 (calls -> functions .)
    id              reduce using rule 59 (calls -> functions .)
    dunkelPrint     reduce using rule 59 (calls -> functions .)
    dunkelRead      reduce using rule 59 (calls -> functions .)
    end             reduce using rule 59 (calls -> functions .)
    loop            reduce using rule 59 (calls -> functions .)
    wend            reduce using rule 59 (calls -> functions .)
    return          reduce using rule 59 (calls -> functions .)
    else            reduce using rule 59 (calls -> functions .)
    elsif           reduce using rule 59 (calls -> functions .)
    next            reduce using rule 59 (calls -> functions .)


state 17

    (75) read_or_write -> print .

    dim             reduce using rule 75 (read_or_write -> print .)
    if              reduce using rule 75 (read_or_write -> print .)
    while           reduce using rule 75 (read_or_write -> print .)
    do              reduce using rule 75 (read_or_write -> print .)
    for             reduce using rule 75 (read_or_write -> print .)
    gosub           reduce using rule 75 (read_or_write -> print .)
    dunkelCls       reduce using rule 75 (read_or_write -> print .)
    let             reduce using rule 75 (read_or_write -> print .)
    id              reduce using rule 75 (read_or_write -> print .)
    dunkelPrint     reduce using rule 75 (read_or_write -> print .)
    dunkelRead      reduce using rule 75 (read_or_write -> print .)
    end             reduce using rule 75 (read_or_write -> print .)
    loop            reduce using rule 75 (read_or_write -> print .)
    wend            reduce using rule 75 (read_or_write -> print .)
    return          reduce using rule 75 (read_or_write -> print .)
    else            reduce using rule 75 (read_or_write -> print .)
    elsif           reduce using rule 75 (read_or_write -> print .)
    next            reduce using rule 75 (read_or_write -> print .)


state 18

    (76) read_or_write -> read .

    dim             reduce using rule 76 (read_or_write -> read .)
    if              reduce using rule 76 (read_or_write -> read .)
    while           reduce using rule 76 (read_or_write -> read .)
    do              reduce using rule 76 (read_or_write -> read .)
    for             reduce using rule 76 (read_or_write -> read .)
    gosub           reduce using rule 76 (read_or_write -> read .)
    dunkelCls       reduce using rule 76 (read_or_write -> read .)
    let             reduce using rule 76 (read_or_write -> read .)
    id              reduce using rule 76 (read_or_write -> read .)
    dunkelPrint     reduce using rule 76 (read_or_write -> read .)
    dunkelRead      reduce using rule 76 (read_or_write -> read .)
    end             reduce using rule 76 (read_or_write -> read .)
    loop            reduce using rule 76 (read_or_write -> read .)
    wend            reduce using rule 76 (read_or_write -> read .)
    return          reduce using rule 76 (read_or_write -> read .)
    else            reduce using rule 76 (read_or_write -> read .)
    elsif           reduce using rule 76 (read_or_write -> read .)
    next            reduce using rule 76 (read_or_write -> read .)


state 19

    (77) read_or_write -> dunkelCls .

    dim             reduce using rule 77 (read_or_write -> dunkelCls .)
    if              reduce using rule 77 (read_or_write -> dunkelCls .)
    while           reduce using rule 77 (read_or_write -> dunkelCls .)
    do              reduce using rule 77 (read_or_write -> dunkelCls .)
    for             reduce using rule 77 (read_or_write -> dunkelCls .)
    gosub           reduce using rule 77 (read_or_write -> dunkelCls .)
    dunkelCls       reduce using rule 77 (read_or_write -> dunkelCls .)
    let             reduce using rule 77 (read_or_write -> dunkelCls .)
    id              reduce using rule 77 (read_or_write -> dunkelCls .)
    dunkelPrint     reduce using rule 77 (read_or_write -> dunkelCls .)
    dunkelRead      reduce using rule 77 (read_or_write -> dunkelCls .)
    end             reduce using rule 77 (read_or_write -> dunkelCls .)
    loop            reduce using rule 77 (read_or_write -> dunkelCls .)
    wend            reduce using rule 77 (read_or_write -> dunkelCls .)
    return          reduce using rule 77 (read_or_write -> dunkelCls .)
    else            reduce using rule 77 (read_or_write -> dunkelCls .)
    elsif           reduce using rule 77 (read_or_write -> dunkelCls .)
    next            reduce using rule 77 (read_or_write -> dunkelCls .)


state 20

    (66) assign -> let . ids_access equals logic_expression
    (67) assign -> let . ids_access equals arithmetic_expression
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 37

state 21

    (78) print -> dunkelPrint . multiple_print
    (79) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (80) multiple_print -> . string
    (81) multiple_print -> . arithmetic_expression
    (82) multiple_print -> . multiple_print comma multiple_print
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 41
    string          shift and go to state 42
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    multiple_print                 shift and go to state 40
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 22

    (83) read -> dunkelRead . multiple_read
    (84) read -> dunkelRead . string comma multiple_read
    (85) multiple_read -> . ids_access
    (86) multiple_read -> . multiple_read comma ids_access
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 52
    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 51
    ids_access                     shift and go to state 53

state 23

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 55

  ! $end            [ reduce using rule 65 (subroutines -> .) ]

    subroutines                    shift and go to state 54

state 24

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    else            reduce using rule 3 (inside_logic -> variable inside_logic .)
    elsif           reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 25

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    else            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    elsif           reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 26

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    else            reduce using rule 5 (inside_logic -> loops inside_logic .)
    elsif           reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 27

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    else            reduce using rule 6 (inside_logic -> calls inside_logic .)
    elsif           reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 28

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    else            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    elsif           reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 29

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    else            reduce using rule 8 (inside_logic -> assign inside_logic .)
    elsif           reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 30

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 56


state 31

    (70) functions -> id open_parenthesis . close_parenthesis
    (71) functions -> id open_parenthesis . arguments close_parenthesis
    (72) arguments -> . ByVal value
    (73) arguments -> . ByRef id
    (74) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 57
    ByVal           shift and go to state 59
    ByRef           shift and go to state 60

    arguments                      shift and go to state 58

state 32

    (17) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 62
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 33

    (23) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 66
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 34

    (24) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 67


state 35

    (25) loops -> for id . ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (87) ACTION_ADD_FOR_VALUE -> .

    equals          reduce using rule 87 (ACTION_ADD_FOR_VALUE -> .)

    ACTION_ADD_FOR_VALUE           shift and go to state 68

state 36

    (58) calls -> gosub id .

    dim             reduce using rule 58 (calls -> gosub id .)
    if              reduce using rule 58 (calls -> gosub id .)
    while           reduce using rule 58 (calls -> gosub id .)
    do              reduce using rule 58 (calls -> gosub id .)
    for             reduce using rule 58 (calls -> gosub id .)
    gosub           reduce using rule 58 (calls -> gosub id .)
    dunkelCls       reduce using rule 58 (calls -> gosub id .)
    let             reduce using rule 58 (calls -> gosub id .)
    id              reduce using rule 58 (calls -> gosub id .)
    dunkelPrint     reduce using rule 58 (calls -> gosub id .)
    dunkelRead      reduce using rule 58 (calls -> gosub id .)
    end             reduce using rule 58 (calls -> gosub id .)
    loop            reduce using rule 58 (calls -> gosub id .)
    wend            reduce using rule 58 (calls -> gosub id .)
    return          reduce using rule 58 (calls -> gosub id .)
    else            reduce using rule 58 (calls -> gosub id .)
    elsif           reduce using rule 58 (calls -> gosub id .)
    next            reduce using rule 58 (calls -> gosub id .)


state 37

    (66) assign -> let ids_access . equals logic_expression
    (67) assign -> let ids_access . equals arithmetic_expression

    equals          shift and go to state 69


state 38

    (50) ids_access -> id . ACTION_ADD_VAR_VALUE
    (51) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (88) ACTION_ADD_VAR_VALUE -> .

    open_brackets   reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    equals          reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 70

state 39

    (54) ids_access -> open_parenthesis . ids_access close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 71

state 40

    (78) print -> dunkelPrint multiple_print .
    (82) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 78 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 78 (print -> dunkelPrint multiple_print .)
    dunkelCls       reduce using rule 78 (print -> dunkelPrint multiple_print .)
    let             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 78 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 78 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 78 (print -> dunkelPrint multiple_print .)
    else            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    elsif           reduce using rule 78 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 72


state 41

    (79) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (54) ids_access -> open_parenthesis . ids_access close_parenthesis
    (80) multiple_print -> . string
    (81) multiple_print -> . arithmetic_expression
    (82) multiple_print -> . multiple_print comma multiple_print
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis

    string          shift and go to state 42
    id              shift and go to state 75
    open_parenthesis shift and go to state 39
    word_value      shift and go to state 48
    float_value     shift and go to state 49

    multiple_print                 shift and go to state 73
    ids_access                     shift and go to state 74
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 42

    (80) multiple_print -> string .

    comma           reduce using rule 80 (multiple_print -> string .)
    dim             reduce using rule 80 (multiple_print -> string .)
    if              reduce using rule 80 (multiple_print -> string .)
    while           reduce using rule 80 (multiple_print -> string .)
    do              reduce using rule 80 (multiple_print -> string .)
    for             reduce using rule 80 (multiple_print -> string .)
    gosub           reduce using rule 80 (multiple_print -> string .)
    dunkelCls       reduce using rule 80 (multiple_print -> string .)
    let             reduce using rule 80 (multiple_print -> string .)
    id              reduce using rule 80 (multiple_print -> string .)
    dunkelPrint     reduce using rule 80 (multiple_print -> string .)
    dunkelRead      reduce using rule 80 (multiple_print -> string .)
    end             reduce using rule 80 (multiple_print -> string .)
    loop            reduce using rule 80 (multiple_print -> string .)
    wend            reduce using rule 80 (multiple_print -> string .)
    return          reduce using rule 80 (multiple_print -> string .)
    else            reduce using rule 80 (multiple_print -> string .)
    elsif           reduce using rule 80 (multiple_print -> string .)
    next            reduce using rule 80 (multiple_print -> string .)
    close_parenthesis reduce using rule 80 (multiple_print -> string .)


state 43

    (81) multiple_print -> arithmetic_expression .
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    comma           reduce using rule 81 (multiple_print -> arithmetic_expression .)
    dim             reduce using rule 81 (multiple_print -> arithmetic_expression .)
    if              reduce using rule 81 (multiple_print -> arithmetic_expression .)
    while           reduce using rule 81 (multiple_print -> arithmetic_expression .)
    do              reduce using rule 81 (multiple_print -> arithmetic_expression .)
    for             reduce using rule 81 (multiple_print -> arithmetic_expression .)
    gosub           reduce using rule 81 (multiple_print -> arithmetic_expression .)
    dunkelCls       reduce using rule 81 (multiple_print -> arithmetic_expression .)
    let             reduce using rule 81 (multiple_print -> arithmetic_expression .)
    id              reduce using rule 81 (multiple_print -> arithmetic_expression .)
    dunkelPrint     reduce using rule 81 (multiple_print -> arithmetic_expression .)
    dunkelRead      reduce using rule 81 (multiple_print -> arithmetic_expression .)
    end             reduce using rule 81 (multiple_print -> arithmetic_expression .)
    loop            reduce using rule 81 (multiple_print -> arithmetic_expression .)
    wend            reduce using rule 81 (multiple_print -> arithmetic_expression .)
    return          reduce using rule 81 (multiple_print -> arithmetic_expression .)
    else            reduce using rule 81 (multiple_print -> arithmetic_expression .)
    elsif           reduce using rule 81 (multiple_print -> arithmetic_expression .)
    next            reduce using rule 81 (multiple_print -> arithmetic_expression .)
    close_parenthesis reduce using rule 81 (multiple_print -> arithmetic_expression .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 44

    (39) arithmetic_expression -> value .
    (40) arithmetic_expression -> value . arithmetic_operator value ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for sum resolved as shift
  ! shift/reduce conflict for substraction resolved as shift
  ! shift/reduce conflict for multiplication resolved as shift
  ! shift/reduce conflict for division resolved as shift
  ! shift/reduce conflict for exponent resolved as shift
    comma           reduce using rule 39 (arithmetic_expression -> value .)
    dim             reduce using rule 39 (arithmetic_expression -> value .)
    if              reduce using rule 39 (arithmetic_expression -> value .)
    while           reduce using rule 39 (arithmetic_expression -> value .)
    do              reduce using rule 39 (arithmetic_expression -> value .)
    for             reduce using rule 39 (arithmetic_expression -> value .)
    gosub           reduce using rule 39 (arithmetic_expression -> value .)
    dunkelCls       reduce using rule 39 (arithmetic_expression -> value .)
    let             reduce using rule 39 (arithmetic_expression -> value .)
    id              reduce using rule 39 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 39 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 39 (arithmetic_expression -> value .)
    end             reduce using rule 39 (arithmetic_expression -> value .)
    loop            reduce using rule 39 (arithmetic_expression -> value .)
    wend            reduce using rule 39 (arithmetic_expression -> value .)
    return          reduce using rule 39 (arithmetic_expression -> value .)
    else            reduce using rule 39 (arithmetic_expression -> value .)
    elsif           reduce using rule 39 (arithmetic_expression -> value .)
    next            reduce using rule 39 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 39 (arithmetic_expression -> value .)
    and             reduce using rule 39 (arithmetic_expression -> value .)
    or              reduce using rule 39 (arithmetic_expression -> value .)
    is_equal        reduce using rule 39 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 39 (arithmetic_expression -> value .)
    greater_than    reduce using rule 39 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 39 (arithmetic_expression -> value .)
    less_than       reduce using rule 39 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 39 (arithmetic_expression -> value .)
    to              reduce using rule 39 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 39 (arithmetic_expression -> value .)
    step            reduce using rule 39 (arithmetic_expression -> value .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

  ! sum             [ reduce using rule 39 (arithmetic_expression -> value .) ]
  ! substraction    [ reduce using rule 39 (arithmetic_expression -> value .) ]
  ! multiplication  [ reduce using rule 39 (arithmetic_expression -> value .) ]
  ! division        [ reduce using rule 39 (arithmetic_expression -> value .) ]
  ! exponent        [ reduce using rule 39 (arithmetic_expression -> value .) ]

    arithmetic_operator            shift and go to state 82

state 45

    (47) value -> real_value .

    sum             reduce using rule 47 (value -> real_value .)
    substraction    reduce using rule 47 (value -> real_value .)
    multiplication  reduce using rule 47 (value -> real_value .)
    division        reduce using rule 47 (value -> real_value .)
    exponent        reduce using rule 47 (value -> real_value .)
    comma           reduce using rule 47 (value -> real_value .)
    dim             reduce using rule 47 (value -> real_value .)
    if              reduce using rule 47 (value -> real_value .)
    while           reduce using rule 47 (value -> real_value .)
    do              reduce using rule 47 (value -> real_value .)
    for             reduce using rule 47 (value -> real_value .)
    gosub           reduce using rule 47 (value -> real_value .)
    dunkelCls       reduce using rule 47 (value -> real_value .)
    let             reduce using rule 47 (value -> real_value .)
    id              reduce using rule 47 (value -> real_value .)
    dunkelPrint     reduce using rule 47 (value -> real_value .)
    dunkelRead      reduce using rule 47 (value -> real_value .)
    end             reduce using rule 47 (value -> real_value .)
    loop            reduce using rule 47 (value -> real_value .)
    wend            reduce using rule 47 (value -> real_value .)
    return          reduce using rule 47 (value -> real_value .)
    else            reduce using rule 47 (value -> real_value .)
    elsif           reduce using rule 47 (value -> real_value .)
    next            reduce using rule 47 (value -> real_value .)
    close_parenthesis reduce using rule 47 (value -> real_value .)
    and             reduce using rule 47 (value -> real_value .)
    or              reduce using rule 47 (value -> real_value .)
    is_equal        reduce using rule 47 (value -> real_value .)
    is_not_equal    reduce using rule 47 (value -> real_value .)
    greater_than    reduce using rule 47 (value -> real_value .)
    greater_or_equal_than reduce using rule 47 (value -> real_value .)
    less_than       reduce using rule 47 (value -> real_value .)
    less_or_equal_than reduce using rule 47 (value -> real_value .)
    to              reduce using rule 47 (value -> real_value .)
    close_brackets  reduce using rule 47 (value -> real_value .)
    step            reduce using rule 47 (value -> real_value .)


state 46

    (48) value -> functions .

    sum             reduce using rule 48 (value -> functions .)
    substraction    reduce using rule 48 (value -> functions .)
    multiplication  reduce using rule 48 (value -> functions .)
    division        reduce using rule 48 (value -> functions .)
    exponent        reduce using rule 48 (value -> functions .)
    comma           reduce using rule 48 (value -> functions .)
    dim             reduce using rule 48 (value -> functions .)
    if              reduce using rule 48 (value -> functions .)
    while           reduce using rule 48 (value -> functions .)
    do              reduce using rule 48 (value -> functions .)
    for             reduce using rule 48 (value -> functions .)
    gosub           reduce using rule 48 (value -> functions .)
    dunkelCls       reduce using rule 48 (value -> functions .)
    let             reduce using rule 48 (value -> functions .)
    id              reduce using rule 48 (value -> functions .)
    dunkelPrint     reduce using rule 48 (value -> functions .)
    dunkelRead      reduce using rule 48 (value -> functions .)
    end             reduce using rule 48 (value -> functions .)
    loop            reduce using rule 48 (value -> functions .)
    wend            reduce using rule 48 (value -> functions .)
    return          reduce using rule 48 (value -> functions .)
    else            reduce using rule 48 (value -> functions .)
    elsif           reduce using rule 48 (value -> functions .)
    next            reduce using rule 48 (value -> functions .)
    close_parenthesis reduce using rule 48 (value -> functions .)
    and             reduce using rule 48 (value -> functions .)
    or              reduce using rule 48 (value -> functions .)
    is_equal        reduce using rule 48 (value -> functions .)
    is_not_equal    reduce using rule 48 (value -> functions .)
    greater_than    reduce using rule 48 (value -> functions .)
    greater_or_equal_than reduce using rule 48 (value -> functions .)
    less_than       reduce using rule 48 (value -> functions .)
    less_or_equal_than reduce using rule 48 (value -> functions .)
    to              reduce using rule 48 (value -> functions .)
    close_brackets  reduce using rule 48 (value -> functions .)
    step            reduce using rule 48 (value -> functions .)


state 47

    (49) value -> ids_access .

    sum             reduce using rule 49 (value -> ids_access .)
    substraction    reduce using rule 49 (value -> ids_access .)
    multiplication  reduce using rule 49 (value -> ids_access .)
    division        reduce using rule 49 (value -> ids_access .)
    exponent        reduce using rule 49 (value -> ids_access .)
    comma           reduce using rule 49 (value -> ids_access .)
    dim             reduce using rule 49 (value -> ids_access .)
    if              reduce using rule 49 (value -> ids_access .)
    while           reduce using rule 49 (value -> ids_access .)
    do              reduce using rule 49 (value -> ids_access .)
    for             reduce using rule 49 (value -> ids_access .)
    gosub           reduce using rule 49 (value -> ids_access .)
    dunkelCls       reduce using rule 49 (value -> ids_access .)
    let             reduce using rule 49 (value -> ids_access .)
    id              reduce using rule 49 (value -> ids_access .)
    dunkelPrint     reduce using rule 49 (value -> ids_access .)
    dunkelRead      reduce using rule 49 (value -> ids_access .)
    end             reduce using rule 49 (value -> ids_access .)
    loop            reduce using rule 49 (value -> ids_access .)
    wend            reduce using rule 49 (value -> ids_access .)
    return          reduce using rule 49 (value -> ids_access .)
    else            reduce using rule 49 (value -> ids_access .)
    elsif           reduce using rule 49 (value -> ids_access .)
    next            reduce using rule 49 (value -> ids_access .)
    close_parenthesis reduce using rule 49 (value -> ids_access .)
    and             reduce using rule 49 (value -> ids_access .)
    or              reduce using rule 49 (value -> ids_access .)
    is_equal        reduce using rule 49 (value -> ids_access .)
    is_not_equal    reduce using rule 49 (value -> ids_access .)
    greater_than    reduce using rule 49 (value -> ids_access .)
    greater_or_equal_than reduce using rule 49 (value -> ids_access .)
    less_than       reduce using rule 49 (value -> ids_access .)
    less_or_equal_than reduce using rule 49 (value -> ids_access .)
    to              reduce using rule 49 (value -> ids_access .)
    close_brackets  reduce using rule 49 (value -> ids_access .)
    step            reduce using rule 49 (value -> ids_access .)


state 48

    (55) real_value -> word_value . ACTION_ADD_WORD_VALUE
    (89) ACTION_ADD_WORD_VALUE -> .

    sum             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    substraction    reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    multiplication  reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    division        reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    exponent        reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    comma           reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    dim             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    if              reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    while           reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    do              reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    for             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    gosub           reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    dunkelCls       reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    let             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    id              reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    dunkelPrint     reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    dunkelRead      reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    end             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    loop            reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    wend            reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    return          reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    else            reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    elsif           reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    next            reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    close_parenthesis reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    and             reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    or              reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    is_equal        reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    is_not_equal    reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    greater_than    reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    greater_or_equal_than reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    less_than       reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    less_or_equal_than reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    to              reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    close_brackets  reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)
    step            reduce using rule 89 (ACTION_ADD_WORD_VALUE -> .)

    ACTION_ADD_WORD_VALUE          shift and go to state 83

state 49

    (56) real_value -> float_value . ACTION_ADD_FLOAT_VALUE
    (90) ACTION_ADD_FLOAT_VALUE -> .

    sum             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    substraction    reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    multiplication  reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    division        reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    exponent        reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    comma           reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    dim             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    if              reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    while           reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    do              reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    for             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    gosub           reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelCls       reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    let             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    id              reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelPrint     reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    dunkelRead      reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    end             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    loop            reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    wend            reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    return          reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    else            reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    elsif           reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    next            reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    close_parenthesis reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    and             reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    or              reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    is_equal        reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    is_not_equal    reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_than    reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    greater_or_equal_than reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    less_than       reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    less_or_equal_than reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    to              reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    close_brackets  reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)
    step            reduce using rule 90 (ACTION_ADD_FLOAT_VALUE -> .)

    ACTION_ADD_FLOAT_VALUE         shift and go to state 84

state 50

    (57) real_value -> id . ACTION_ADD_VAR_VALUE
    (70) functions -> id . open_parenthesis close_parenthesis
    (71) functions -> id . open_parenthesis arguments close_parenthesis
    (50) ids_access -> id . ACTION_ADD_VAR_VALUE
    (51) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (88) ACTION_ADD_VAR_VALUE -> .

    open_parenthesis shift and go to state 31
    open_brackets   reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dim             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    if              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    while           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    do              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    for             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    gosub           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelCls       reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    let             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    id              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelPrint     reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    dunkelRead      reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    end             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    loop            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    wend            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    return          reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    else            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    elsif           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    next            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    to              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    close_brackets  reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    step            reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 85

state 51

    (83) read -> dunkelRead multiple_read .
    (86) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 83 (read -> dunkelRead multiple_read .)
    if              reduce using rule 83 (read -> dunkelRead multiple_read .)
    while           reduce using rule 83 (read -> dunkelRead multiple_read .)
    do              reduce using rule 83 (read -> dunkelRead multiple_read .)
    for             reduce using rule 83 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 83 (read -> dunkelRead multiple_read .)
    dunkelCls       reduce using rule 83 (read -> dunkelRead multiple_read .)
    let             reduce using rule 83 (read -> dunkelRead multiple_read .)
    id              reduce using rule 83 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 83 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 83 (read -> dunkelRead multiple_read .)
    end             reduce using rule 83 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 83 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 83 (read -> dunkelRead multiple_read .)
    return          reduce using rule 83 (read -> dunkelRead multiple_read .)
    else            reduce using rule 83 (read -> dunkelRead multiple_read .)
    elsif           reduce using rule 83 (read -> dunkelRead multiple_read .)
    next            reduce using rule 83 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 86


state 52

    (84) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 87


state 53

    (85) multiple_read -> ids_access .

    comma           reduce using rule 85 (multiple_read -> ids_access .)
    dim             reduce using rule 85 (multiple_read -> ids_access .)
    if              reduce using rule 85 (multiple_read -> ids_access .)
    while           reduce using rule 85 (multiple_read -> ids_access .)
    do              reduce using rule 85 (multiple_read -> ids_access .)
    for             reduce using rule 85 (multiple_read -> ids_access .)
    gosub           reduce using rule 85 (multiple_read -> ids_access .)
    dunkelCls       reduce using rule 85 (multiple_read -> ids_access .)
    let             reduce using rule 85 (multiple_read -> ids_access .)
    id              reduce using rule 85 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 85 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 85 (multiple_read -> ids_access .)
    end             reduce using rule 85 (multiple_read -> ids_access .)
    loop            reduce using rule 85 (multiple_read -> ids_access .)
    wend            reduce using rule 85 (multiple_read -> ids_access .)
    return          reduce using rule 85 (multiple_read -> ids_access .)
    else            reduce using rule 85 (multiple_read -> ids_access .)
    elsif           reduce using rule 85 (multiple_read -> ids_access .)
    next            reduce using rule 85 (multiple_read -> ids_access .)


state 54

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 55

    (60) subroutines -> sub . procedure id inside_logic return subroutines
    (61) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 88
    function        shift and go to state 89


state 56

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 91
    float           shift and go to state 92
    bool            shift and go to state 93

    variable_type                  shift and go to state 90

state 57

    (70) functions -> id open_parenthesis close_parenthesis .

    dim             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    dunkelCls       reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    let             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    else            reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    elsif           reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    sum             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    substraction    reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    division        reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    exponent        reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    comma           reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    and             reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    or              reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    less_than       reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    to              reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)
    step            reduce using rule 70 (functions -> id open_parenthesis close_parenthesis .)


state 58

    (71) functions -> id open_parenthesis arguments . close_parenthesis
    (74) arguments -> arguments . comma arguments

    close_parenthesis shift and go to state 94
    comma           shift and go to state 95


state 59

    (72) arguments -> ByVal . value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 96
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 60

    (73) arguments -> ByRef . id

    id              shift and go to state 97


state 61

    (30) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (54) ids_access -> open_parenthesis . ids_access close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    id              shift and go to state 75
    word_value      shift and go to state 48
    float_value     shift and go to state 49

    logic_expression               shift and go to state 98
    ids_access                     shift and go to state 74
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 62

    (17) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs else inside_logic end if
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 99
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 63

    (26) logic_expression -> arithmetic_expression .
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_parenthesis reduce using rule 26 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 64

    (27) logic_expression -> bool_value . ACTION_ADD_BOOL_VALUE
    (91) ACTION_ADD_BOOL_VALUE -> .

    close_parenthesis reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    and             reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    or              reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    is_equal        reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    is_not_equal    reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    greater_than    reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    greater_or_equal_than reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    less_than       reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    less_or_equal_than reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    dim             reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    if              reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    while           reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    do              reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    for             reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    gosub           reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelCls       reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    let             reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    id              reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelPrint     reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    dunkelRead      reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    end             reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    loop            reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    wend            reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    return          reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    else            reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    elsif           reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)
    next            reduce using rule 91 (ACTION_ADD_BOOL_VALUE -> .)

    ACTION_ADD_BOOL_VALUE          shift and go to state 109

state 65

    (28) logic_expression -> not . ACTION_ADD_OPERATOR logic_expression
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 110

state 66

    (23) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 111
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 67

    (24) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 112


state 68

    (25) loops -> for id ACTION_ADD_FOR_VALUE . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 113


state 69

    (66) assign -> let ids_access equals . logic_expression
    (67) assign -> let ids_access equals . arithmetic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    ids_access                     shift and go to state 47
    logic_expression               shift and go to state 114
    arithmetic_expression          shift and go to state 115
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46

state 70

    (50) ids_access -> id ACTION_ADD_VAR_VALUE .
    (51) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

    equals          reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116


state 71

    (54) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 117


state 72

    (82) multiple_print -> multiple_print comma . multiple_print
    (80) multiple_print -> . string
    (81) multiple_print -> . arithmetic_expression
    (82) multiple_print -> . multiple_print comma multiple_print
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 42
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    multiple_print                 shift and go to state 118
    arithmetic_expression          shift and go to state 43
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 73

    (79) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (82) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 119
    comma           shift and go to state 72


state 74

    (54) ids_access -> open_parenthesis ids_access . close_parenthesis
    (49) value -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 117
    sum             reduce using rule 49 (value -> ids_access .)
    substraction    reduce using rule 49 (value -> ids_access .)
    multiplication  reduce using rule 49 (value -> ids_access .)
    division        reduce using rule 49 (value -> ids_access .)
    exponent        reduce using rule 49 (value -> ids_access .)
    comma           reduce using rule 49 (value -> ids_access .)
    and             reduce using rule 49 (value -> ids_access .)
    or              reduce using rule 49 (value -> ids_access .)
    is_equal        reduce using rule 49 (value -> ids_access .)
    is_not_equal    reduce using rule 49 (value -> ids_access .)
    greater_than    reduce using rule 49 (value -> ids_access .)
    greater_or_equal_than reduce using rule 49 (value -> ids_access .)
    less_than       reduce using rule 49 (value -> ids_access .)
    less_or_equal_than reduce using rule 49 (value -> ids_access .)

  ! close_parenthesis [ reduce using rule 49 (value -> ids_access .) ]


state 75

    (50) ids_access -> id . ACTION_ADD_VAR_VALUE
    (51) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id . ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) real_value -> id . ACTION_ADD_VAR_VALUE
    (70) functions -> id . open_parenthesis close_parenthesis
    (71) functions -> id . open_parenthesis arguments close_parenthesis
    (88) ACTION_ADD_VAR_VALUE -> .

    open_parenthesis shift and go to state 31
    open_brackets   reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    close_parenthesis reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    sum             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    substraction    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    multiplication  reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    division        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    exponent        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    comma           reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    and             reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    or              reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    is_equal        reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    is_not_equal    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    greater_than    reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    greater_or_equal_than reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    less_than       reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)
    less_or_equal_than reduce using rule 88 (ACTION_ADD_VAR_VALUE -> .)

    ACTION_ADD_VAR_VALUE           shift and go to state 120

state 76

    (41) arithmetic_expression -> arithmetic_expression arithmetic_operator . arithmetic_expression ACTION_ADD_QUADRUPLET
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 121
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 77

    (42) arithmetic_operator -> sum . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 122

state 78

    (43) arithmetic_operator -> substraction . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 123

state 79

    (44) arithmetic_operator -> multiplication . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 124

state 80

    (45) arithmetic_operator -> division . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 125

state 81

    (46) arithmetic_operator -> exponent . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 126

state 82

    (40) arithmetic_expression -> value arithmetic_operator . value ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    value                          shift and go to state 127
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 83

    (55) real_value -> word_value ACTION_ADD_WORD_VALUE .

    sum             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    substraction    reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    multiplication  reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    division        reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    exponent        reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    comma           reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dim             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    if              reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    while           reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    do              reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    for             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    gosub           reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelCls       reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    let             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    id              reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelPrint     reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    dunkelRead      reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    end             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    loop            reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    wend            reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    return          reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    else            reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    elsif           reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    next            reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_parenthesis reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    and             reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    or              reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_equal        reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    is_not_equal    reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_than    reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    greater_or_equal_than reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_than       reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    less_or_equal_than reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    to              reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    close_brackets  reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)
    step            reduce using rule 55 (real_value -> word_value ACTION_ADD_WORD_VALUE .)


state 84

    (56) real_value -> float_value ACTION_ADD_FLOAT_VALUE .

    sum             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    substraction    reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    multiplication  reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    division        reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    exponent        reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    comma           reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dim             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    if              reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    while           reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    do              reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    for             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    gosub           reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelCls       reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    let             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    id              reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelPrint     reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    dunkelRead      reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    end             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    loop            reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    wend            reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    return          reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    else            reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    elsif           reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    next            reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_parenthesis reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    and             reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    or              reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_equal        reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    is_not_equal    reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_than    reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    greater_or_equal_than reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_than       reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    less_or_equal_than reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    to              reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    close_brackets  reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)
    step            reduce using rule 56 (real_value -> float_value ACTION_ADD_FLOAT_VALUE .)


state 85

    (57) real_value -> id ACTION_ADD_VAR_VALUE .
    (50) ids_access -> id ACTION_ADD_VAR_VALUE .
    (51) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND

  ! reduce/reduce conflict for sum resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dim resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for if resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for while resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for do resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for for resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for gosub resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for let resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for id resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for end resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for loop resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for wend resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for return resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for else resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for elsif resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for next resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for to resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_brackets resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for step resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dim             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    if              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    while           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    do              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    for             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    gosub           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelCls       reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    let             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    id              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelPrint     reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    dunkelRead      reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    end             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    loop            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    wend            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    return          reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    else            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    elsif           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    next            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    to              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_brackets  reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    step            reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116

  ! sum             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dim             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! if              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! while           [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! do              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! for             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! gosub           [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelCls       [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! let             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! id              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelPrint     [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! dunkelRead      [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! end             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! loop            [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! wend            [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! return          [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! else            [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! elsif           [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! next            [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! to              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_brackets  [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! step            [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 86

    (86) multiple_read -> multiple_read comma . ids_access
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    ids_access                     shift and go to state 128

state 87

    (84) read -> dunkelRead string comma . multiple_read
    (85) multiple_read -> . ids_access
    (86) multiple_read -> . multiple_read comma ids_access
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 38
    open_parenthesis shift and go to state 39

    multiple_read                  shift and go to state 129
    ids_access                     shift and go to state 53

state 88

    (60) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 130


state 89

    (61) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 131


state 90

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelCls       reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    else            reduce using rule 10 (variable -> dim id as variable_type .)
    elsif           reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 132


state 91

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    dunkelCls       reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    else            reduce using rule 14 (variable_type -> word .)
    elsif           reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 92

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    dunkelCls       reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    else            reduce using rule 15 (variable_type -> float .)
    elsif           reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 93

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    dunkelCls       reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    else            reduce using rule 16 (variable_type -> bool .)
    elsif           reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 94

    (71) functions -> id open_parenthesis arguments close_parenthesis .

    dim             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    if              reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    while           reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    do              reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    for             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    gosub           reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelCls       reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    let             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    id              reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelPrint     reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelRead      reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    end             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    loop            reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    wend            reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    return          reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    else            reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    elsif           reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    next            reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    sum             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    substraction    reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    multiplication  reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    division        reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    exponent        reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    comma           reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_parenthesis reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    and             reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    or              reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_equal        reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_not_equal    reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_than    reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_or_equal_than reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_than       reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_or_equal_than reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    to              reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_brackets  reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)
    step            reduce using rule 71 (functions -> id open_parenthesis arguments close_parenthesis .)


state 95

    (74) arguments -> arguments comma . arguments
    (72) arguments -> . ByVal value
    (73) arguments -> . ByRef id
    (74) arguments -> . arguments comma arguments

    ByVal           shift and go to state 59
    ByRef           shift and go to state 60

    arguments                      shift and go to state 133

state 96

    (72) arguments -> ByVal value .

    close_parenthesis reduce using rule 72 (arguments -> ByVal value .)
    comma           reduce using rule 72 (arguments -> ByVal value .)


state 97

    (73) arguments -> ByRef id .

    close_parenthesis reduce using rule 73 (arguments -> ByRef id .)
    comma           reduce using rule 73 (arguments -> ByRef id .)


state 98

    (30) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 134
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 99

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs else inside_logic end if

    then            shift and go to state 135


state 100

    (29) logic_expression -> logic_expression logic_operator . logic_expression ACTION_ADD_QUADRUPLET
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 136
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 101

    (31) logic_operator -> and . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 137

state 102

    (32) logic_operator -> or . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 138

state 103

    (33) logic_operator -> is_equal . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 139

state 104

    (34) logic_operator -> is_not_equal . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 140

state 105

    (35) logic_operator -> greater_than . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 141

state 106

    (36) logic_operator -> greater_or_equal_than . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 142

state 107

    (37) logic_operator -> less_than . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 143

state 108

    (38) logic_operator -> less_or_equal_than . ACTION_ADD_OPERATOR
    (92) ACTION_ADD_OPERATOR -> .

    bool_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    not             reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    open_parenthesis reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    word_value      reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    float_value     reduce using rule 92 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 92 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 144

state 109

    (27) logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .

    close_parenthesis reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    and             reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    or              reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_equal        reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    is_not_equal    reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_than    reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_than       reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    less_or_equal_than reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dim             reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    if              reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    while           reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    do              reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    for             reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    gosub           reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelCls       reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    let             reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    id              reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelPrint     reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    dunkelRead      reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    end             reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    loop            reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    wend            reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    return          reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    else            reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    elsif           reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)
    next            reduce using rule 27 (logic_expression -> bool_value ACTION_ADD_BOOL_VALUE .)


state 110

    (28) logic_expression -> not ACTION_ADD_OPERATOR . logic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 145
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 111

    (23) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 146
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 112

    (24) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 147


state 113

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 148
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 114

    (66) assign -> let ids_access equals logic_expression .
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    dim             reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    if              reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    while           reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    do              reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    for             reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    gosub           reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    dunkelCls       reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    let             reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    id              reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    dunkelPrint     reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    dunkelRead      reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    end             reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    loop            reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    wend            reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    return          reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    else            reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    elsif           reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    next            reduce using rule 66 (assign -> let ids_access equals logic_expression .)
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 115

    (67) assign -> let ids_access equals arithmetic_expression .
    (26) logic_expression -> arithmetic_expression .
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! reduce/reduce conflict for dim resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for if resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for while resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for do resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for for resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for gosub resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for let resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for id resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for end resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for loop resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for wend resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for return resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for else resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for elsif resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for next resolved using rule 26 (logic_expression -> arithmetic_expression .)
    and             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    or              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_not_equal    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_than    reduce using rule 26 (logic_expression -> arithmetic_expression .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_than       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    less_or_equal_than reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

  ! dim             [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! if              [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! while           [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! do              [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! for             [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! gosub           [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelCls       [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! let             [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! id              [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelPrint     [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! dunkelRead      [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! end             [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! loop            [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! wend            [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! return          [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! else            [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! elsif           [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]
  ! next            [ reduce using rule 67 (assign -> let ids_access equals arithmetic_expression .) ]

    arithmetic_operator            shift and go to state 76

state 116

    (51) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 149
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 117

    (54) ids_access -> open_parenthesis ids_access close_parenthesis .

    equals          reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    comma           reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelCls       reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    else            reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    elsif           reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 54 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 118

    (82) multiple_print -> multiple_print comma multiple_print .
    (82) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    dunkelCls       reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    else            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    elsif           reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 72

  ! comma           [ reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .) ]


state 119

    (79) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelCls       reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    let             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    else            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    elsif           reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 120

    (50) ids_access -> id ACTION_ADD_VAR_VALUE .
    (51) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (57) real_value -> id ACTION_ADD_VAR_VALUE .

  ! reduce/reduce conflict for sum resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for substraction resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for multiplication resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for division resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for exponent resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for comma resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for and resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for or resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_equal resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    close_parenthesis reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    sum             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    substraction    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    multiplication  reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    division        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    exponent        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    comma           reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    and             reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    or              reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_equal        reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    is_not_equal    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_than    reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    greater_or_equal_than reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_than       reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    less_or_equal_than reduce using rule 50 (ids_access -> id ACTION_ADD_VAR_VALUE .)
    open_brackets   shift and go to state 116

  ! sum             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! substraction    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! multiplication  [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! division        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! exponent        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! close_parenthesis [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! comma           [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! and             [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! or              [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_equal        [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! is_not_equal    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_than    [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! greater_or_equal_than [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_than       [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]
  ! less_or_equal_than [ reduce using rule 57 (real_value -> id ACTION_ADD_VAR_VALUE .) ]


state 121

    (41) arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression . ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (93) ACTION_ADD_QUADRUPLET -> .
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

  ! shift/reduce conflict for sum resolved as shift
  ! shift/reduce conflict for substraction resolved as shift
  ! shift/reduce conflict for multiplication resolved as shift
  ! shift/reduce conflict for division resolved as shift
  ! shift/reduce conflict for exponent resolved as shift
    comma           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    close_parenthesis reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    is_equal        reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    is_not_equal    reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    greater_than    reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    greater_or_equal_than reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    less_than       reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    less_or_equal_than reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    to              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    close_brackets  reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    step            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

  ! sum             [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! substraction    [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! multiplication  [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! division        [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! exponent        [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]

    arithmetic_operator            shift and go to state 76
    ACTION_ADD_QUADRUPLET          shift and go to state 150

state 122

    (42) arithmetic_operator -> sum ACTION_ADD_OPERATOR .

    word_value      reduce using rule 42 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 42 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    id              reduce using rule 42 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 42 (arithmetic_operator -> sum ACTION_ADD_OPERATOR .)


state 123

    (43) arithmetic_operator -> substraction ACTION_ADD_OPERATOR .

    word_value      reduce using rule 43 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 43 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    id              reduce using rule 43 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 43 (arithmetic_operator -> substraction ACTION_ADD_OPERATOR .)


state 124

    (44) arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .

    word_value      reduce using rule 44 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 44 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    id              reduce using rule 44 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 44 (arithmetic_operator -> multiplication ACTION_ADD_OPERATOR .)


state 125

    (45) arithmetic_operator -> division ACTION_ADD_OPERATOR .

    word_value      reduce using rule 45 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 45 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    id              reduce using rule 45 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 45 (arithmetic_operator -> division ACTION_ADD_OPERATOR .)


state 126

    (46) arithmetic_operator -> exponent ACTION_ADD_OPERATOR .

    word_value      reduce using rule 46 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 46 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    id              reduce using rule 46 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 46 (arithmetic_operator -> exponent ACTION_ADD_OPERATOR .)


state 127

    (40) arithmetic_expression -> value arithmetic_operator value . ACTION_ADD_QUADRUPLET
    (93) ACTION_ADD_QUADRUPLET -> .

    sum             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    substraction    reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    multiplication  reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    division        reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    exponent        reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    close_parenthesis reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    is_equal        reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    is_not_equal    reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    greater_than    reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    greater_or_equal_than reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    less_than       reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    less_or_equal_than reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    to              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    close_brackets  reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    step            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 151

state 128

    (86) multiple_read -> multiple_read comma ids_access .

    comma           reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    dim             reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    if              reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    while           reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    do              reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    for             reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    gosub           reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    dunkelCls       reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    let             reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    id              reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    dunkelPrint     reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    dunkelRead      reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    end             reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    loop            reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    wend            reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    return          reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    else            reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    elsif           reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)
    next            reduce using rule 86 (multiple_read -> multiple_read comma ids_access .)


state 129

    (84) read -> dunkelRead string comma multiple_read .
    (86) multiple_read -> multiple_read . comma ids_access

    dim             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    dunkelCls       reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    let             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    else            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    elsif           reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 86


state 130

    (60) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 152
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 131

    (61) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 153


state 132

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 154


state 133

    (74) arguments -> arguments comma arguments .
    (74) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 74 (arguments -> arguments comma arguments .)
    comma           shift and go to state 95

  ! comma           [ reduce using rule 74 (arguments -> arguments comma arguments .) ]


state 134

    (30) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 30 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 135

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs else inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 155
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 136

    (29) logic_expression -> logic_expression logic_operator logic_expression . ACTION_ADD_QUADRUPLET
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (93) ACTION_ADD_QUADRUPLET -> .
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dim             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    if              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    while           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    do              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    for             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    gosub           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelCls       reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    let             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    id              reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelPrint     reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    dunkelRead      reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    end             reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    loop            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    wend            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    return          reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    else            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    elsif           reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    next            reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .)
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

  ! and             [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! or              [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_equal        [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! is_not_equal    [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_than    [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greater_or_equal_than [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_than       [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]
  ! less_or_equal_than [ reduce using rule 93 (ACTION_ADD_QUADRUPLET -> .) ]

    logic_operator                 shift and go to state 100
    ACTION_ADD_QUADRUPLET          shift and go to state 156

state 137

    (31) logic_operator -> and ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)
    not             reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)
    id              reduce using rule 31 (logic_operator -> and ACTION_ADD_OPERATOR .)


state 138

    (32) logic_operator -> or ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)
    not             reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)
    id              reduce using rule 32 (logic_operator -> or ACTION_ADD_OPERATOR .)


state 139

    (33) logic_operator -> is_equal ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 33 (logic_operator -> is_equal ACTION_ADD_OPERATOR .)


state 140

    (34) logic_operator -> is_not_equal ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    not             reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)
    id              reduce using rule 34 (logic_operator -> is_not_equal ACTION_ADD_OPERATOR .)


state 141

    (35) logic_operator -> greater_than ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 35 (logic_operator -> greater_than ACTION_ADD_OPERATOR .)


state 142

    (36) logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 36 (logic_operator -> greater_or_equal_than ACTION_ADD_OPERATOR .)


state 143

    (37) logic_operator -> less_than ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 37 (logic_operator -> less_than ACTION_ADD_OPERATOR .)


state 144

    (38) logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .

    bool_value      reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    not             reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    open_parenthesis reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    word_value      reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    float_value     reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)
    id              reduce using rule 38 (logic_operator -> less_or_equal_than ACTION_ADD_OPERATOR .)


state 145

    (28) logic_expression -> not ACTION_ADD_OPERATOR logic_expression .
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dim             reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    if              reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    while           reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    do              reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    for             reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    gosub           reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelCls       reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    let             reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    id              reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelPrint     reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    dunkelRead      reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    end             reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    loop            reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    wend            reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    return          reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    else            reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    elsif           reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    next            reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .)
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

  ! and             [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! or              [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! is_equal        [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! is_not_equal    [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! greater_than    [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! less_than       [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 28 (logic_expression -> not ACTION_ADD_OPERATOR logic_expression .) ]

    logic_operator                 shift and go to state 100

state 146

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 157


state 147

    (24) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 158
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 148

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    to              shift and go to state 159
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 149

    (51) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 160
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 150

    (41) arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .

    sum             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    close_parenthesis reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    to              reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    close_brackets  reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)
    step            reduce using rule 41 (arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET .)


state 151

    (40) arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .

    sum             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    substraction    reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    multiplication  reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    division        reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    exponent        reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_parenthesis reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    to              reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    close_brackets  reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)
    step            reduce using rule 40 (arithmetic_expression -> value arithmetic_operator value ACTION_ADD_QUADRUPLET .)


state 152

    (60) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 161


state 153

    (61) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (68) parameters -> . variable
    (69) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 162
    dim             shift and go to state 9

    parameters                     shift and go to state 163
    variable                       shift and go to state 164

state 154

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 165


state 155

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs else inside_logic end if
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 166
    else            shift and go to state 167
    elsif           shift and go to state 169

    else_ifs                       shift and go to state 168

state 156

    (29) logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .

    close_parenthesis reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_equal        reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    is_not_equal    reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_than    reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    greater_or_equal_than reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_than       reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    less_or_equal_than reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dim             reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    if              reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    while           reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    do              reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    for             reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    gosub           reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelCls       reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    let             reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    id              reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelPrint     reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    dunkelRead      reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    end             reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    loop            reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    wend            reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    return          reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    else            reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    elsif           reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)
    next            reduce using rule 29 (logic_expression -> logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET .)


state 157

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelCls       reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    let             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    else            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    elsif           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 158

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 170
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 159

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 171
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 160

    (51) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (94) ACTION_ADD_ONE_DIM_OPERAND -> .

    open_brackets   shift and go to state 172
    equals          reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    sum             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    substraction    reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    multiplication  reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    division        reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    exponent        reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    comma           reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dim             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    if              reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    while           reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    do              reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    for             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    gosub           reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    let             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    id              reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    end             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    loop            reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    wend            reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    return          reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    else            reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    elsif           reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    next            reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    and             reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    or              reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_equal        reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_than    reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_than       reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    to              reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)
    step            reduce using rule 94 (ACTION_ADD_ONE_DIM_OPERAND -> .)

    ACTION_ADD_ONE_DIM_OPERAND     shift and go to state 173

state 161

    (60) subroutines -> sub procedure id inside_logic return . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 65 (subroutines -> .)

    subroutines                    shift and go to state 174

state 162

    (61) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (63) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 176
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 175
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 163

    (62) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (69) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 177
    comma           shift and go to state 178


state 164

    (68) parameters -> variable .

    close_parenthesis reduce using rule 68 (parameters -> variable .)
    comma           reduce using rule 68 (parameters -> variable .)


state 165

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    else            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    elsif           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 179


state 166

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end . if

    if              shift and go to state 180


state 167

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 181
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 168

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . else inside_logic end if
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 183
    else            shift and go to state 184
    elsif           shift and go to state 169

    else_ifs                       shift and go to state 182

state 169

    (21) else_ifs -> elsif . open_parenthesis logic_expression close_parenthesis then inside_logic

    open_parenthesis shift and go to state 185


state 170

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 171

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    step            shift and go to state 186
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 172

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 187
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 173

    (51) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .

    equals          reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    sum             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    substraction    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    multiplication  reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    division        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    exponent        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    comma           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dim             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    if              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    while           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    do              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    for             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    gosub           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelCls       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    let             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    id              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    dunkelRead      reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    end             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    loop            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    wend            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    return          reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    else            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    elsif           reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    next            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_parenthesis reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    and             reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    or              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_equal        reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    is_not_equal    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_than    reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_than       reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    to              reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    close_brackets  reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)
    step            reduce using rule 51 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND .)


state 174

    (60) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 60 (subroutines -> sub procedure id inside_logic return subroutines .)


state 175

    (61) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 188


state 176

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 91
    float           shift and go to state 92
    bool            shift and go to state 93

    variable_type                  shift and go to state 189

state 177

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 191
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 190
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 178

    (69) parameters -> parameters comma . parameters
    (68) parameters -> . variable
    (69) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 192
    variable                       shift and go to state 164

state 179

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 193


state 180

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .

    dim             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    if              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    while           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    do              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    for             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    gosub           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelCls       reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    let             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    id              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelPrint     reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelRead      reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    end             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    loop            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    wend            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    return          reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    else            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    elsif           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    next            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)


state 181

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic . end if

    end             shift and go to state 194


state 182

    (22) else_ifs -> else_ifs else_ifs .
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

  ! shift/reduce conflict for elsif resolved as shift
    end             reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    else            reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    elsif           shift and go to state 169

  ! elsif           [ reduce using rule 22 (else_ifs -> else_ifs else_ifs .) ]

    else_ifs                       shift and go to state 182

state 183

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end . if

    if              shift and go to state 195


state 184

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 196
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 185

    (21) else_ifs -> elsif open_parenthesis . logic_expression close_parenthesis then inside_logic
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . bool_value ACTION_ADD_BOOL_VALUE
    (28) logic_expression -> . not ACTION_ADD_OPERATOR logic_expression
    (29) logic_expression -> . logic_expression logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (30) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 64
    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50

    logic_expression               shift and go to state 197
    arithmetic_expression          shift and go to state 63
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 186

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 198
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 187

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 199
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 188

    (61) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 200


state 189

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 201
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 190

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 202


state 191

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 91
    float           shift and go to state 92
    bool            shift and go to state 93

    variable_type                  shift and go to state 203

state 192

    (69) parameters -> parameters comma parameters .
    (69) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 69 (parameters -> parameters comma parameters .)
    comma           shift and go to state 178

  ! comma           [ reduce using rule 69 (parameters -> parameters comma parameters .) ]


state 193

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 204


state 194

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end . if

    if              shift and go to state 205


state 195

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .

    dim             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    if              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    while           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    do              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    for             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    gosub           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelCls       reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    let             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    id              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelPrint     reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelRead      reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    end             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    loop            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    wend            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    return          reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    else            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    elsif           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    next            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)


state 196

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic . end if

    end             shift and go to state 206


state 197

    (21) else_ifs -> elsif open_parenthesis logic_expression . close_parenthesis then inside_logic
    (29) logic_expression -> logic_expression . logic_operator logic_expression ACTION_ADD_QUADRUPLET
    (31) logic_operator -> . and ACTION_ADD_OPERATOR
    (32) logic_operator -> . or ACTION_ADD_OPERATOR
    (33) logic_operator -> . is_equal ACTION_ADD_OPERATOR
    (34) logic_operator -> . is_not_equal ACTION_ADD_OPERATOR
    (35) logic_operator -> . greater_than ACTION_ADD_OPERATOR
    (36) logic_operator -> . greater_or_equal_than ACTION_ADD_OPERATOR
    (37) logic_operator -> . less_than ACTION_ADD_OPERATOR
    (38) logic_operator -> . less_or_equal_than ACTION_ADD_OPERATOR

    close_parenthesis shift and go to state 207
    and             shift and go to state 101
    or              shift and go to state 102
    is_equal        shift and go to state 103
    is_not_equal    shift and go to state 104
    greater_than    shift and go to state 105
    greater_or_equal_than shift and go to state 106
    less_than       shift and go to state 107
    less_or_equal_than shift and go to state 108

    logic_operator                 shift and go to state 100

state 198

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 9 (inside_logic -> .)
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 208
    arithmetic_operator            shift and go to state 76
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 199

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (95) ACTION_ADD_TWO_DIM_OPERAND -> .

    open_brackets   shift and go to state 209
    equals          reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    sum             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    substraction    reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    multiplication  reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    division        reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    exponent        reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    comma           reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dim             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    if              reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    while           reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    do              reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    for             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    gosub           reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    let             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    id              reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    end             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    loop            reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    wend            reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    return          reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    else            reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    elsif           reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    next            reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    and             reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    or              reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_equal        reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_than    reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_than       reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    to              reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    close_brackets  reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)
    step            reduce using rule 95 (ACTION_ADD_TWO_DIM_OPERAND -> .)

    ACTION_ADD_TWO_DIM_OPERAND     shift and go to state 210

state 200

    (61) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 65 (subroutines -> .)

    subroutines                    shift and go to state 211

state 201

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 212


state 202

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 213


state 203

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 214
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 204

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 215


state 205

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .

    dim             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    if              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    while           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    do              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    for             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    gosub           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelCls       reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    let             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    id              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelPrint     reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelRead      reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    end             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    loop            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    wend            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    return          reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    else            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    elsif           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    next            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)


state 206

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end . if

    if              shift and go to state 216


state 207

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis . then inside_logic

    then            shift and go to state 217


state 208

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 218


state 209

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (39) arithmetic_expression -> . value
    (40) arithmetic_expression -> . value arithmetic_operator value ACTION_ADD_QUADRUPLET
    (41) arithmetic_expression -> . arithmetic_expression arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . ids_access
    (55) real_value -> . word_value ACTION_ADD_WORD_VALUE
    (56) real_value -> . float_value ACTION_ADD_FLOAT_VALUE
    (57) real_value -> . id ACTION_ADD_VAR_VALUE
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (50) ids_access -> . id ACTION_ADD_VAR_VALUE
    (51) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets ACTION_ADD_ONE_DIM_OPERAND
    (52) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND
    (53) ids_access -> . id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (54) ids_access -> . open_parenthesis ids_access close_parenthesis

    word_value      shift and go to state 48
    float_value     shift and go to state 49
    id              shift and go to state 50
    open_parenthesis shift and go to state 39

    arithmetic_expression          shift and go to state 219
    value                          shift and go to state 44
    real_value                     shift and go to state 45
    functions                      shift and go to state 46
    ids_access                     shift and go to state 47

state 210

    (52) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .

    equals          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    sum             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    substraction    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    multiplication  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    division        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    exponent        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    comma           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dim             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    if              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    while           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    do              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    for             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    gosub           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelCls       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    let             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    id              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelPrint     reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    dunkelRead      reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    end             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    loop            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    wend            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    return          reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    else            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    elsif           reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    next            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_parenthesis reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    and             reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    or              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_equal        reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    is_not_equal    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_than    reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_than       reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    less_or_equal_than reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    to              reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    close_brackets  reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)
    step            reduce using rule 52 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_TWO_DIM_OPERAND .)


state 211

    (61) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 61 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 212

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 220


state 213

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 65 (subroutines -> .)

    subroutines                    shift and go to state 221

state 214

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 222


state 215

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 223


state 216

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .

    dim             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    if              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    while           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    do              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    for             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    gosub           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelCls       reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    let             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    id              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelPrint     reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelRead      reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    end             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    loop            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    wend            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    return          reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    else            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    elsif           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    next            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)


state 217

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (58) calls -> . gosub id
    (59) calls -> . functions
    (75) read_or_write -> . print
    (76) read_or_write -> . read
    (77) read_or_write -> . dunkelCls
    (66) assign -> . let ids_access equals logic_expression
    (67) assign -> . let ids_access equals arithmetic_expression
    (70) functions -> . id open_parenthesis close_parenthesis
    (71) functions -> . id open_parenthesis arguments close_parenthesis
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 224
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 218

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 225


state 219

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets ACTION_ADD_THREE_DIM_OPERAND
    (41) arithmetic_expression -> arithmetic_expression . arithmetic_operator arithmetic_expression ACTION_ADD_QUADRUPLET
    (42) arithmetic_operator -> . sum ACTION_ADD_OPERATOR
    (43) arithmetic_operator -> . substraction ACTION_ADD_OPERATOR
    (44) arithmetic_operator -> . multiplication ACTION_ADD_OPERATOR
    (45) arithmetic_operator -> . division ACTION_ADD_OPERATOR
    (46) arithmetic_operator -> . exponent ACTION_ADD_OPERATOR

    close_brackets  shift and go to state 226
    sum             shift and go to state 77
    substraction    shift and go to state 78
    multiplication  shift and go to state 79
    division        shift and go to state 80
    exponent        shift and go to state 81

    arithmetic_operator            shift and go to state 76

state 220

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 65 (subroutines -> .)

    subroutines                    shift and go to state 227

state 221

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 62 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 222

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 228


state 223

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 229


state 224

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .

    end             reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    else            reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    elsif           reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)


state 225

    (25) loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelCls       reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    let             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    else            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    elsif           reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 25 (loops -> for id ACTION_ADD_FOR_VALUE equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 226

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . ACTION_ADD_THREE_DIM_OPERAND
    (96) ACTION_ADD_THREE_DIM_OPERAND -> .

    equals          reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    sum             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    substraction    reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    multiplication  reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    division        reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    exponent        reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    comma           reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dim             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    if              reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    while           reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    do              reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    for             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    gosub           reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelCls       reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    let             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    id              reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelPrint     reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    dunkelRead      reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    end             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    loop            reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    wend            reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    return          reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    else            reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    elsif           reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    next            reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_parenthesis reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    and             reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    or              reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_equal        reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    is_not_equal    reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_than    reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    greater_or_equal_than reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_than       reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    less_or_equal_than reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    to              reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    close_brackets  reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)
    step            reduce using rule 96 (ACTION_ADD_THREE_DIM_OPERAND -> .)

    ACTION_ADD_THREE_DIM_OPERAND   shift and go to state 230

state 227

    (63) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 63 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 228

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (60) subroutines -> . sub procedure id inside_logic return subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 65 (subroutines -> .)

    subroutines                    shift and go to state 231

state 229

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 230

    (53) ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .

    equals          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    sum             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    substraction    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    multiplication  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    division        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    exponent        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    comma           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dim             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    if              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    while           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    do              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    for             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    gosub           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelCls       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    let             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    id              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelPrint     reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    dunkelRead      reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    end             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    loop            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    wend            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    return          reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    else            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    elsif           reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    next            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_parenthesis reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    and             reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    or              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_equal        reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    is_not_equal    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_than    reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_than       reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    less_or_equal_than reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    to              reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    close_brackets  reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)
    step            reduce using rule 53 (ids_access -> id ACTION_ADD_VAR_VALUE open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets ACTION_ADD_THREE_DIM_OPERAND .)


state 231

    (64) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 64 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for sum in state 44 resolved as shift
WARNING: shift/reduce conflict for substraction in state 44 resolved as shift
WARNING: shift/reduce conflict for multiplication in state 44 resolved as shift
WARNING: shift/reduce conflict for division in state 44 resolved as shift
WARNING: shift/reduce conflict for exponent in state 44 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 74 resolved as shift
WARNING: shift/reduce conflict for comma in state 118 resolved as shift
WARNING: shift/reduce conflict for sum in state 121 resolved as shift
WARNING: shift/reduce conflict for substraction in state 121 resolved as shift
WARNING: shift/reduce conflict for multiplication in state 121 resolved as shift
WARNING: shift/reduce conflict for division in state 121 resolved as shift
WARNING: shift/reduce conflict for exponent in state 121 resolved as shift
WARNING: shift/reduce conflict for comma in state 133 resolved as shift
WARNING: shift/reduce conflict for and in state 136 resolved as shift
WARNING: shift/reduce conflict for or in state 136 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 136 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 136 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 136 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 136 resolved as shift
WARNING: shift/reduce conflict for less_than in state 136 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 136 resolved as shift
WARNING: shift/reduce conflict for and in state 145 resolved as shift
WARNING: shift/reduce conflict for or in state 145 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 145 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 145 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 145 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 145 resolved as shift
WARNING: shift/reduce conflict for less_than in state 145 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 145 resolved as shift
WARNING: shift/reduce conflict for elsif in state 182 resolved as shift
WARNING: shift/reduce conflict for comma in state 192 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 23
WARNING: reduce/reduce conflict in state 85 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 85
WARNING: reduce/reduce conflict in state 115 resolved using rule (logic_expression -> arithmetic_expression)
WARNING: rejected rule (assign -> let ids_access equals arithmetic_expression) in state 115
WARNING: reduce/reduce conflict in state 120 resolved using rule (ids_access -> id ACTION_ADD_VAR_VALUE)
WARNING: rejected rule (real_value -> id ACTION_ADD_VAR_VALUE) in state 120
WARNING: Rule (real_value -> id ACTION_ADD_VAR_VALUE) is never reduced
WARNING: Rule (assign -> let ids_access equals arithmetic_expression) is never reduced
