Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if
Rule 18    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
Rule 19    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
Rule 20    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
Rule 21    else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic
Rule 22    else_ifs -> else_ifs else_ifs
Rule 23    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 24    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 25    loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 26    logic_expression -> arithmetic_expression
Rule 27    logic_expression -> compared_to_bool
Rule 28    logic_expression -> arithmetic_expression logic_operand arithmetic_expression
Rule 29    logic_expression -> logic_expression logic_operand logic_expression
Rule 30    logic_expression -> not logic_expression
Rule 31    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 32    logic_operand -> and
Rule 33    logic_operand -> or
Rule 34    logic_operand -> not
Rule 35    logic_operand -> is_equal
Rule 36    logic_operand -> is_not_equal
Rule 37    logic_operand -> greater_than
Rule 38    logic_operand -> greater_or_equal_than
Rule 39    logic_operand -> less_than
Rule 40    logic_operand -> less_or_equal_than
Rule 41    compared_to_bool -> arithmetic_expression is_equal bool_value
Rule 42    compared_to_bool -> arithmetic_expression is_not_equal bool_value
Rule 43    compared_to_bool -> bool_value is_equal arithmetic_expression
Rule 44    compared_to_bool -> bool_value is_not_equal arithmetic_expression
Rule 45    compared_to_bool -> bool_value
Rule 46    arithmetic_expression -> value
Rule 47    arithmetic_expression -> value arithmetic_operand value
Rule 48    arithmetic_operand -> sum
Rule 49    arithmetic_operand -> substraction
Rule 50    arithmetic_operand -> multiplication
Rule 51    arithmetic_operand -> division
Rule 52    arithmetic_operand -> exponent
Rule 53    value -> real_value
Rule 54    value -> functions
Rule 55    value -> open_parenthesis arithmetic_expression close_parenthesis
Rule 56    value -> ids_access
Rule 57    ids_access -> id
Rule 58    ids_access -> id open_brackets arithmetic_expression close_brackets
Rule 59    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 60    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 61    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 62    real_value -> word_value
Rule 63    real_value -> float_value
Rule 64    real_value -> id
Rule 65    calls -> gosub id
Rule 66    calls -> functions
Rule 67    subroutines -> sub procedure id inside_logic return subroutines
Rule 68    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 69    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 70    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 71    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 72    subroutines -> <empty>
Rule 73    assign -> let id equals logic_expression
Rule 74    assign -> let id equals arithmetic_expression
Rule 75    parameters -> variable
Rule 76    parameters -> parameters comma parameters
Rule 77    functions -> id open_parenthesis close_parenthesis
Rule 78    functions -> id open_parenthesis arguments close_parenthesis
Rule 79    arguments -> ByVal value
Rule 80    arguments -> ByRef id
Rule 81    arguments -> arguments comma arguments
Rule 82    read_or_write -> print
Rule 83    read_or_write -> read
Rule 84    read_or_write -> dunkelCls
Rule 85    print -> dunkelPrint multiple_print
Rule 86    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 87    multiple_print -> string
Rule 88    multiple_print -> arithmetic_expression
Rule 89    multiple_print -> multiple_print comma multiple_print
Rule 90    read -> dunkelRead multiple_read
Rule 91    read -> dunkelRead string comma multiple_read
Rule 92    multiple_read -> ids_access
Rule 93    multiple_read -> multiple_read comma multiple_read

Terminals, with rules where they appear

ByRef                : 80
ByVal                : 79
and                  : 32
as                   : 10 11 12 13 70 71
bool                 : 16
bool_value           : 41 42 43 44 45
close_braces         : 
close_brackets       : 11 12 12 13 13 13 58 59 59 60 60 60
close_parenthesis    : 17 18 19 20 21 23 24 31 55 61 68 69 70 71 77 78 86
colon                : 
comma                : 76 81 89 91 93
dim                  : 10 11 12 13
division             : 51
do                   : 24
dunkelCls            : 84
dunkelPrint          : 85 86
dunkelRead           : 90 91
else                 : 18 20
elsif                : 21
end                  : 1 2 17 18 19 20 68 69 70 71
end_if               : 
equals               : 25 73 74
error                : 
exit                 : 
exponent             : 52
false                : 
float                : 15
float_value          : 63
for                  : 25
function             : 68 69 70 71
gosub                : 65
goto                 : 
greater_or_equal_than : 38
greater_than         : 37
id                   : 10 11 12 13 25 25 57 58 59 60 64 65 67 68 69 70 71 73 74 77 78 80
if                   : 17 17 18 18 19 19 20 20
is_equal             : 35 41 43
is_not_equal         : 36 42 44
less_or_equal_than   : 40
less_than            : 39
let                  : 73 74
loop                 : 24
multiplication       : 50
next                 : 25
not                  : 30 34
open_braces          : 
open_brackets        : 11 12 12 13 13 13 58 59 59 60 60 60
open_parenthesis     : 17 18 19 20 21 23 24 31 55 61 68 69 70 71 77 78 86
or                   : 33
procedure            : 67
return               : 67
semicolon            : 
step                 : 25
string               : 87 91
sub                  : 67 68 68 69 69 70 70 71 71
substraction         : 49
sum                  : 48
then                 : 17 18 19 20 21
to                   : 25
true                 : 
until                : 24
wend                 : 23
while                : 23
word                 : 14
word_value           : 11 12 12 13 13 13 62

Nonterminals, with rules where they appear

arguments            : 78 81 81
arithmetic_expression : 25 25 25 26 28 28 41 42 43 44 55 58 59 59 60 60 60 74 88
arithmetic_operand   : 47
assign               : 8
calls                : 6
compared_to_bool     : 27
conditions           : 4
else_ifs             : 19 20 22 22
functions            : 54 66
ids_access           : 56 61 92
inside_logic         : 1 2 3 4 5 6 7 8 17 18 18 19 20 20 21 23 24 25 67 68 69 70 71
logic_expression     : 17 18 19 20 21 23 24 29 29 30 31 73
logic_operand        : 28 29
loops                : 5
multiple_print       : 85 86 89 89
multiple_read        : 90 91 93 93
parameters           : 69 71 76 76
print                : 82
program              : 0
read                 : 83
read_or_write        : 7
real_value           : 53
subroutines          : 2 67 68 69 70 71
value                : 46 47 47 79
variable             : 3 75
variable_type        : 10 11 12 13 70 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 23


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 24
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 25
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 29
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 30


state 10

    (77) functions -> id . open_parenthesis close_parenthesis
    (78) functions -> id . open_parenthesis arguments close_parenthesis

    open_parenthesis shift and go to state 31


state 11

    (17) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if

    open_parenthesis shift and go to state 32


state 12

    (23) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 33


state 13

    (24) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 34
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 14

    (25) loops -> for . id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 35


state 15

    (65) calls -> gosub . id

    id              shift and go to state 36


state 16

    (66) calls -> functions .

    dim             reduce using rule 66 (calls -> functions .)
    if              reduce using rule 66 (calls -> functions .)
    while           reduce using rule 66 (calls -> functions .)
    do              reduce using rule 66 (calls -> functions .)
    for             reduce using rule 66 (calls -> functions .)
    gosub           reduce using rule 66 (calls -> functions .)
    dunkelCls       reduce using rule 66 (calls -> functions .)
    let             reduce using rule 66 (calls -> functions .)
    id              reduce using rule 66 (calls -> functions .)
    dunkelPrint     reduce using rule 66 (calls -> functions .)
    dunkelRead      reduce using rule 66 (calls -> functions .)
    end             reduce using rule 66 (calls -> functions .)
    loop            reduce using rule 66 (calls -> functions .)
    wend            reduce using rule 66 (calls -> functions .)
    return          reduce using rule 66 (calls -> functions .)
    else            reduce using rule 66 (calls -> functions .)
    elsif           reduce using rule 66 (calls -> functions .)
    next            reduce using rule 66 (calls -> functions .)


state 17

    (82) read_or_write -> print .

    dim             reduce using rule 82 (read_or_write -> print .)
    if              reduce using rule 82 (read_or_write -> print .)
    while           reduce using rule 82 (read_or_write -> print .)
    do              reduce using rule 82 (read_or_write -> print .)
    for             reduce using rule 82 (read_or_write -> print .)
    gosub           reduce using rule 82 (read_or_write -> print .)
    dunkelCls       reduce using rule 82 (read_or_write -> print .)
    let             reduce using rule 82 (read_or_write -> print .)
    id              reduce using rule 82 (read_or_write -> print .)
    dunkelPrint     reduce using rule 82 (read_or_write -> print .)
    dunkelRead      reduce using rule 82 (read_or_write -> print .)
    end             reduce using rule 82 (read_or_write -> print .)
    loop            reduce using rule 82 (read_or_write -> print .)
    wend            reduce using rule 82 (read_or_write -> print .)
    return          reduce using rule 82 (read_or_write -> print .)
    else            reduce using rule 82 (read_or_write -> print .)
    elsif           reduce using rule 82 (read_or_write -> print .)
    next            reduce using rule 82 (read_or_write -> print .)


state 18

    (83) read_or_write -> read .

    dim             reduce using rule 83 (read_or_write -> read .)
    if              reduce using rule 83 (read_or_write -> read .)
    while           reduce using rule 83 (read_or_write -> read .)
    do              reduce using rule 83 (read_or_write -> read .)
    for             reduce using rule 83 (read_or_write -> read .)
    gosub           reduce using rule 83 (read_or_write -> read .)
    dunkelCls       reduce using rule 83 (read_or_write -> read .)
    let             reduce using rule 83 (read_or_write -> read .)
    id              reduce using rule 83 (read_or_write -> read .)
    dunkelPrint     reduce using rule 83 (read_or_write -> read .)
    dunkelRead      reduce using rule 83 (read_or_write -> read .)
    end             reduce using rule 83 (read_or_write -> read .)
    loop            reduce using rule 83 (read_or_write -> read .)
    wend            reduce using rule 83 (read_or_write -> read .)
    return          reduce using rule 83 (read_or_write -> read .)
    else            reduce using rule 83 (read_or_write -> read .)
    elsif           reduce using rule 83 (read_or_write -> read .)
    next            reduce using rule 83 (read_or_write -> read .)


state 19

    (84) read_or_write -> dunkelCls .

    dim             reduce using rule 84 (read_or_write -> dunkelCls .)
    if              reduce using rule 84 (read_or_write -> dunkelCls .)
    while           reduce using rule 84 (read_or_write -> dunkelCls .)
    do              reduce using rule 84 (read_or_write -> dunkelCls .)
    for             reduce using rule 84 (read_or_write -> dunkelCls .)
    gosub           reduce using rule 84 (read_or_write -> dunkelCls .)
    dunkelCls       reduce using rule 84 (read_or_write -> dunkelCls .)
    let             reduce using rule 84 (read_or_write -> dunkelCls .)
    id              reduce using rule 84 (read_or_write -> dunkelCls .)
    dunkelPrint     reduce using rule 84 (read_or_write -> dunkelCls .)
    dunkelRead      reduce using rule 84 (read_or_write -> dunkelCls .)
    end             reduce using rule 84 (read_or_write -> dunkelCls .)
    loop            reduce using rule 84 (read_or_write -> dunkelCls .)
    wend            reduce using rule 84 (read_or_write -> dunkelCls .)
    return          reduce using rule 84 (read_or_write -> dunkelCls .)
    else            reduce using rule 84 (read_or_write -> dunkelCls .)
    elsif           reduce using rule 84 (read_or_write -> dunkelCls .)
    next            reduce using rule 84 (read_or_write -> dunkelCls .)


state 20

    (73) assign -> let . id equals logic_expression
    (74) assign -> let . id equals arithmetic_expression

    id              shift and go to state 37


state 21

    (85) print -> dunkelPrint . multiple_print
    (86) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (87) multiple_print -> . string
    (88) multiple_print -> . arithmetic_expression
    (89) multiple_print -> . multiple_print comma multiple_print
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 39
    string          shift and go to state 40
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    multiple_print                 shift and go to state 38
    arithmetic_expression          shift and go to state 41
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 22

    (90) read -> dunkelRead . multiple_read
    (91) read -> dunkelRead . string comma multiple_read
    (92) multiple_read -> . ids_access
    (93) multiple_read -> . multiple_read comma multiple_read
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 50
    id              shift and go to state 52
    open_parenthesis shift and go to state 53

    multiple_read                  shift and go to state 49
    ids_access                     shift and go to state 51

state 23

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 55

  ! $end            [ reduce using rule 72 (subroutines -> .) ]

    subroutines                    shift and go to state 54

state 24

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    else            reduce using rule 3 (inside_logic -> variable inside_logic .)
    elsif           reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 25

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    else            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    elsif           reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 26

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    else            reduce using rule 5 (inside_logic -> loops inside_logic .)
    elsif           reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 27

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    else            reduce using rule 6 (inside_logic -> calls inside_logic .)
    elsif           reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 28

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    else            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    elsif           reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 29

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    else            reduce using rule 8 (inside_logic -> assign inside_logic .)
    elsif           reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 30

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 56


state 31

    (77) functions -> id open_parenthesis . close_parenthesis
    (78) functions -> id open_parenthesis . arguments close_parenthesis
    (79) arguments -> . ByVal value
    (80) arguments -> . ByRef id
    (81) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 57
    ByVal           shift and go to state 59
    ByRef           shift and go to state 60

    arguments                      shift and go to state 58

state 32

    (17) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 62
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 33

    (23) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 67
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 34

    (24) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 68


state 35

    (25) loops -> for id . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 69


state 36

    (65) calls -> gosub id .

    dim             reduce using rule 65 (calls -> gosub id .)
    if              reduce using rule 65 (calls -> gosub id .)
    while           reduce using rule 65 (calls -> gosub id .)
    do              reduce using rule 65 (calls -> gosub id .)
    for             reduce using rule 65 (calls -> gosub id .)
    gosub           reduce using rule 65 (calls -> gosub id .)
    dunkelCls       reduce using rule 65 (calls -> gosub id .)
    let             reduce using rule 65 (calls -> gosub id .)
    id              reduce using rule 65 (calls -> gosub id .)
    dunkelPrint     reduce using rule 65 (calls -> gosub id .)
    dunkelRead      reduce using rule 65 (calls -> gosub id .)
    end             reduce using rule 65 (calls -> gosub id .)
    loop            reduce using rule 65 (calls -> gosub id .)
    wend            reduce using rule 65 (calls -> gosub id .)
    return          reduce using rule 65 (calls -> gosub id .)
    else            reduce using rule 65 (calls -> gosub id .)
    elsif           reduce using rule 65 (calls -> gosub id .)
    next            reduce using rule 65 (calls -> gosub id .)


state 37

    (73) assign -> let id . equals logic_expression
    (74) assign -> let id . equals arithmetic_expression

    equals          shift and go to state 70


state 38

    (85) print -> dunkelPrint multiple_print .
    (89) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 85 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 85 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 85 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 85 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 85 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 85 (print -> dunkelPrint multiple_print .)
    dunkelCls       reduce using rule 85 (print -> dunkelPrint multiple_print .)
    let             reduce using rule 85 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 85 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 85 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 85 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 85 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 85 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 85 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 85 (print -> dunkelPrint multiple_print .)
    else            reduce using rule 85 (print -> dunkelPrint multiple_print .)
    elsif           reduce using rule 85 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 85 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 71


state 39

    (86) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (55) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (87) multiple_print -> . string
    (88) multiple_print -> . arithmetic_expression
    (89) multiple_print -> . multiple_print comma multiple_print
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis

    string          shift and go to state 40
    id              shift and go to state 76
    open_parenthesis shift and go to state 72
    word_value      shift and go to state 46
    float_value     shift and go to state 47

    multiple_print                 shift and go to state 73
    arithmetic_expression          shift and go to state 74
    ids_access                     shift and go to state 75
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44

state 40

    (87) multiple_print -> string .

    comma           reduce using rule 87 (multiple_print -> string .)
    dim             reduce using rule 87 (multiple_print -> string .)
    if              reduce using rule 87 (multiple_print -> string .)
    while           reduce using rule 87 (multiple_print -> string .)
    do              reduce using rule 87 (multiple_print -> string .)
    for             reduce using rule 87 (multiple_print -> string .)
    gosub           reduce using rule 87 (multiple_print -> string .)
    dunkelCls       reduce using rule 87 (multiple_print -> string .)
    let             reduce using rule 87 (multiple_print -> string .)
    id              reduce using rule 87 (multiple_print -> string .)
    dunkelPrint     reduce using rule 87 (multiple_print -> string .)
    dunkelRead      reduce using rule 87 (multiple_print -> string .)
    end             reduce using rule 87 (multiple_print -> string .)
    loop            reduce using rule 87 (multiple_print -> string .)
    wend            reduce using rule 87 (multiple_print -> string .)
    return          reduce using rule 87 (multiple_print -> string .)
    else            reduce using rule 87 (multiple_print -> string .)
    elsif           reduce using rule 87 (multiple_print -> string .)
    next            reduce using rule 87 (multiple_print -> string .)
    close_parenthesis reduce using rule 87 (multiple_print -> string .)


state 41

    (88) multiple_print -> arithmetic_expression .

    comma           reduce using rule 88 (multiple_print -> arithmetic_expression .)
    dim             reduce using rule 88 (multiple_print -> arithmetic_expression .)
    if              reduce using rule 88 (multiple_print -> arithmetic_expression .)
    while           reduce using rule 88 (multiple_print -> arithmetic_expression .)
    do              reduce using rule 88 (multiple_print -> arithmetic_expression .)
    for             reduce using rule 88 (multiple_print -> arithmetic_expression .)
    gosub           reduce using rule 88 (multiple_print -> arithmetic_expression .)
    dunkelCls       reduce using rule 88 (multiple_print -> arithmetic_expression .)
    let             reduce using rule 88 (multiple_print -> arithmetic_expression .)
    id              reduce using rule 88 (multiple_print -> arithmetic_expression .)
    dunkelPrint     reduce using rule 88 (multiple_print -> arithmetic_expression .)
    dunkelRead      reduce using rule 88 (multiple_print -> arithmetic_expression .)
    end             reduce using rule 88 (multiple_print -> arithmetic_expression .)
    loop            reduce using rule 88 (multiple_print -> arithmetic_expression .)
    wend            reduce using rule 88 (multiple_print -> arithmetic_expression .)
    return          reduce using rule 88 (multiple_print -> arithmetic_expression .)
    else            reduce using rule 88 (multiple_print -> arithmetic_expression .)
    elsif           reduce using rule 88 (multiple_print -> arithmetic_expression .)
    next            reduce using rule 88 (multiple_print -> arithmetic_expression .)
    close_parenthesis reduce using rule 88 (multiple_print -> arithmetic_expression .)


state 42

    (46) arithmetic_expression -> value .
    (47) arithmetic_expression -> value . arithmetic_operand value
    (48) arithmetic_operand -> . sum
    (49) arithmetic_operand -> . substraction
    (50) arithmetic_operand -> . multiplication
    (51) arithmetic_operand -> . division
    (52) arithmetic_operand -> . exponent

    comma           reduce using rule 46 (arithmetic_expression -> value .)
    dim             reduce using rule 46 (arithmetic_expression -> value .)
    if              reduce using rule 46 (arithmetic_expression -> value .)
    while           reduce using rule 46 (arithmetic_expression -> value .)
    do              reduce using rule 46 (arithmetic_expression -> value .)
    for             reduce using rule 46 (arithmetic_expression -> value .)
    gosub           reduce using rule 46 (arithmetic_expression -> value .)
    dunkelCls       reduce using rule 46 (arithmetic_expression -> value .)
    let             reduce using rule 46 (arithmetic_expression -> value .)
    id              reduce using rule 46 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 46 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 46 (arithmetic_expression -> value .)
    end             reduce using rule 46 (arithmetic_expression -> value .)
    loop            reduce using rule 46 (arithmetic_expression -> value .)
    wend            reduce using rule 46 (arithmetic_expression -> value .)
    return          reduce using rule 46 (arithmetic_expression -> value .)
    else            reduce using rule 46 (arithmetic_expression -> value .)
    elsif           reduce using rule 46 (arithmetic_expression -> value .)
    next            reduce using rule 46 (arithmetic_expression -> value .)
    is_equal        reduce using rule 46 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 46 (arithmetic_expression -> value .)
    and             reduce using rule 46 (arithmetic_expression -> value .)
    or              reduce using rule 46 (arithmetic_expression -> value .)
    not             reduce using rule 46 (arithmetic_expression -> value .)
    greater_than    reduce using rule 46 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 46 (arithmetic_expression -> value .)
    less_than       reduce using rule 46 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 46 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 46 (arithmetic_expression -> value .)
    to              reduce using rule 46 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 46 (arithmetic_expression -> value .)
    step            reduce using rule 46 (arithmetic_expression -> value .)
    sum             shift and go to state 78
    substraction    shift and go to state 79
    multiplication  shift and go to state 80
    division        shift and go to state 81
    exponent        shift and go to state 82

    arithmetic_operand             shift and go to state 77

state 43

    (53) value -> real_value .

    sum             reduce using rule 53 (value -> real_value .)
    substraction    reduce using rule 53 (value -> real_value .)
    multiplication  reduce using rule 53 (value -> real_value .)
    division        reduce using rule 53 (value -> real_value .)
    exponent        reduce using rule 53 (value -> real_value .)
    comma           reduce using rule 53 (value -> real_value .)
    dim             reduce using rule 53 (value -> real_value .)
    if              reduce using rule 53 (value -> real_value .)
    while           reduce using rule 53 (value -> real_value .)
    do              reduce using rule 53 (value -> real_value .)
    for             reduce using rule 53 (value -> real_value .)
    gosub           reduce using rule 53 (value -> real_value .)
    dunkelCls       reduce using rule 53 (value -> real_value .)
    let             reduce using rule 53 (value -> real_value .)
    id              reduce using rule 53 (value -> real_value .)
    dunkelPrint     reduce using rule 53 (value -> real_value .)
    dunkelRead      reduce using rule 53 (value -> real_value .)
    end             reduce using rule 53 (value -> real_value .)
    loop            reduce using rule 53 (value -> real_value .)
    wend            reduce using rule 53 (value -> real_value .)
    return          reduce using rule 53 (value -> real_value .)
    else            reduce using rule 53 (value -> real_value .)
    elsif           reduce using rule 53 (value -> real_value .)
    next            reduce using rule 53 (value -> real_value .)
    is_equal        reduce using rule 53 (value -> real_value .)
    is_not_equal    reduce using rule 53 (value -> real_value .)
    and             reduce using rule 53 (value -> real_value .)
    or              reduce using rule 53 (value -> real_value .)
    not             reduce using rule 53 (value -> real_value .)
    greater_than    reduce using rule 53 (value -> real_value .)
    greater_or_equal_than reduce using rule 53 (value -> real_value .)
    less_than       reduce using rule 53 (value -> real_value .)
    less_or_equal_than reduce using rule 53 (value -> real_value .)
    close_parenthesis reduce using rule 53 (value -> real_value .)
    to              reduce using rule 53 (value -> real_value .)
    close_brackets  reduce using rule 53 (value -> real_value .)
    step            reduce using rule 53 (value -> real_value .)


state 44

    (54) value -> functions .

    sum             reduce using rule 54 (value -> functions .)
    substraction    reduce using rule 54 (value -> functions .)
    multiplication  reduce using rule 54 (value -> functions .)
    division        reduce using rule 54 (value -> functions .)
    exponent        reduce using rule 54 (value -> functions .)
    comma           reduce using rule 54 (value -> functions .)
    dim             reduce using rule 54 (value -> functions .)
    if              reduce using rule 54 (value -> functions .)
    while           reduce using rule 54 (value -> functions .)
    do              reduce using rule 54 (value -> functions .)
    for             reduce using rule 54 (value -> functions .)
    gosub           reduce using rule 54 (value -> functions .)
    dunkelCls       reduce using rule 54 (value -> functions .)
    let             reduce using rule 54 (value -> functions .)
    id              reduce using rule 54 (value -> functions .)
    dunkelPrint     reduce using rule 54 (value -> functions .)
    dunkelRead      reduce using rule 54 (value -> functions .)
    end             reduce using rule 54 (value -> functions .)
    loop            reduce using rule 54 (value -> functions .)
    wend            reduce using rule 54 (value -> functions .)
    return          reduce using rule 54 (value -> functions .)
    else            reduce using rule 54 (value -> functions .)
    elsif           reduce using rule 54 (value -> functions .)
    next            reduce using rule 54 (value -> functions .)
    is_equal        reduce using rule 54 (value -> functions .)
    is_not_equal    reduce using rule 54 (value -> functions .)
    and             reduce using rule 54 (value -> functions .)
    or              reduce using rule 54 (value -> functions .)
    not             reduce using rule 54 (value -> functions .)
    greater_than    reduce using rule 54 (value -> functions .)
    greater_or_equal_than reduce using rule 54 (value -> functions .)
    less_than       reduce using rule 54 (value -> functions .)
    less_or_equal_than reduce using rule 54 (value -> functions .)
    close_parenthesis reduce using rule 54 (value -> functions .)
    to              reduce using rule 54 (value -> functions .)
    close_brackets  reduce using rule 54 (value -> functions .)
    step            reduce using rule 54 (value -> functions .)


state 45

    (56) value -> ids_access .

    sum             reduce using rule 56 (value -> ids_access .)
    substraction    reduce using rule 56 (value -> ids_access .)
    multiplication  reduce using rule 56 (value -> ids_access .)
    division        reduce using rule 56 (value -> ids_access .)
    exponent        reduce using rule 56 (value -> ids_access .)
    comma           reduce using rule 56 (value -> ids_access .)
    dim             reduce using rule 56 (value -> ids_access .)
    if              reduce using rule 56 (value -> ids_access .)
    while           reduce using rule 56 (value -> ids_access .)
    do              reduce using rule 56 (value -> ids_access .)
    for             reduce using rule 56 (value -> ids_access .)
    gosub           reduce using rule 56 (value -> ids_access .)
    dunkelCls       reduce using rule 56 (value -> ids_access .)
    let             reduce using rule 56 (value -> ids_access .)
    id              reduce using rule 56 (value -> ids_access .)
    dunkelPrint     reduce using rule 56 (value -> ids_access .)
    dunkelRead      reduce using rule 56 (value -> ids_access .)
    end             reduce using rule 56 (value -> ids_access .)
    loop            reduce using rule 56 (value -> ids_access .)
    wend            reduce using rule 56 (value -> ids_access .)
    return          reduce using rule 56 (value -> ids_access .)
    else            reduce using rule 56 (value -> ids_access .)
    elsif           reduce using rule 56 (value -> ids_access .)
    next            reduce using rule 56 (value -> ids_access .)
    is_equal        reduce using rule 56 (value -> ids_access .)
    is_not_equal    reduce using rule 56 (value -> ids_access .)
    and             reduce using rule 56 (value -> ids_access .)
    or              reduce using rule 56 (value -> ids_access .)
    not             reduce using rule 56 (value -> ids_access .)
    greater_than    reduce using rule 56 (value -> ids_access .)
    greater_or_equal_than reduce using rule 56 (value -> ids_access .)
    less_than       reduce using rule 56 (value -> ids_access .)
    less_or_equal_than reduce using rule 56 (value -> ids_access .)
    close_parenthesis reduce using rule 56 (value -> ids_access .)
    to              reduce using rule 56 (value -> ids_access .)
    close_brackets  reduce using rule 56 (value -> ids_access .)
    step            reduce using rule 56 (value -> ids_access .)


state 46

    (62) real_value -> word_value .

    sum             reduce using rule 62 (real_value -> word_value .)
    substraction    reduce using rule 62 (real_value -> word_value .)
    multiplication  reduce using rule 62 (real_value -> word_value .)
    division        reduce using rule 62 (real_value -> word_value .)
    exponent        reduce using rule 62 (real_value -> word_value .)
    comma           reduce using rule 62 (real_value -> word_value .)
    dim             reduce using rule 62 (real_value -> word_value .)
    if              reduce using rule 62 (real_value -> word_value .)
    while           reduce using rule 62 (real_value -> word_value .)
    do              reduce using rule 62 (real_value -> word_value .)
    for             reduce using rule 62 (real_value -> word_value .)
    gosub           reduce using rule 62 (real_value -> word_value .)
    dunkelCls       reduce using rule 62 (real_value -> word_value .)
    let             reduce using rule 62 (real_value -> word_value .)
    id              reduce using rule 62 (real_value -> word_value .)
    dunkelPrint     reduce using rule 62 (real_value -> word_value .)
    dunkelRead      reduce using rule 62 (real_value -> word_value .)
    end             reduce using rule 62 (real_value -> word_value .)
    loop            reduce using rule 62 (real_value -> word_value .)
    wend            reduce using rule 62 (real_value -> word_value .)
    return          reduce using rule 62 (real_value -> word_value .)
    else            reduce using rule 62 (real_value -> word_value .)
    elsif           reduce using rule 62 (real_value -> word_value .)
    next            reduce using rule 62 (real_value -> word_value .)
    is_equal        reduce using rule 62 (real_value -> word_value .)
    is_not_equal    reduce using rule 62 (real_value -> word_value .)
    and             reduce using rule 62 (real_value -> word_value .)
    or              reduce using rule 62 (real_value -> word_value .)
    not             reduce using rule 62 (real_value -> word_value .)
    greater_than    reduce using rule 62 (real_value -> word_value .)
    greater_or_equal_than reduce using rule 62 (real_value -> word_value .)
    less_than       reduce using rule 62 (real_value -> word_value .)
    less_or_equal_than reduce using rule 62 (real_value -> word_value .)
    close_parenthesis reduce using rule 62 (real_value -> word_value .)
    to              reduce using rule 62 (real_value -> word_value .)
    close_brackets  reduce using rule 62 (real_value -> word_value .)
    step            reduce using rule 62 (real_value -> word_value .)


state 47

    (63) real_value -> float_value .

    sum             reduce using rule 63 (real_value -> float_value .)
    substraction    reduce using rule 63 (real_value -> float_value .)
    multiplication  reduce using rule 63 (real_value -> float_value .)
    division        reduce using rule 63 (real_value -> float_value .)
    exponent        reduce using rule 63 (real_value -> float_value .)
    comma           reduce using rule 63 (real_value -> float_value .)
    dim             reduce using rule 63 (real_value -> float_value .)
    if              reduce using rule 63 (real_value -> float_value .)
    while           reduce using rule 63 (real_value -> float_value .)
    do              reduce using rule 63 (real_value -> float_value .)
    for             reduce using rule 63 (real_value -> float_value .)
    gosub           reduce using rule 63 (real_value -> float_value .)
    dunkelCls       reduce using rule 63 (real_value -> float_value .)
    let             reduce using rule 63 (real_value -> float_value .)
    id              reduce using rule 63 (real_value -> float_value .)
    dunkelPrint     reduce using rule 63 (real_value -> float_value .)
    dunkelRead      reduce using rule 63 (real_value -> float_value .)
    end             reduce using rule 63 (real_value -> float_value .)
    loop            reduce using rule 63 (real_value -> float_value .)
    wend            reduce using rule 63 (real_value -> float_value .)
    return          reduce using rule 63 (real_value -> float_value .)
    else            reduce using rule 63 (real_value -> float_value .)
    elsif           reduce using rule 63 (real_value -> float_value .)
    next            reduce using rule 63 (real_value -> float_value .)
    is_equal        reduce using rule 63 (real_value -> float_value .)
    is_not_equal    reduce using rule 63 (real_value -> float_value .)
    and             reduce using rule 63 (real_value -> float_value .)
    or              reduce using rule 63 (real_value -> float_value .)
    not             reduce using rule 63 (real_value -> float_value .)
    greater_than    reduce using rule 63 (real_value -> float_value .)
    greater_or_equal_than reduce using rule 63 (real_value -> float_value .)
    less_than       reduce using rule 63 (real_value -> float_value .)
    less_or_equal_than reduce using rule 63 (real_value -> float_value .)
    close_parenthesis reduce using rule 63 (real_value -> float_value .)
    to              reduce using rule 63 (real_value -> float_value .)
    close_brackets  reduce using rule 63 (real_value -> float_value .)
    step            reduce using rule 63 (real_value -> float_value .)


state 48

    (64) real_value -> id .
    (77) functions -> id . open_parenthesis close_parenthesis
    (78) functions -> id . open_parenthesis arguments close_parenthesis
    (57) ids_access -> id .
    (58) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (59) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

  ! reduce/reduce conflict for sum resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for comma resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for dim resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for if resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for while resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for do resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for for resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for gosub resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for let resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for id resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for end resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for loop resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for wend resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for return resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for else resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for elsif resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for next resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for is_equal resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for and resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for or resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for not resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for greater_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for less_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for to resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for close_brackets resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for step resolved using rule 57 (ids_access -> id .)
    open_parenthesis shift and go to state 31
    sum             reduce using rule 57 (ids_access -> id .)
    substraction    reduce using rule 57 (ids_access -> id .)
    multiplication  reduce using rule 57 (ids_access -> id .)
    division        reduce using rule 57 (ids_access -> id .)
    exponent        reduce using rule 57 (ids_access -> id .)
    comma           reduce using rule 57 (ids_access -> id .)
    dim             reduce using rule 57 (ids_access -> id .)
    if              reduce using rule 57 (ids_access -> id .)
    while           reduce using rule 57 (ids_access -> id .)
    do              reduce using rule 57 (ids_access -> id .)
    for             reduce using rule 57 (ids_access -> id .)
    gosub           reduce using rule 57 (ids_access -> id .)
    dunkelCls       reduce using rule 57 (ids_access -> id .)
    let             reduce using rule 57 (ids_access -> id .)
    id              reduce using rule 57 (ids_access -> id .)
    dunkelPrint     reduce using rule 57 (ids_access -> id .)
    dunkelRead      reduce using rule 57 (ids_access -> id .)
    end             reduce using rule 57 (ids_access -> id .)
    loop            reduce using rule 57 (ids_access -> id .)
    wend            reduce using rule 57 (ids_access -> id .)
    return          reduce using rule 57 (ids_access -> id .)
    else            reduce using rule 57 (ids_access -> id .)
    elsif           reduce using rule 57 (ids_access -> id .)
    next            reduce using rule 57 (ids_access -> id .)
    is_equal        reduce using rule 57 (ids_access -> id .)
    is_not_equal    reduce using rule 57 (ids_access -> id .)
    and             reduce using rule 57 (ids_access -> id .)
    or              reduce using rule 57 (ids_access -> id .)
    not             reduce using rule 57 (ids_access -> id .)
    greater_than    reduce using rule 57 (ids_access -> id .)
    greater_or_equal_than reduce using rule 57 (ids_access -> id .)
    less_than       reduce using rule 57 (ids_access -> id .)
    less_or_equal_than reduce using rule 57 (ids_access -> id .)
    close_parenthesis reduce using rule 57 (ids_access -> id .)
    to              reduce using rule 57 (ids_access -> id .)
    close_brackets  reduce using rule 57 (ids_access -> id .)
    step            reduce using rule 57 (ids_access -> id .)
    open_brackets   shift and go to state 83

  ! sum             [ reduce using rule 64 (real_value -> id .) ]
  ! substraction    [ reduce using rule 64 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 64 (real_value -> id .) ]
  ! division        [ reduce using rule 64 (real_value -> id .) ]
  ! exponent        [ reduce using rule 64 (real_value -> id .) ]
  ! comma           [ reduce using rule 64 (real_value -> id .) ]
  ! dim             [ reduce using rule 64 (real_value -> id .) ]
  ! if              [ reduce using rule 64 (real_value -> id .) ]
  ! while           [ reduce using rule 64 (real_value -> id .) ]
  ! do              [ reduce using rule 64 (real_value -> id .) ]
  ! for             [ reduce using rule 64 (real_value -> id .) ]
  ! gosub           [ reduce using rule 64 (real_value -> id .) ]
  ! dunkelCls       [ reduce using rule 64 (real_value -> id .) ]
  ! let             [ reduce using rule 64 (real_value -> id .) ]
  ! id              [ reduce using rule 64 (real_value -> id .) ]
  ! dunkelPrint     [ reduce using rule 64 (real_value -> id .) ]
  ! dunkelRead      [ reduce using rule 64 (real_value -> id .) ]
  ! end             [ reduce using rule 64 (real_value -> id .) ]
  ! loop            [ reduce using rule 64 (real_value -> id .) ]
  ! wend            [ reduce using rule 64 (real_value -> id .) ]
  ! return          [ reduce using rule 64 (real_value -> id .) ]
  ! else            [ reduce using rule 64 (real_value -> id .) ]
  ! elsif           [ reduce using rule 64 (real_value -> id .) ]
  ! next            [ reduce using rule 64 (real_value -> id .) ]
  ! is_equal        [ reduce using rule 64 (real_value -> id .) ]
  ! is_not_equal    [ reduce using rule 64 (real_value -> id .) ]
  ! and             [ reduce using rule 64 (real_value -> id .) ]
  ! or              [ reduce using rule 64 (real_value -> id .) ]
  ! not             [ reduce using rule 64 (real_value -> id .) ]
  ! greater_than    [ reduce using rule 64 (real_value -> id .) ]
  ! greater_or_equal_than [ reduce using rule 64 (real_value -> id .) ]
  ! less_than       [ reduce using rule 64 (real_value -> id .) ]
  ! less_or_equal_than [ reduce using rule 64 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 64 (real_value -> id .) ]
  ! to              [ reduce using rule 64 (real_value -> id .) ]
  ! close_brackets  [ reduce using rule 64 (real_value -> id .) ]
  ! step            [ reduce using rule 64 (real_value -> id .) ]


state 49

    (90) read -> dunkelRead multiple_read .
    (93) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 90 (read -> dunkelRead multiple_read .)
    if              reduce using rule 90 (read -> dunkelRead multiple_read .)
    while           reduce using rule 90 (read -> dunkelRead multiple_read .)
    do              reduce using rule 90 (read -> dunkelRead multiple_read .)
    for             reduce using rule 90 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 90 (read -> dunkelRead multiple_read .)
    dunkelCls       reduce using rule 90 (read -> dunkelRead multiple_read .)
    let             reduce using rule 90 (read -> dunkelRead multiple_read .)
    id              reduce using rule 90 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 90 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 90 (read -> dunkelRead multiple_read .)
    end             reduce using rule 90 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 90 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 90 (read -> dunkelRead multiple_read .)
    return          reduce using rule 90 (read -> dunkelRead multiple_read .)
    else            reduce using rule 90 (read -> dunkelRead multiple_read .)
    elsif           reduce using rule 90 (read -> dunkelRead multiple_read .)
    next            reduce using rule 90 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 84


state 50

    (91) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 85


state 51

    (92) multiple_read -> ids_access .

    comma           reduce using rule 92 (multiple_read -> ids_access .)
    dim             reduce using rule 92 (multiple_read -> ids_access .)
    if              reduce using rule 92 (multiple_read -> ids_access .)
    while           reduce using rule 92 (multiple_read -> ids_access .)
    do              reduce using rule 92 (multiple_read -> ids_access .)
    for             reduce using rule 92 (multiple_read -> ids_access .)
    gosub           reduce using rule 92 (multiple_read -> ids_access .)
    dunkelCls       reduce using rule 92 (multiple_read -> ids_access .)
    let             reduce using rule 92 (multiple_read -> ids_access .)
    id              reduce using rule 92 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 92 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 92 (multiple_read -> ids_access .)
    end             reduce using rule 92 (multiple_read -> ids_access .)
    loop            reduce using rule 92 (multiple_read -> ids_access .)
    wend            reduce using rule 92 (multiple_read -> ids_access .)
    return          reduce using rule 92 (multiple_read -> ids_access .)
    else            reduce using rule 92 (multiple_read -> ids_access .)
    elsif           reduce using rule 92 (multiple_read -> ids_access .)
    next            reduce using rule 92 (multiple_read -> ids_access .)


state 52

    (57) ids_access -> id .
    (58) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (59) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 57 (ids_access -> id .)
    dim             reduce using rule 57 (ids_access -> id .)
    if              reduce using rule 57 (ids_access -> id .)
    while           reduce using rule 57 (ids_access -> id .)
    do              reduce using rule 57 (ids_access -> id .)
    for             reduce using rule 57 (ids_access -> id .)
    gosub           reduce using rule 57 (ids_access -> id .)
    dunkelCls       reduce using rule 57 (ids_access -> id .)
    let             reduce using rule 57 (ids_access -> id .)
    id              reduce using rule 57 (ids_access -> id .)
    dunkelPrint     reduce using rule 57 (ids_access -> id .)
    dunkelRead      reduce using rule 57 (ids_access -> id .)
    end             reduce using rule 57 (ids_access -> id .)
    loop            reduce using rule 57 (ids_access -> id .)
    wend            reduce using rule 57 (ids_access -> id .)
    return          reduce using rule 57 (ids_access -> id .)
    else            reduce using rule 57 (ids_access -> id .)
    elsif           reduce using rule 57 (ids_access -> id .)
    next            reduce using rule 57 (ids_access -> id .)
    close_parenthesis reduce using rule 57 (ids_access -> id .)
    open_brackets   shift and go to state 83


state 53

    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 52
    open_parenthesis shift and go to state 53

    ids_access                     shift and go to state 86

state 54

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 55

    (67) subroutines -> sub . procedure id inside_logic return subroutines
    (68) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 87
    function        shift and go to state 88


state 56

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 90
    float           shift and go to state 91
    bool            shift and go to state 92

    variable_type                  shift and go to state 89

state 57

    (77) functions -> id open_parenthesis close_parenthesis .

    dim             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    dunkelCls       reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    let             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    else            reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    elsif           reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    sum             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    substraction    reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    division        reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    exponent        reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    comma           reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    and             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    or              reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    not             reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    less_than       reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    to              reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)
    step            reduce using rule 77 (functions -> id open_parenthesis close_parenthesis .)


state 58

    (78) functions -> id open_parenthesis arguments . close_parenthesis
    (81) arguments -> arguments . comma arguments

    close_parenthesis shift and go to state 93
    comma           shift and go to state 94


state 59

    (79) arguments -> ByVal . value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    value                          shift and go to state 95
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 60

    (80) arguments -> ByRef . id

    id              shift and go to state 97


state 61

    (31) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (55) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 98
    id              shift and go to state 76
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47

    logic_expression               shift and go to state 99
    arithmetic_expression          shift and go to state 100
    ids_access                     shift and go to state 75
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44

state 62

    (17) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic else_ifs else inside_logic end if
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 101
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 63

    (26) logic_expression -> arithmetic_expression .
    (28) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (41) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (42) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        shift and go to state 113
    is_not_equal    shift and go to state 114
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! and             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 112

state 64

    (27) logic_expression -> compared_to_bool .

    close_parenthesis reduce using rule 27 (logic_expression -> compared_to_bool .)
    and             reduce using rule 27 (logic_expression -> compared_to_bool .)
    or              reduce using rule 27 (logic_expression -> compared_to_bool .)
    not             reduce using rule 27 (logic_expression -> compared_to_bool .)
    is_equal        reduce using rule 27 (logic_expression -> compared_to_bool .)
    is_not_equal    reduce using rule 27 (logic_expression -> compared_to_bool .)
    greater_than    reduce using rule 27 (logic_expression -> compared_to_bool .)
    greater_or_equal_than reduce using rule 27 (logic_expression -> compared_to_bool .)
    less_than       reduce using rule 27 (logic_expression -> compared_to_bool .)
    less_or_equal_than reduce using rule 27 (logic_expression -> compared_to_bool .)
    dim             reduce using rule 27 (logic_expression -> compared_to_bool .)
    if              reduce using rule 27 (logic_expression -> compared_to_bool .)
    while           reduce using rule 27 (logic_expression -> compared_to_bool .)
    do              reduce using rule 27 (logic_expression -> compared_to_bool .)
    for             reduce using rule 27 (logic_expression -> compared_to_bool .)
    gosub           reduce using rule 27 (logic_expression -> compared_to_bool .)
    dunkelCls       reduce using rule 27 (logic_expression -> compared_to_bool .)
    let             reduce using rule 27 (logic_expression -> compared_to_bool .)
    id              reduce using rule 27 (logic_expression -> compared_to_bool .)
    dunkelPrint     reduce using rule 27 (logic_expression -> compared_to_bool .)
    dunkelRead      reduce using rule 27 (logic_expression -> compared_to_bool .)
    end             reduce using rule 27 (logic_expression -> compared_to_bool .)
    loop            reduce using rule 27 (logic_expression -> compared_to_bool .)
    wend            reduce using rule 27 (logic_expression -> compared_to_bool .)
    return          reduce using rule 27 (logic_expression -> compared_to_bool .)
    else            reduce using rule 27 (logic_expression -> compared_to_bool .)
    elsif           reduce using rule 27 (logic_expression -> compared_to_bool .)
    next            reduce using rule 27 (logic_expression -> compared_to_bool .)


state 65

    (30) logic_expression -> not . logic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 115
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 66

    (43) compared_to_bool -> bool_value . is_equal arithmetic_expression
    (44) compared_to_bool -> bool_value . is_not_equal arithmetic_expression
    (45) compared_to_bool -> bool_value .

  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
    is_equal        shift and go to state 116
    is_not_equal    shift and go to state 117
    close_parenthesis reduce using rule 45 (compared_to_bool -> bool_value .)
    and             reduce using rule 45 (compared_to_bool -> bool_value .)
    or              reduce using rule 45 (compared_to_bool -> bool_value .)
    not             reduce using rule 45 (compared_to_bool -> bool_value .)
    greater_than    reduce using rule 45 (compared_to_bool -> bool_value .)
    greater_or_equal_than reduce using rule 45 (compared_to_bool -> bool_value .)
    less_than       reduce using rule 45 (compared_to_bool -> bool_value .)
    less_or_equal_than reduce using rule 45 (compared_to_bool -> bool_value .)
    dim             reduce using rule 45 (compared_to_bool -> bool_value .)
    if              reduce using rule 45 (compared_to_bool -> bool_value .)
    while           reduce using rule 45 (compared_to_bool -> bool_value .)
    do              reduce using rule 45 (compared_to_bool -> bool_value .)
    for             reduce using rule 45 (compared_to_bool -> bool_value .)
    gosub           reduce using rule 45 (compared_to_bool -> bool_value .)
    dunkelCls       reduce using rule 45 (compared_to_bool -> bool_value .)
    let             reduce using rule 45 (compared_to_bool -> bool_value .)
    id              reduce using rule 45 (compared_to_bool -> bool_value .)
    dunkelPrint     reduce using rule 45 (compared_to_bool -> bool_value .)
    dunkelRead      reduce using rule 45 (compared_to_bool -> bool_value .)
    end             reduce using rule 45 (compared_to_bool -> bool_value .)
    loop            reduce using rule 45 (compared_to_bool -> bool_value .)
    wend            reduce using rule 45 (compared_to_bool -> bool_value .)
    return          reduce using rule 45 (compared_to_bool -> bool_value .)
    else            reduce using rule 45 (compared_to_bool -> bool_value .)
    elsif           reduce using rule 45 (compared_to_bool -> bool_value .)
    next            reduce using rule 45 (compared_to_bool -> bool_value .)

  ! is_equal        [ reduce using rule 45 (compared_to_bool -> bool_value .) ]
  ! is_not_equal    [ reduce using rule 45 (compared_to_bool -> bool_value .) ]


state 67

    (23) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 118
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 68

    (24) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 119


state 69

    (25) loops -> for id equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 120
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 70

    (73) assign -> let id equals . logic_expression
    (74) assign -> let id equals . arithmetic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 121
    arithmetic_expression          shift and go to state 122
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 71

    (89) multiple_print -> multiple_print comma . multiple_print
    (87) multiple_print -> . string
    (88) multiple_print -> . arithmetic_expression
    (89) multiple_print -> . multiple_print comma multiple_print
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 40
    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    multiple_print                 shift and go to state 123
    arithmetic_expression          shift and go to state 41
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 72

    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (55) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 76
    open_parenthesis shift and go to state 72
    word_value      shift and go to state 46
    float_value     shift and go to state 47

    ids_access                     shift and go to state 75
    arithmetic_expression          shift and go to state 124
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44

state 73

    (86) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (89) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 125
    comma           shift and go to state 71


state 74

    (55) value -> open_parenthesis arithmetic_expression . close_parenthesis
    (88) multiple_print -> arithmetic_expression .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 126
    comma           reduce using rule 88 (multiple_print -> arithmetic_expression .)

  ! close_parenthesis [ reduce using rule 88 (multiple_print -> arithmetic_expression .) ]


state 75

    (61) ids_access -> open_parenthesis ids_access . close_parenthesis
    (56) value -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 127
    sum             reduce using rule 56 (value -> ids_access .)
    substraction    reduce using rule 56 (value -> ids_access .)
    multiplication  reduce using rule 56 (value -> ids_access .)
    division        reduce using rule 56 (value -> ids_access .)
    exponent        reduce using rule 56 (value -> ids_access .)
    comma           reduce using rule 56 (value -> ids_access .)
    is_equal        reduce using rule 56 (value -> ids_access .)
    is_not_equal    reduce using rule 56 (value -> ids_access .)
    and             reduce using rule 56 (value -> ids_access .)
    or              reduce using rule 56 (value -> ids_access .)
    not             reduce using rule 56 (value -> ids_access .)
    greater_than    reduce using rule 56 (value -> ids_access .)
    greater_or_equal_than reduce using rule 56 (value -> ids_access .)
    less_than       reduce using rule 56 (value -> ids_access .)
    less_or_equal_than reduce using rule 56 (value -> ids_access .)

  ! close_parenthesis [ reduce using rule 56 (value -> ids_access .) ]


state 76

    (57) ids_access -> id .
    (58) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (59) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (64) real_value -> id .
    (77) functions -> id . open_parenthesis close_parenthesis
    (78) functions -> id . open_parenthesis arguments close_parenthesis

  ! reduce/reduce conflict for sum resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for comma resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for is_equal resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for and resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for or resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for not resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for greater_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for less_than resolved using rule 57 (ids_access -> id .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 57 (ids_access -> id .)
    close_parenthesis reduce using rule 57 (ids_access -> id .)
    sum             reduce using rule 57 (ids_access -> id .)
    substraction    reduce using rule 57 (ids_access -> id .)
    multiplication  reduce using rule 57 (ids_access -> id .)
    division        reduce using rule 57 (ids_access -> id .)
    exponent        reduce using rule 57 (ids_access -> id .)
    comma           reduce using rule 57 (ids_access -> id .)
    is_equal        reduce using rule 57 (ids_access -> id .)
    is_not_equal    reduce using rule 57 (ids_access -> id .)
    and             reduce using rule 57 (ids_access -> id .)
    or              reduce using rule 57 (ids_access -> id .)
    not             reduce using rule 57 (ids_access -> id .)
    greater_than    reduce using rule 57 (ids_access -> id .)
    greater_or_equal_than reduce using rule 57 (ids_access -> id .)
    less_than       reduce using rule 57 (ids_access -> id .)
    less_or_equal_than reduce using rule 57 (ids_access -> id .)
    open_brackets   shift and go to state 83
    open_parenthesis shift and go to state 31

  ! sum             [ reduce using rule 64 (real_value -> id .) ]
  ! substraction    [ reduce using rule 64 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 64 (real_value -> id .) ]
  ! division        [ reduce using rule 64 (real_value -> id .) ]
  ! exponent        [ reduce using rule 64 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 64 (real_value -> id .) ]
  ! comma           [ reduce using rule 64 (real_value -> id .) ]
  ! is_equal        [ reduce using rule 64 (real_value -> id .) ]
  ! is_not_equal    [ reduce using rule 64 (real_value -> id .) ]
  ! and             [ reduce using rule 64 (real_value -> id .) ]
  ! or              [ reduce using rule 64 (real_value -> id .) ]
  ! not             [ reduce using rule 64 (real_value -> id .) ]
  ! greater_than    [ reduce using rule 64 (real_value -> id .) ]
  ! greater_or_equal_than [ reduce using rule 64 (real_value -> id .) ]
  ! less_than       [ reduce using rule 64 (real_value -> id .) ]
  ! less_or_equal_than [ reduce using rule 64 (real_value -> id .) ]


state 77

    (47) arithmetic_expression -> value arithmetic_operand . value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    value                          shift and go to state 128
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 78

    (48) arithmetic_operand -> sum .

    open_parenthesis reduce using rule 48 (arithmetic_operand -> sum .)
    word_value      reduce using rule 48 (arithmetic_operand -> sum .)
    float_value     reduce using rule 48 (arithmetic_operand -> sum .)
    id              reduce using rule 48 (arithmetic_operand -> sum .)


state 79

    (49) arithmetic_operand -> substraction .

    open_parenthesis reduce using rule 49 (arithmetic_operand -> substraction .)
    word_value      reduce using rule 49 (arithmetic_operand -> substraction .)
    float_value     reduce using rule 49 (arithmetic_operand -> substraction .)
    id              reduce using rule 49 (arithmetic_operand -> substraction .)


state 80

    (50) arithmetic_operand -> multiplication .

    open_parenthesis reduce using rule 50 (arithmetic_operand -> multiplication .)
    word_value      reduce using rule 50 (arithmetic_operand -> multiplication .)
    float_value     reduce using rule 50 (arithmetic_operand -> multiplication .)
    id              reduce using rule 50 (arithmetic_operand -> multiplication .)


state 81

    (51) arithmetic_operand -> division .

    open_parenthesis reduce using rule 51 (arithmetic_operand -> division .)
    word_value      reduce using rule 51 (arithmetic_operand -> division .)
    float_value     reduce using rule 51 (arithmetic_operand -> division .)
    id              reduce using rule 51 (arithmetic_operand -> division .)


state 82

    (52) arithmetic_operand -> exponent .

    open_parenthesis reduce using rule 52 (arithmetic_operand -> exponent .)
    word_value      reduce using rule 52 (arithmetic_operand -> exponent .)
    float_value     reduce using rule 52 (arithmetic_operand -> exponent .)
    id              reduce using rule 52 (arithmetic_operand -> exponent .)


state 83

    (58) ids_access -> id open_brackets . arithmetic_expression close_brackets
    (59) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 129
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 84

    (93) multiple_read -> multiple_read comma . multiple_read
    (92) multiple_read -> . ids_access
    (93) multiple_read -> . multiple_read comma multiple_read
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 52
    open_parenthesis shift and go to state 53

    multiple_read                  shift and go to state 130
    ids_access                     shift and go to state 51

state 85

    (91) read -> dunkelRead string comma . multiple_read
    (92) multiple_read -> . ids_access
    (93) multiple_read -> . multiple_read comma multiple_read
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 52
    open_parenthesis shift and go to state 53

    multiple_read                  shift and go to state 131
    ids_access                     shift and go to state 51

state 86

    (61) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 127


state 87

    (67) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 132


state 88

    (68) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 133


state 89

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelCls       reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    else            reduce using rule 10 (variable -> dim id as variable_type .)
    elsif           reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 134


state 90

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    dunkelCls       reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    else            reduce using rule 14 (variable_type -> word .)
    elsif           reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 91

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    dunkelCls       reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    else            reduce using rule 15 (variable_type -> float .)
    elsif           reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 92

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    dunkelCls       reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    else            reduce using rule 16 (variable_type -> bool .)
    elsif           reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 93

    (78) functions -> id open_parenthesis arguments close_parenthesis .

    dim             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    if              reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    while           reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    do              reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    for             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    gosub           reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelCls       reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    let             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    id              reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelPrint     reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelRead      reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    end             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    loop            reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    wend            reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    return          reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    else            reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    elsif           reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    next            reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    sum             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    substraction    reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    multiplication  reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    division        reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    exponent        reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    comma           reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_equal        reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_not_equal    reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    and             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    or              reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    not             reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_than    reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_or_equal_than reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_than       reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_or_equal_than reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_parenthesis reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    to              reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_brackets  reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)
    step            reduce using rule 78 (functions -> id open_parenthesis arguments close_parenthesis .)


state 94

    (81) arguments -> arguments comma . arguments
    (79) arguments -> . ByVal value
    (80) arguments -> . ByRef id
    (81) arguments -> . arguments comma arguments

    ByVal           shift and go to state 59
    ByRef           shift and go to state 60

    arguments                      shift and go to state 135

state 95

    (79) arguments -> ByVal value .

    close_parenthesis reduce using rule 79 (arguments -> ByVal value .)
    comma           reduce using rule 79 (arguments -> ByVal value .)


state 96

    (55) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 76
    open_parenthesis shift and go to state 72
    word_value      shift and go to state 46
    float_value     shift and go to state 47

    arithmetic_expression          shift and go to state 124
    ids_access                     shift and go to state 75
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44

state 97

    (80) arguments -> ByRef id .

    close_parenthesis reduce using rule 80 (arguments -> ByRef id .)
    comma           reduce using rule 80 (arguments -> ByRef id .)


state 98

    (31) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (61) ids_access -> open_parenthesis . ids_access close_parenthesis
    (55) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 98
    id              shift and go to state 76
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47

    logic_expression               shift and go to state 99
    ids_access                     shift and go to state 75
    arithmetic_expression          shift and go to state 100
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44

state 99

    (31) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 136
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 100

    (55) value -> open_parenthesis arithmetic_expression . close_parenthesis
    (26) logic_expression -> arithmetic_expression .
    (28) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (41) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (42) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for close_parenthesis resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis shift and go to state 126
    is_equal        shift and go to state 113
    is_not_equal    shift and go to state 114
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! close_parenthesis [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! and             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 112

state 101

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic else_ifs else inside_logic end if

    then            shift and go to state 137


state 102

    (29) logic_expression -> logic_expression logic_operand . logic_expression
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 138
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 103

    (32) logic_operand -> and .

    not             reduce using rule 32 (logic_operand -> and .)
    open_parenthesis reduce using rule 32 (logic_operand -> and .)
    bool_value      reduce using rule 32 (logic_operand -> and .)
    word_value      reduce using rule 32 (logic_operand -> and .)
    float_value     reduce using rule 32 (logic_operand -> and .)
    id              reduce using rule 32 (logic_operand -> and .)


state 104

    (33) logic_operand -> or .

    not             reduce using rule 33 (logic_operand -> or .)
    open_parenthesis reduce using rule 33 (logic_operand -> or .)
    bool_value      reduce using rule 33 (logic_operand -> or .)
    word_value      reduce using rule 33 (logic_operand -> or .)
    float_value     reduce using rule 33 (logic_operand -> or .)
    id              reduce using rule 33 (logic_operand -> or .)


state 105

    (34) logic_operand -> not .

    not             reduce using rule 34 (logic_operand -> not .)
    open_parenthesis reduce using rule 34 (logic_operand -> not .)
    bool_value      reduce using rule 34 (logic_operand -> not .)
    word_value      reduce using rule 34 (logic_operand -> not .)
    float_value     reduce using rule 34 (logic_operand -> not .)
    id              reduce using rule 34 (logic_operand -> not .)


state 106

    (35) logic_operand -> is_equal .

    not             reduce using rule 35 (logic_operand -> is_equal .)
    open_parenthesis reduce using rule 35 (logic_operand -> is_equal .)
    bool_value      reduce using rule 35 (logic_operand -> is_equal .)
    word_value      reduce using rule 35 (logic_operand -> is_equal .)
    float_value     reduce using rule 35 (logic_operand -> is_equal .)
    id              reduce using rule 35 (logic_operand -> is_equal .)


state 107

    (36) logic_operand -> is_not_equal .

    not             reduce using rule 36 (logic_operand -> is_not_equal .)
    open_parenthesis reduce using rule 36 (logic_operand -> is_not_equal .)
    bool_value      reduce using rule 36 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 36 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 36 (logic_operand -> is_not_equal .)
    id              reduce using rule 36 (logic_operand -> is_not_equal .)


state 108

    (37) logic_operand -> greater_than .

    not             reduce using rule 37 (logic_operand -> greater_than .)
    open_parenthesis reduce using rule 37 (logic_operand -> greater_than .)
    bool_value      reduce using rule 37 (logic_operand -> greater_than .)
    word_value      reduce using rule 37 (logic_operand -> greater_than .)
    float_value     reduce using rule 37 (logic_operand -> greater_than .)
    id              reduce using rule 37 (logic_operand -> greater_than .)


state 109

    (38) logic_operand -> greater_or_equal_than .

    not             reduce using rule 38 (logic_operand -> greater_or_equal_than .)
    open_parenthesis reduce using rule 38 (logic_operand -> greater_or_equal_than .)
    bool_value      reduce using rule 38 (logic_operand -> greater_or_equal_than .)
    word_value      reduce using rule 38 (logic_operand -> greater_or_equal_than .)
    float_value     reduce using rule 38 (logic_operand -> greater_or_equal_than .)
    id              reduce using rule 38 (logic_operand -> greater_or_equal_than .)


state 110

    (39) logic_operand -> less_than .

    not             reduce using rule 39 (logic_operand -> less_than .)
    open_parenthesis reduce using rule 39 (logic_operand -> less_than .)
    bool_value      reduce using rule 39 (logic_operand -> less_than .)
    word_value      reduce using rule 39 (logic_operand -> less_than .)
    float_value     reduce using rule 39 (logic_operand -> less_than .)
    id              reduce using rule 39 (logic_operand -> less_than .)


state 111

    (40) logic_operand -> less_or_equal_than .

    not             reduce using rule 40 (logic_operand -> less_or_equal_than .)
    open_parenthesis reduce using rule 40 (logic_operand -> less_or_equal_than .)
    bool_value      reduce using rule 40 (logic_operand -> less_or_equal_than .)
    word_value      reduce using rule 40 (logic_operand -> less_or_equal_than .)
    float_value     reduce using rule 40 (logic_operand -> less_or_equal_than .)
    id              reduce using rule 40 (logic_operand -> less_or_equal_than .)


state 112

    (28) logic_expression -> arithmetic_expression logic_operand . arithmetic_expression
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 139
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 113

    (41) compared_to_bool -> arithmetic_expression is_equal . bool_value
    (35) logic_operand -> is_equal .

    bool_value      shift and go to state 140
    open_parenthesis reduce using rule 35 (logic_operand -> is_equal .)
    word_value      reduce using rule 35 (logic_operand -> is_equal .)
    float_value     reduce using rule 35 (logic_operand -> is_equal .)
    id              reduce using rule 35 (logic_operand -> is_equal .)


state 114

    (42) compared_to_bool -> arithmetic_expression is_not_equal . bool_value
    (36) logic_operand -> is_not_equal .

    bool_value      shift and go to state 141
    open_parenthesis reduce using rule 36 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 36 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 36 (logic_operand -> is_not_equal .)
    id              reduce using rule 36 (logic_operand -> is_not_equal .)


state 115

    (30) logic_expression -> not logic_expression .
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 30 (logic_expression -> not logic_expression .)
    dim             reduce using rule 30 (logic_expression -> not logic_expression .)
    if              reduce using rule 30 (logic_expression -> not logic_expression .)
    while           reduce using rule 30 (logic_expression -> not logic_expression .)
    do              reduce using rule 30 (logic_expression -> not logic_expression .)
    for             reduce using rule 30 (logic_expression -> not logic_expression .)
    gosub           reduce using rule 30 (logic_expression -> not logic_expression .)
    dunkelCls       reduce using rule 30 (logic_expression -> not logic_expression .)
    let             reduce using rule 30 (logic_expression -> not logic_expression .)
    id              reduce using rule 30 (logic_expression -> not logic_expression .)
    dunkelPrint     reduce using rule 30 (logic_expression -> not logic_expression .)
    dunkelRead      reduce using rule 30 (logic_expression -> not logic_expression .)
    end             reduce using rule 30 (logic_expression -> not logic_expression .)
    loop            reduce using rule 30 (logic_expression -> not logic_expression .)
    wend            reduce using rule 30 (logic_expression -> not logic_expression .)
    return          reduce using rule 30 (logic_expression -> not logic_expression .)
    else            reduce using rule 30 (logic_expression -> not logic_expression .)
    elsif           reduce using rule 30 (logic_expression -> not logic_expression .)
    next            reduce using rule 30 (logic_expression -> not logic_expression .)
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! and             [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! or              [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! not             [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! is_equal        [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! is_not_equal    [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! greater_than    [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! less_than       [ reduce using rule 30 (logic_expression -> not logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 30 (logic_expression -> not logic_expression .) ]

    logic_operand                  shift and go to state 102

state 116

    (43) compared_to_bool -> bool_value is_equal . arithmetic_expression
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 142
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 117

    (44) compared_to_bool -> bool_value is_not_equal . arithmetic_expression
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 143
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 118

    (23) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 144
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 119

    (24) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 145


state 120

    (25) loops -> for id equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id

    to              shift and go to state 146


state 121

    (73) assign -> let id equals logic_expression .
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    dim             reduce using rule 73 (assign -> let id equals logic_expression .)
    if              reduce using rule 73 (assign -> let id equals logic_expression .)
    while           reduce using rule 73 (assign -> let id equals logic_expression .)
    do              reduce using rule 73 (assign -> let id equals logic_expression .)
    for             reduce using rule 73 (assign -> let id equals logic_expression .)
    gosub           reduce using rule 73 (assign -> let id equals logic_expression .)
    dunkelCls       reduce using rule 73 (assign -> let id equals logic_expression .)
    let             reduce using rule 73 (assign -> let id equals logic_expression .)
    id              reduce using rule 73 (assign -> let id equals logic_expression .)
    dunkelPrint     reduce using rule 73 (assign -> let id equals logic_expression .)
    dunkelRead      reduce using rule 73 (assign -> let id equals logic_expression .)
    end             reduce using rule 73 (assign -> let id equals logic_expression .)
    loop            reduce using rule 73 (assign -> let id equals logic_expression .)
    wend            reduce using rule 73 (assign -> let id equals logic_expression .)
    return          reduce using rule 73 (assign -> let id equals logic_expression .)
    else            reduce using rule 73 (assign -> let id equals logic_expression .)
    elsif           reduce using rule 73 (assign -> let id equals logic_expression .)
    next            reduce using rule 73 (assign -> let id equals logic_expression .)
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 122

    (74) assign -> let id equals arithmetic_expression .
    (26) logic_expression -> arithmetic_expression .
    (28) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (41) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (42) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

  ! reduce/reduce conflict for dim resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for if resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for while resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for do resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for for resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for gosub resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelCls resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for let resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for id resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for end resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for loop resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for wend resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for return resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for else resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for elsif resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for next resolved using rule 26 (logic_expression -> arithmetic_expression .)
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    dim             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelCls       reduce using rule 26 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 26 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 26 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 26 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 26 (logic_expression -> arithmetic_expression .)
    else            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    elsif           reduce using rule 26 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 26 (logic_expression -> arithmetic_expression .)
    is_equal        shift and go to state 113
    is_not_equal    shift and go to state 114
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! dim             [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! if              [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! while           [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! do              [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! for             [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! gosub           [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! dunkelCls       [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! let             [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! id              [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! dunkelPrint     [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! dunkelRead      [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! end             [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! loop            [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! wend            [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! return          [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! else            [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! elsif           [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! next            [ reduce using rule 74 (assign -> let id equals arithmetic_expression .) ]
  ! and             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 26 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 112

state 123

    (89) multiple_print -> multiple_print comma multiple_print .
    (89) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    dunkelCls       reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    else            reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    elsif           reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 71

  ! comma           [ reduce using rule 89 (multiple_print -> multiple_print comma multiple_print .) ]


state 124

    (55) value -> open_parenthesis arithmetic_expression . close_parenthesis

    close_parenthesis shift and go to state 126


state 125

    (86) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelCls       reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    let             reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    else            reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    elsif           reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 86 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 126

    (55) value -> open_parenthesis arithmetic_expression close_parenthesis .

    sum             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    substraction    reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    multiplication  reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    division        reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    exponent        reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    comma           reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dim             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    if              reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    while           reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    do              reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    for             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    gosub           reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelCls       reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    let             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    id              reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelRead      reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    end             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    loop            reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    wend            reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    return          reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    else            reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    elsif           reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    next            reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_equal        reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_not_equal    reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    and             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    or              reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    not             reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_than    reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_than       reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_parenthesis reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    to              reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_brackets  reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    step            reduce using rule 55 (value -> open_parenthesis arithmetic_expression close_parenthesis .)


state 127

    (61) ids_access -> open_parenthesis ids_access close_parenthesis .

    sum             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    comma           reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelCls       reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    else            reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    elsif           reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    not             reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 61 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 128

    (47) arithmetic_expression -> value arithmetic_operand value .

    comma           reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    dim             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    if              reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    while           reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    do              reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    for             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    gosub           reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelCls       reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    let             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    id              reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelPrint     reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelRead      reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    end             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    loop            reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    wend            reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    return          reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    else            reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    elsif           reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    next            reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    is_equal        reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    is_not_equal    reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    and             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    or              reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    not             reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    greater_than    reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    greater_or_equal_than reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    less_than       reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    less_or_equal_than reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    close_parenthesis reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    to              reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    close_brackets  reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)
    step            reduce using rule 47 (arithmetic_expression -> value arithmetic_operand value .)


state 129

    (58) ids_access -> id open_brackets arithmetic_expression . close_brackets
    (59) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 147


state 130

    (93) multiple_read -> multiple_read comma multiple_read .
    (93) multiple_read -> multiple_read . comma multiple_read

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    if              reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    while           reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    do              reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    for             reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    gosub           reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    dunkelCls       reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    let             reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    id              reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    dunkelPrint     reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    dunkelRead      reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    end             reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    loop            reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    wend            reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    return          reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    else            reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    elsif           reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    next            reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .)
    comma           shift and go to state 84

  ! comma           [ reduce using rule 93 (multiple_read -> multiple_read comma multiple_read .) ]


state 131

    (91) read -> dunkelRead string comma multiple_read .
    (93) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    dunkelCls       reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    let             reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    else            reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    elsif           reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 91 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 84


state 132

    (67) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 148
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 133

    (68) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 149


state 134

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 150


state 135

    (81) arguments -> arguments comma arguments .
    (81) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 81 (arguments -> arguments comma arguments .)
    comma           shift and go to state 94

  ! comma           [ reduce using rule 81 (arguments -> arguments comma arguments .) ]


state 136

    (31) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    not             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 31 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 137

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic else_ifs else inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 151
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 138

    (29) logic_expression -> logic_expression logic_operand logic_expression .
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    dim             reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    if              reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    while           reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    do              reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    for             reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    gosub           reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    dunkelCls       reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    let             reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    id              reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    dunkelPrint     reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    dunkelRead      reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    end             reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    loop            reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    wend            reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    return          reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    else            reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    elsif           reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    next            reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .)
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

  ! and             [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! or              [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! not             [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_equal        [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_not_equal    [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_than    [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_than       [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 29 (logic_expression -> logic_expression logic_operand logic_expression .) ]

    logic_operand                  shift and go to state 102

state 139

    (28) logic_expression -> arithmetic_expression logic_operand arithmetic_expression .

    close_parenthesis reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    and             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    or              reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    not             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_equal        reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_not_equal    reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_than    reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_or_equal_than reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_than       reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_or_equal_than reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dim             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    if              reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    while           reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    do              reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    for             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    gosub           reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dunkelCls       reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    let             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    id              reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dunkelPrint     reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dunkelRead      reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    end             reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    loop            reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    wend            reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    return          reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    else            reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    elsif           reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    next            reduce using rule 28 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)


state 140

    (41) compared_to_bool -> arithmetic_expression is_equal bool_value .

    close_parenthesis reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    and             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    or              reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    not             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_equal        reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_not_equal    reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_than    reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_or_equal_than reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_than       reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_or_equal_than reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dim             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    if              reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    while           reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    do              reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    for             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    gosub           reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dunkelCls       reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    let             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    id              reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dunkelPrint     reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dunkelRead      reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    end             reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    loop            reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    wend            reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    return          reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    else            reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    elsif           reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    next            reduce using rule 41 (compared_to_bool -> arithmetic_expression is_equal bool_value .)


state 141

    (42) compared_to_bool -> arithmetic_expression is_not_equal bool_value .

    close_parenthesis reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    and             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    or              reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    not             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_equal        reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_not_equal    reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_than    reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_or_equal_than reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_than       reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_or_equal_than reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dim             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    if              reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    while           reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    do              reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    for             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    gosub           reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dunkelCls       reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    let             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    id              reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dunkelPrint     reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dunkelRead      reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    end             reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    loop            reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    wend            reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    return          reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    else            reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    elsif           reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    next            reduce using rule 42 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)


state 142

    (43) compared_to_bool -> bool_value is_equal arithmetic_expression .

    close_parenthesis reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    and             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    or              reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    not             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_equal        reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_not_equal    reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_than    reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_than       reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dim             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    if              reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    while           reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    do              reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    for             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    gosub           reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dunkelCls       reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    let             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    id              reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dunkelPrint     reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dunkelRead      reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    end             reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    loop            reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    wend            reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    return          reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    else            reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    elsif           reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    next            reduce using rule 43 (compared_to_bool -> bool_value is_equal arithmetic_expression .)


state 143

    (44) compared_to_bool -> bool_value is_not_equal arithmetic_expression .

    close_parenthesis reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    and             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    or              reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    not             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_equal        reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_not_equal    reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_than    reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_than       reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dim             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    if              reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    while           reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    do              reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    for             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    gosub           reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dunkelCls       reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    let             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    id              reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dunkelPrint     reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dunkelRead      reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    end             reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    loop            reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    wend            reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    return          reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    else            reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    elsif           reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    next            reduce using rule 44 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)


state 144

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 152


state 145

    (24) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 153
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 146

    (25) loops -> for id equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 154
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 147

    (58) ids_access -> id open_brackets arithmetic_expression close_brackets .
    (59) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets
    (60) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    sum             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    comma           reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelCls       reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    else            reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    elsif           reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 58 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 155


state 148

    (67) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 156


state 149

    (68) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (75) parameters -> . variable
    (76) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 157
    dim             shift and go to state 9

    parameters                     shift and go to state 158
    variable                       shift and go to state 159

state 150

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 160


state 151

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . end if
    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else inside_logic end if
    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . else_ifs else inside_logic end if
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 161
    else            shift and go to state 162
    elsif           shift and go to state 164

    else_ifs                       shift and go to state 163

state 152

    (23) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelCls       reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    let             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    else            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    elsif           reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 23 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 153

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 165
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 154

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id

    step            shift and go to state 166


state 155

    (59) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 167
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 156

    (67) subroutines -> sub procedure id inside_logic return . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 72 (subroutines -> .)

    subroutines                    shift and go to state 168

state 157

    (68) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (70) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 170
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 169
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 158

    (69) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (71) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (76) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 171
    comma           shift and go to state 172


state 159

    (75) parameters -> variable .

    close_parenthesis reduce using rule 75 (parameters -> variable .)
    comma           reduce using rule 75 (parameters -> variable .)


state 160

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    else            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    elsif           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 173


state 161

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end . if

    if              shift and go to state 174


state 162

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 175
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 163

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . end if
    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs . else inside_logic end if
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

    end             shift and go to state 177
    else            shift and go to state 178
    elsif           shift and go to state 164

    else_ifs                       shift and go to state 176

state 164

    (21) else_ifs -> elsif . open_parenthesis logic_expression close_parenthesis then inside_logic

    open_parenthesis shift and go to state 179


state 165

    (24) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelCls       reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    else            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    elsif           reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 24 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 166

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 180
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 167

    (59) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets
    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 181


state 168

    (67) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 67 (subroutines -> sub procedure id inside_logic return subroutines .)


state 169

    (68) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 182


state 170

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 90
    float           shift and go to state 91
    bool            shift and go to state 92

    variable_type                  shift and go to state 183

state 171

    (69) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 185
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 184
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 172

    (76) parameters -> parameters comma . parameters
    (75) parameters -> . variable
    (76) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 186
    variable                       shift and go to state 159

state 173

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 187


state 174

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .

    dim             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    if              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    while           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    do              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    for             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    gosub           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelCls       reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    let             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    id              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelPrint     reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelRead      reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    end             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    loop            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    wend            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    return          reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    else            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    elsif           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    next            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)


state 175

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic . end if

    end             shift and go to state 188


state 176

    (22) else_ifs -> else_ifs else_ifs .
    (22) else_ifs -> else_ifs . else_ifs
    (21) else_ifs -> . elsif open_parenthesis logic_expression close_parenthesis then inside_logic
    (22) else_ifs -> . else_ifs else_ifs

  ! shift/reduce conflict for elsif resolved as shift
    end             reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    else            reduce using rule 22 (else_ifs -> else_ifs else_ifs .)
    elsif           shift and go to state 164

  ! elsif           [ reduce using rule 22 (else_ifs -> else_ifs else_ifs .) ]

    else_ifs                       shift and go to state 176

state 177

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end . if

    if              shift and go to state 189


state 178

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 190
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 179

    (21) else_ifs -> elsif open_parenthesis . logic_expression close_parenthesis then inside_logic
    (26) logic_expression -> . arithmetic_expression
    (27) logic_expression -> . compared_to_bool
    (28) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (29) logic_expression -> . logic_expression logic_operand logic_expression
    (30) logic_expression -> . not logic_expression
    (31) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (41) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (42) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (43) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (44) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (45) compared_to_bool -> . bool_value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 65
    open_parenthesis shift and go to state 61
    bool_value      shift and go to state 66
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    logic_expression               shift and go to state 191
    arithmetic_expression          shift and go to state 63
    compared_to_bool               shift and go to state 64
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 180

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 192
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 181

    (59) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .
    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets

    sum             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    comma           reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelCls       reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    else            reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    elsif           reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 59 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 193


state 182

    (68) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 194


state 183

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 195
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 184

    (69) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 196


state 185

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 90
    float           shift and go to state 91
    bool            shift and go to state 92

    variable_type                  shift and go to state 197

state 186

    (76) parameters -> parameters comma parameters .
    (76) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 76 (parameters -> parameters comma parameters .)
    comma           shift and go to state 172

  ! comma           [ reduce using rule 76 (parameters -> parameters comma parameters .) ]


state 187

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 198


state 188

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end . if

    if              shift and go to state 199


state 189

    (19) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .

    dim             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    if              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    while           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    do              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    for             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    gosub           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelCls       reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    let             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    id              reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelPrint     reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    dunkelRead      reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    end             reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    loop            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    wend            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    return          reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    else            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    elsif           reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)
    next            reduce using rule 19 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if .)


state 190

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic . end if

    end             shift and go to state 200


state 191

    (21) else_ifs -> elsif open_parenthesis logic_expression . close_parenthesis then inside_logic
    (29) logic_expression -> logic_expression . logic_operand logic_expression
    (32) logic_operand -> . and
    (33) logic_operand -> . or
    (34) logic_operand -> . not
    (35) logic_operand -> . is_equal
    (36) logic_operand -> . is_not_equal
    (37) logic_operand -> . greater_than
    (38) logic_operand -> . greater_or_equal_than
    (39) logic_operand -> . less_than
    (40) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 201
    and             shift and go to state 103
    or              shift and go to state 104
    not             shift and go to state 105
    is_equal        shift and go to state 106
    is_not_equal    shift and go to state 107
    greater_than    shift and go to state 108
    greater_or_equal_than shift and go to state 109
    less_than       shift and go to state 110
    less_or_equal_than shift and go to state 111

    logic_operand                  shift and go to state 102

state 192

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 202


state 193

    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (46) arithmetic_expression -> . value
    (47) arithmetic_expression -> . value arithmetic_operand value
    (53) value -> . real_value
    (54) value -> . functions
    (55) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (56) value -> . ids_access
    (62) real_value -> . word_value
    (63) real_value -> . float_value
    (64) real_value -> . id
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (57) ids_access -> . id
    (58) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (59) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (60) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (61) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 96
    word_value      shift and go to state 46
    float_value     shift and go to state 47
    id              shift and go to state 48

    arithmetic_expression          shift and go to state 203
    value                          shift and go to state 42
    real_value                     shift and go to state 43
    functions                      shift and go to state 44
    ids_access                     shift and go to state 45

state 194

    (68) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 72 (subroutines -> .)

    subroutines                    shift and go to state 204

state 195

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 205


state 196

    (69) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 206


state 197

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 207
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 198

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 208


state 199

    (18) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .

    dim             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    if              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    while           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    do              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    for             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    gosub           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelCls       reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    let             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    id              reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelPrint     reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    dunkelRead      reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    end             reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    loop            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    wend            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    return          reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    else            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    elsif           reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)
    next            reduce using rule 18 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if .)


state 200

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end . if

    if              shift and go to state 209


state 201

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis . then inside_logic

    then            shift and go to state 210


state 202

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 211


state 203

    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets

    close_brackets  shift and go to state 212


state 204

    (68) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 68 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 205

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 213


state 206

    (69) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 72 (subroutines -> .)

    subroutines                    shift and go to state 214

state 207

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 215


state 208

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 216


state 209

    (20) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .

    dim             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    if              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    while           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    do              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    for             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    gosub           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelCls       reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    let             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    id              reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelPrint     reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    dunkelRead      reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    end             reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    loop            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    wend            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    return          reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    else            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    elsif           reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)
    next            reduce using rule 20 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if .)


state 210

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else inside_logic end if
    (19) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs end if
    (20) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic else_ifs else inside_logic end if
    (23) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (24) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (25) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (65) calls -> . gosub id
    (66) calls -> . functions
    (82) read_or_write -> . print
    (83) read_or_write -> . read
    (84) read_or_write -> . dunkelCls
    (73) assign -> . let id equals logic_expression
    (74) assign -> . let id equals arithmetic_expression
    (77) functions -> . id open_parenthesis close_parenthesis
    (78) functions -> . id open_parenthesis arguments close_parenthesis
    (85) print -> . dunkelPrint multiple_print
    (86) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (90) read -> . dunkelRead multiple_read
    (91) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    else            reduce using rule 9 (inside_logic -> .)
    elsif           reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    dunkelCls       shift and go to state 19
    let             shift and go to state 20
    id              shift and go to state 10
    dunkelPrint     shift and go to state 21
    dunkelRead      shift and go to state 22

    inside_logic                   shift and go to state 217
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    functions                      shift and go to state 16
    print                          shift and go to state 17
    read                           shift and go to state 18

state 211

    (25) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelCls       reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    let             reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    else            reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    elsif           reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 25 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 212

    (60) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .

    sum             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    comma           reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelCls       reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    else            reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    elsif           reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 60 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)


state 213

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 72 (subroutines -> .)

    subroutines                    shift and go to state 218

state 214

    (69) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 69 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 215

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 219


state 216

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 220


state 217

    (21) else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .

    end             reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    else            reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)
    elsif           reduce using rule 21 (else_ifs -> elsif open_parenthesis logic_expression close_parenthesis then inside_logic .)


state 218

    (70) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 70 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 219

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (67) subroutines -> . sub procedure id inside_logic return subroutines
    (68) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (69) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (70) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (71) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (72) subroutines -> .

    sub             shift and go to state 55
    $end            reduce using rule 72 (subroutines -> .)

    subroutines                    shift and go to state 221

state 220

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelCls       reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    else            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    elsif           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 221

    (71) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 71 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for is_equal in state 63 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 63 resolved as shift
WARNING: shift/reduce conflict for and in state 63 resolved as shift
WARNING: shift/reduce conflict for or in state 63 resolved as shift
WARNING: shift/reduce conflict for not in state 63 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 63 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 63 resolved as shift
WARNING: shift/reduce conflict for less_than in state 63 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 63 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 66 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 66 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 74 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 75 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 100 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 100 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 100 resolved as shift
WARNING: shift/reduce conflict for and in state 100 resolved as shift
WARNING: shift/reduce conflict for or in state 100 resolved as shift
WARNING: shift/reduce conflict for not in state 100 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 100 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 100 resolved as shift
WARNING: shift/reduce conflict for less_than in state 100 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 100 resolved as shift
WARNING: shift/reduce conflict for and in state 115 resolved as shift
WARNING: shift/reduce conflict for or in state 115 resolved as shift
WARNING: shift/reduce conflict for not in state 115 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 122 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 122 resolved as shift
WARNING: shift/reduce conflict for and in state 122 resolved as shift
WARNING: shift/reduce conflict for or in state 122 resolved as shift
WARNING: shift/reduce conflict for not in state 122 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 122 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 122 resolved as shift
WARNING: shift/reduce conflict for less_than in state 122 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 122 resolved as shift
WARNING: shift/reduce conflict for comma in state 123 resolved as shift
WARNING: shift/reduce conflict for comma in state 130 resolved as shift
WARNING: shift/reduce conflict for comma in state 135 resolved as shift
WARNING: shift/reduce conflict for and in state 138 resolved as shift
WARNING: shift/reduce conflict for or in state 138 resolved as shift
WARNING: shift/reduce conflict for not in state 138 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 138 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 138 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 138 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 138 resolved as shift
WARNING: shift/reduce conflict for less_than in state 138 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 138 resolved as shift
WARNING: shift/reduce conflict for elsif in state 176 resolved as shift
WARNING: shift/reduce conflict for comma in state 186 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 23
WARNING: reduce/reduce conflict in state 48 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 48
WARNING: reduce/reduce conflict in state 76 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 76
WARNING: reduce/reduce conflict in state 122 resolved using rule (logic_expression -> arithmetic_expression)
WARNING: rejected rule (assign -> let id equals arithmetic_expression) in state 122
WARNING: Rule (real_value -> id) is never reduced
WARNING: Rule (assign -> let id equals arithmetic_expression) is never reduced
