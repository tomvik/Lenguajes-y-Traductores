Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    dunkelCls
    else
    elsif
    end_if
    exit
    false
    goto
    open_braces
    semicolon
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> assign inside_logic
Rule 9     inside_logic -> <empty>
Rule 10    variable -> dim id as variable_type
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 14    variable_type -> word
Rule 15    variable_type -> float
Rule 16    variable_type -> bool
Rule 17    conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if
Rule 18    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 19    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 20    loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 21    logic_expression -> arithmetic_expression
Rule 22    logic_expression -> compared_to_bool
Rule 23    logic_expression -> arithmetic_expression logic_operand arithmetic_expression
Rule 24    logic_expression -> logic_expression logic_operand logic_expression
Rule 25    logic_expression -> not logic_expression
Rule 26    logic_expression -> open_parenthesis logic_expression close_parenthesis
Rule 27    logic_operand -> and
Rule 28    logic_operand -> or
Rule 29    logic_operand -> not
Rule 30    logic_operand -> is_equal
Rule 31    logic_operand -> is_not_equal
Rule 32    logic_operand -> greater_than
Rule 33    logic_operand -> greater_or_equal_than
Rule 34    logic_operand -> less_than
Rule 35    logic_operand -> less_or_equal_than
Rule 36    compared_to_bool -> arithmetic_expression is_equal bool_value
Rule 37    compared_to_bool -> arithmetic_expression is_not_equal bool_value
Rule 38    compared_to_bool -> bool_value is_equal arithmetic_expression
Rule 39    compared_to_bool -> bool_value is_not_equal arithmetic_expression
Rule 40    arithmetic_expression -> value
Rule 41    arithmetic_expression -> value arithmetic_operand value
Rule 42    arithmetic_operand -> sum
Rule 43    arithmetic_operand -> substraction
Rule 44    arithmetic_operand -> multiplication
Rule 45    arithmetic_operand -> division
Rule 46    arithmetic_operand -> exponent
Rule 47    value -> real_value
Rule 48    value -> functions
Rule 49    value -> open_parenthesis arithmetic_expression close_parenthesis
Rule 50    value -> ids_access
Rule 51    ids_access -> id
Rule 52    ids_access -> id open_brackets arithmetic_expression close_brackets
Rule 53    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 54    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 55    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 56    real_value -> word_value
Rule 57    real_value -> float_value
Rule 58    real_value -> id
Rule 59    calls -> gosub id
Rule 60    calls -> id open_parenthesis close_parenthesis
Rule 61    subroutines -> sub procedure id inside_logic return subroutines
Rule 62    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 63    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 64    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 65    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 66    subroutines -> <empty>
Rule 67    assign -> let id equals logic_expression
Rule 68    assign -> let id equals arithmetic_expression
Rule 69    parameters -> variable
Rule 70    parameters -> parameters comma parameters
Rule 71    functions -> id open_parenthesis close_parenthesis
Rule 72    functions -> id open_parenthesis arguments close_parenthesis
Rule 73    arguments -> ByVal value
Rule 74    arguments -> ByRef id
Rule 75    arguments -> arguments comma arguments
Rule 76    read_or_write -> print
Rule 77    read_or_write -> read
Rule 78    print -> dunkelPrint multiple_print
Rule 79    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 80    multiple_print -> string
Rule 81    multiple_print -> value
Rule 82    multiple_print -> multiple_print comma multiple_print
Rule 83    read -> dunkelRead multiple_read
Rule 84    read -> dunkelRead string comma multiple_read
Rule 85    multiple_read -> ids_access
Rule 86    multiple_read -> multiple_read comma multiple_read

Terminals, with rules where they appear

ByRef                : 74
ByVal                : 73
and                  : 27
as                   : 10 11 12 13 64 65
bool                 : 16
bool_value           : 36 37 38 39
close_braces         : 
close_brackets       : 11 12 12 13 13 13 52 53 53 54 54 54
close_parenthesis    : 17 18 19 26 49 55 60 62 63 64 65 71 72 79
colon                : 
comma                : 70 75 82 84 86
dim                  : 10 11 12 13
division             : 45
do                   : 19
dunkelCls            : 
dunkelPrint          : 78 79
dunkelRead           : 83 84
else                 : 
elsif                : 
end                  : 1 2 17 62 63 64 65
end_if               : 
equals               : 20 67 68
error                : 
exit                 : 
exponent             : 46
false                : 
float                : 15
float_value          : 57
for                  : 20
function             : 62 63 64 65
gosub                : 59
goto                 : 
greater_or_equal_than : 33
greater_than         : 32
id                   : 10 11 12 13 20 20 51 52 53 54 58 59 60 61 62 63 64 65 67 68 71 72 74
if                   : 17 17
is_equal             : 30 36 38
is_not_equal         : 31 37 39
less_or_equal_than   : 35
less_than            : 34
let                  : 67 68
loop                 : 19
multiplication       : 44
next                 : 20
not                  : 25 29
open_braces          : 
open_brackets        : 11 12 12 13 13 13 52 53 53 54 54 54
open_parenthesis     : 17 18 19 26 49 55 60 62 63 64 65 71 72 79
or                   : 28
procedure            : 61
return               : 61
semicolon            : 
step                 : 20
string               : 80 84
sub                  : 61 62 62 63 63 64 64 65 65
substraction         : 43
sum                  : 42
then                 : 17
to                   : 20
true                 : 
until                : 19
wend                 : 18
while                : 18
word                 : 14
word_value           : 11 12 12 13 13 13 56

Nonterminals, with rules where they appear

arguments            : 72 75 75
arithmetic_expression : 20 20 20 21 23 23 36 37 38 39 49 52 53 53 54 54 54 68
arithmetic_operand   : 41
assign               : 8
calls                : 6
compared_to_bool     : 22
conditions           : 4
functions            : 48
ids_access           : 50 55 85
inside_logic         : 1 2 3 4 5 6 7 8 17 18 19 20 61 62 63 64 65
logic_expression     : 17 18 19 24 24 25 26 67
logic_operand        : 23 24
loops                : 5
multiple_print       : 78 79 82 82
multiple_read        : 83 84 86 86
parameters           : 63 65 70 70
print                : 76
program              : 0
read                 : 77
read_or_write        : 7
real_value           : 47
subroutines          : 2 61 62 63 64 65
value                : 40 41 41 73 81
variable             : 3 69
variable_type        : 10 11 12 13 64 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 21


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 22
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 23
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 24
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 25
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 26
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 8

    (8) inside_logic -> assign . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    loop            reduce using rule 9 (inside_logic -> .)
    wend            reduce using rule 9 (inside_logic -> .)
    return          reduce using rule 9 (inside_logic -> .)
    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    assign                         shift and go to state 8
    inside_logic                   shift and go to state 27
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 16
    read                           shift and go to state 17

state 9

    (10) variable -> dim . id as variable_type
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 28


state 10

    (60) calls -> id . open_parenthesis close_parenthesis

    open_parenthesis shift and go to state 29


state 11

    (17) conditions -> if . open_parenthesis logic_expression close_parenthesis then inside_logic end if

    open_parenthesis shift and go to state 30


state 12

    (18) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 31


state 13

    (19) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 32
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 14

    (20) loops -> for . id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 33


state 15

    (59) calls -> gosub . id

    id              shift and go to state 34


state 16

    (76) read_or_write -> print .

    dim             reduce using rule 76 (read_or_write -> print .)
    if              reduce using rule 76 (read_or_write -> print .)
    while           reduce using rule 76 (read_or_write -> print .)
    do              reduce using rule 76 (read_or_write -> print .)
    for             reduce using rule 76 (read_or_write -> print .)
    gosub           reduce using rule 76 (read_or_write -> print .)
    id              reduce using rule 76 (read_or_write -> print .)
    let             reduce using rule 76 (read_or_write -> print .)
    dunkelPrint     reduce using rule 76 (read_or_write -> print .)
    dunkelRead      reduce using rule 76 (read_or_write -> print .)
    end             reduce using rule 76 (read_or_write -> print .)
    loop            reduce using rule 76 (read_or_write -> print .)
    wend            reduce using rule 76 (read_or_write -> print .)
    return          reduce using rule 76 (read_or_write -> print .)
    next            reduce using rule 76 (read_or_write -> print .)


state 17

    (77) read_or_write -> read .

    dim             reduce using rule 77 (read_or_write -> read .)
    if              reduce using rule 77 (read_or_write -> read .)
    while           reduce using rule 77 (read_or_write -> read .)
    do              reduce using rule 77 (read_or_write -> read .)
    for             reduce using rule 77 (read_or_write -> read .)
    gosub           reduce using rule 77 (read_or_write -> read .)
    id              reduce using rule 77 (read_or_write -> read .)
    let             reduce using rule 77 (read_or_write -> read .)
    dunkelPrint     reduce using rule 77 (read_or_write -> read .)
    dunkelRead      reduce using rule 77 (read_or_write -> read .)
    end             reduce using rule 77 (read_or_write -> read .)
    loop            reduce using rule 77 (read_or_write -> read .)
    wend            reduce using rule 77 (read_or_write -> read .)
    return          reduce using rule 77 (read_or_write -> read .)
    next            reduce using rule 77 (read_or_write -> read .)


state 18

    (67) assign -> let . id equals logic_expression
    (68) assign -> let . id equals arithmetic_expression

    id              shift and go to state 35


state 19

    (78) print -> dunkelPrint . multiple_print
    (79) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (80) multiple_print -> . string
    (81) multiple_print -> . value
    (82) multiple_print -> . multiple_print comma multiple_print
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 37
    string          shift and go to state 38
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    multiple_print                 shift and go to state 36
    value                          shift and go to state 39
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 20

    (83) read -> dunkelRead . multiple_read
    (84) read -> dunkelRead . string comma multiple_read
    (85) multiple_read -> . ids_access
    (86) multiple_read -> . multiple_read comma multiple_read
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 47
    id              shift and go to state 49
    open_parenthesis shift and go to state 50

    multiple_read                  shift and go to state 46
    ids_access                     shift and go to state 48

state 21

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 52

  ! $end            [ reduce using rule 66 (subroutines -> .) ]

    subroutines                    shift and go to state 51

state 22

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 23

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 24

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 25

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 26

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 27

    (8) inside_logic -> assign inside_logic .

    end             reduce using rule 8 (inside_logic -> assign inside_logic .)
    loop            reduce using rule 8 (inside_logic -> assign inside_logic .)
    wend            reduce using rule 8 (inside_logic -> assign inside_logic .)
    return          reduce using rule 8 (inside_logic -> assign inside_logic .)
    next            reduce using rule 8 (inside_logic -> assign inside_logic .)


state 28

    (10) variable -> dim id . as variable_type
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 53


state 29

    (60) calls -> id open_parenthesis . close_parenthesis

    close_parenthesis shift and go to state 54


state 30

    (17) conditions -> if open_parenthesis . logic_expression close_parenthesis then inside_logic end if
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 56
    arithmetic_expression          shift and go to state 57
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 31

    (18) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 62
    arithmetic_expression          shift and go to state 57
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 32

    (19) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 63


state 33

    (20) loops -> for id . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 64


state 34

    (59) calls -> gosub id .

    dim             reduce using rule 59 (calls -> gosub id .)
    if              reduce using rule 59 (calls -> gosub id .)
    while           reduce using rule 59 (calls -> gosub id .)
    do              reduce using rule 59 (calls -> gosub id .)
    for             reduce using rule 59 (calls -> gosub id .)
    gosub           reduce using rule 59 (calls -> gosub id .)
    id              reduce using rule 59 (calls -> gosub id .)
    let             reduce using rule 59 (calls -> gosub id .)
    dunkelPrint     reduce using rule 59 (calls -> gosub id .)
    dunkelRead      reduce using rule 59 (calls -> gosub id .)
    end             reduce using rule 59 (calls -> gosub id .)
    loop            reduce using rule 59 (calls -> gosub id .)
    wend            reduce using rule 59 (calls -> gosub id .)
    return          reduce using rule 59 (calls -> gosub id .)
    next            reduce using rule 59 (calls -> gosub id .)


state 35

    (67) assign -> let id . equals logic_expression
    (68) assign -> let id . equals arithmetic_expression

    equals          shift and go to state 65


state 36

    (78) print -> dunkelPrint multiple_print .
    (82) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 78 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 78 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 78 (print -> dunkelPrint multiple_print .)
    let             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 78 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 78 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 78 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 78 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 78 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 66


state 37

    (79) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (49) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (80) multiple_print -> . string
    (81) multiple_print -> . value
    (82) multiple_print -> . multiple_print comma multiple_print
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis

    string          shift and go to state 38
    id              shift and go to state 72
    open_parenthesis shift and go to state 67
    word_value      shift and go to state 43
    float_value     shift and go to state 44

    multiple_print                 shift and go to state 68
    arithmetic_expression          shift and go to state 69
    ids_access                     shift and go to state 70
    value                          shift and go to state 71
    real_value                     shift and go to state 40
    functions                      shift and go to state 41

state 38

    (80) multiple_print -> string .

    comma           reduce using rule 80 (multiple_print -> string .)
    dim             reduce using rule 80 (multiple_print -> string .)
    if              reduce using rule 80 (multiple_print -> string .)
    while           reduce using rule 80 (multiple_print -> string .)
    do              reduce using rule 80 (multiple_print -> string .)
    for             reduce using rule 80 (multiple_print -> string .)
    gosub           reduce using rule 80 (multiple_print -> string .)
    id              reduce using rule 80 (multiple_print -> string .)
    let             reduce using rule 80 (multiple_print -> string .)
    dunkelPrint     reduce using rule 80 (multiple_print -> string .)
    dunkelRead      reduce using rule 80 (multiple_print -> string .)
    end             reduce using rule 80 (multiple_print -> string .)
    loop            reduce using rule 80 (multiple_print -> string .)
    wend            reduce using rule 80 (multiple_print -> string .)
    return          reduce using rule 80 (multiple_print -> string .)
    next            reduce using rule 80 (multiple_print -> string .)
    close_parenthesis reduce using rule 80 (multiple_print -> string .)


state 39

    (81) multiple_print -> value .

    comma           reduce using rule 81 (multiple_print -> value .)
    dim             reduce using rule 81 (multiple_print -> value .)
    if              reduce using rule 81 (multiple_print -> value .)
    while           reduce using rule 81 (multiple_print -> value .)
    do              reduce using rule 81 (multiple_print -> value .)
    for             reduce using rule 81 (multiple_print -> value .)
    gosub           reduce using rule 81 (multiple_print -> value .)
    id              reduce using rule 81 (multiple_print -> value .)
    let             reduce using rule 81 (multiple_print -> value .)
    dunkelPrint     reduce using rule 81 (multiple_print -> value .)
    dunkelRead      reduce using rule 81 (multiple_print -> value .)
    end             reduce using rule 81 (multiple_print -> value .)
    loop            reduce using rule 81 (multiple_print -> value .)
    wend            reduce using rule 81 (multiple_print -> value .)
    return          reduce using rule 81 (multiple_print -> value .)
    next            reduce using rule 81 (multiple_print -> value .)
    close_parenthesis reduce using rule 81 (multiple_print -> value .)


state 40

    (47) value -> real_value .

    comma           reduce using rule 47 (value -> real_value .)
    dim             reduce using rule 47 (value -> real_value .)
    if              reduce using rule 47 (value -> real_value .)
    while           reduce using rule 47 (value -> real_value .)
    do              reduce using rule 47 (value -> real_value .)
    for             reduce using rule 47 (value -> real_value .)
    gosub           reduce using rule 47 (value -> real_value .)
    id              reduce using rule 47 (value -> real_value .)
    let             reduce using rule 47 (value -> real_value .)
    dunkelPrint     reduce using rule 47 (value -> real_value .)
    dunkelRead      reduce using rule 47 (value -> real_value .)
    end             reduce using rule 47 (value -> real_value .)
    loop            reduce using rule 47 (value -> real_value .)
    wend            reduce using rule 47 (value -> real_value .)
    return          reduce using rule 47 (value -> real_value .)
    next            reduce using rule 47 (value -> real_value .)
    sum             reduce using rule 47 (value -> real_value .)
    substraction    reduce using rule 47 (value -> real_value .)
    multiplication  reduce using rule 47 (value -> real_value .)
    division        reduce using rule 47 (value -> real_value .)
    exponent        reduce using rule 47 (value -> real_value .)
    is_equal        reduce using rule 47 (value -> real_value .)
    is_not_equal    reduce using rule 47 (value -> real_value .)
    and             reduce using rule 47 (value -> real_value .)
    or              reduce using rule 47 (value -> real_value .)
    not             reduce using rule 47 (value -> real_value .)
    greater_than    reduce using rule 47 (value -> real_value .)
    greater_or_equal_than reduce using rule 47 (value -> real_value .)
    less_than       reduce using rule 47 (value -> real_value .)
    less_or_equal_than reduce using rule 47 (value -> real_value .)
    close_parenthesis reduce using rule 47 (value -> real_value .)
    to              reduce using rule 47 (value -> real_value .)
    close_brackets  reduce using rule 47 (value -> real_value .)
    step            reduce using rule 47 (value -> real_value .)


state 41

    (48) value -> functions .

    comma           reduce using rule 48 (value -> functions .)
    dim             reduce using rule 48 (value -> functions .)
    if              reduce using rule 48 (value -> functions .)
    while           reduce using rule 48 (value -> functions .)
    do              reduce using rule 48 (value -> functions .)
    for             reduce using rule 48 (value -> functions .)
    gosub           reduce using rule 48 (value -> functions .)
    id              reduce using rule 48 (value -> functions .)
    let             reduce using rule 48 (value -> functions .)
    dunkelPrint     reduce using rule 48 (value -> functions .)
    dunkelRead      reduce using rule 48 (value -> functions .)
    end             reduce using rule 48 (value -> functions .)
    loop            reduce using rule 48 (value -> functions .)
    wend            reduce using rule 48 (value -> functions .)
    return          reduce using rule 48 (value -> functions .)
    next            reduce using rule 48 (value -> functions .)
    sum             reduce using rule 48 (value -> functions .)
    substraction    reduce using rule 48 (value -> functions .)
    multiplication  reduce using rule 48 (value -> functions .)
    division        reduce using rule 48 (value -> functions .)
    exponent        reduce using rule 48 (value -> functions .)
    is_equal        reduce using rule 48 (value -> functions .)
    is_not_equal    reduce using rule 48 (value -> functions .)
    and             reduce using rule 48 (value -> functions .)
    or              reduce using rule 48 (value -> functions .)
    not             reduce using rule 48 (value -> functions .)
    greater_than    reduce using rule 48 (value -> functions .)
    greater_or_equal_than reduce using rule 48 (value -> functions .)
    less_than       reduce using rule 48 (value -> functions .)
    less_or_equal_than reduce using rule 48 (value -> functions .)
    close_parenthesis reduce using rule 48 (value -> functions .)
    to              reduce using rule 48 (value -> functions .)
    close_brackets  reduce using rule 48 (value -> functions .)
    step            reduce using rule 48 (value -> functions .)


state 42

    (50) value -> ids_access .

    comma           reduce using rule 50 (value -> ids_access .)
    dim             reduce using rule 50 (value -> ids_access .)
    if              reduce using rule 50 (value -> ids_access .)
    while           reduce using rule 50 (value -> ids_access .)
    do              reduce using rule 50 (value -> ids_access .)
    for             reduce using rule 50 (value -> ids_access .)
    gosub           reduce using rule 50 (value -> ids_access .)
    id              reduce using rule 50 (value -> ids_access .)
    let             reduce using rule 50 (value -> ids_access .)
    dunkelPrint     reduce using rule 50 (value -> ids_access .)
    dunkelRead      reduce using rule 50 (value -> ids_access .)
    end             reduce using rule 50 (value -> ids_access .)
    loop            reduce using rule 50 (value -> ids_access .)
    wend            reduce using rule 50 (value -> ids_access .)
    return          reduce using rule 50 (value -> ids_access .)
    next            reduce using rule 50 (value -> ids_access .)
    sum             reduce using rule 50 (value -> ids_access .)
    substraction    reduce using rule 50 (value -> ids_access .)
    multiplication  reduce using rule 50 (value -> ids_access .)
    division        reduce using rule 50 (value -> ids_access .)
    exponent        reduce using rule 50 (value -> ids_access .)
    is_equal        reduce using rule 50 (value -> ids_access .)
    is_not_equal    reduce using rule 50 (value -> ids_access .)
    and             reduce using rule 50 (value -> ids_access .)
    or              reduce using rule 50 (value -> ids_access .)
    not             reduce using rule 50 (value -> ids_access .)
    greater_than    reduce using rule 50 (value -> ids_access .)
    greater_or_equal_than reduce using rule 50 (value -> ids_access .)
    less_than       reduce using rule 50 (value -> ids_access .)
    less_or_equal_than reduce using rule 50 (value -> ids_access .)
    close_parenthesis reduce using rule 50 (value -> ids_access .)
    to              reduce using rule 50 (value -> ids_access .)
    close_brackets  reduce using rule 50 (value -> ids_access .)
    step            reduce using rule 50 (value -> ids_access .)


state 43

    (56) real_value -> word_value .

    comma           reduce using rule 56 (real_value -> word_value .)
    dim             reduce using rule 56 (real_value -> word_value .)
    if              reduce using rule 56 (real_value -> word_value .)
    while           reduce using rule 56 (real_value -> word_value .)
    do              reduce using rule 56 (real_value -> word_value .)
    for             reduce using rule 56 (real_value -> word_value .)
    gosub           reduce using rule 56 (real_value -> word_value .)
    id              reduce using rule 56 (real_value -> word_value .)
    let             reduce using rule 56 (real_value -> word_value .)
    dunkelPrint     reduce using rule 56 (real_value -> word_value .)
    dunkelRead      reduce using rule 56 (real_value -> word_value .)
    end             reduce using rule 56 (real_value -> word_value .)
    loop            reduce using rule 56 (real_value -> word_value .)
    wend            reduce using rule 56 (real_value -> word_value .)
    return          reduce using rule 56 (real_value -> word_value .)
    next            reduce using rule 56 (real_value -> word_value .)
    sum             reduce using rule 56 (real_value -> word_value .)
    substraction    reduce using rule 56 (real_value -> word_value .)
    multiplication  reduce using rule 56 (real_value -> word_value .)
    division        reduce using rule 56 (real_value -> word_value .)
    exponent        reduce using rule 56 (real_value -> word_value .)
    is_equal        reduce using rule 56 (real_value -> word_value .)
    is_not_equal    reduce using rule 56 (real_value -> word_value .)
    and             reduce using rule 56 (real_value -> word_value .)
    or              reduce using rule 56 (real_value -> word_value .)
    not             reduce using rule 56 (real_value -> word_value .)
    greater_than    reduce using rule 56 (real_value -> word_value .)
    greater_or_equal_than reduce using rule 56 (real_value -> word_value .)
    less_than       reduce using rule 56 (real_value -> word_value .)
    less_or_equal_than reduce using rule 56 (real_value -> word_value .)
    close_parenthesis reduce using rule 56 (real_value -> word_value .)
    to              reduce using rule 56 (real_value -> word_value .)
    close_brackets  reduce using rule 56 (real_value -> word_value .)
    step            reduce using rule 56 (real_value -> word_value .)


state 44

    (57) real_value -> float_value .

    comma           reduce using rule 57 (real_value -> float_value .)
    dim             reduce using rule 57 (real_value -> float_value .)
    if              reduce using rule 57 (real_value -> float_value .)
    while           reduce using rule 57 (real_value -> float_value .)
    do              reduce using rule 57 (real_value -> float_value .)
    for             reduce using rule 57 (real_value -> float_value .)
    gosub           reduce using rule 57 (real_value -> float_value .)
    id              reduce using rule 57 (real_value -> float_value .)
    let             reduce using rule 57 (real_value -> float_value .)
    dunkelPrint     reduce using rule 57 (real_value -> float_value .)
    dunkelRead      reduce using rule 57 (real_value -> float_value .)
    end             reduce using rule 57 (real_value -> float_value .)
    loop            reduce using rule 57 (real_value -> float_value .)
    wend            reduce using rule 57 (real_value -> float_value .)
    return          reduce using rule 57 (real_value -> float_value .)
    next            reduce using rule 57 (real_value -> float_value .)
    sum             reduce using rule 57 (real_value -> float_value .)
    substraction    reduce using rule 57 (real_value -> float_value .)
    multiplication  reduce using rule 57 (real_value -> float_value .)
    division        reduce using rule 57 (real_value -> float_value .)
    exponent        reduce using rule 57 (real_value -> float_value .)
    is_equal        reduce using rule 57 (real_value -> float_value .)
    is_not_equal    reduce using rule 57 (real_value -> float_value .)
    and             reduce using rule 57 (real_value -> float_value .)
    or              reduce using rule 57 (real_value -> float_value .)
    not             reduce using rule 57 (real_value -> float_value .)
    greater_than    reduce using rule 57 (real_value -> float_value .)
    greater_or_equal_than reduce using rule 57 (real_value -> float_value .)
    less_than       reduce using rule 57 (real_value -> float_value .)
    less_or_equal_than reduce using rule 57 (real_value -> float_value .)
    close_parenthesis reduce using rule 57 (real_value -> float_value .)
    to              reduce using rule 57 (real_value -> float_value .)
    close_brackets  reduce using rule 57 (real_value -> float_value .)
    step            reduce using rule 57 (real_value -> float_value .)


state 45

    (58) real_value -> id .
    (71) functions -> id . open_parenthesis close_parenthesis
    (72) functions -> id . open_parenthesis arguments close_parenthesis
    (51) ids_access -> id .
    (52) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (53) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

  ! reduce/reduce conflict for comma resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for dim resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for if resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for while resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for do resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for for resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for gosub resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for id resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for let resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for end resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for loop resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for wend resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for return resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for next resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for sum resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for is_equal resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for and resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for or resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for not resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for greater_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for less_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for to resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for close_brackets resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for step resolved using rule 51 (ids_access -> id .)
    open_parenthesis shift and go to state 73
    comma           reduce using rule 51 (ids_access -> id .)
    dim             reduce using rule 51 (ids_access -> id .)
    if              reduce using rule 51 (ids_access -> id .)
    while           reduce using rule 51 (ids_access -> id .)
    do              reduce using rule 51 (ids_access -> id .)
    for             reduce using rule 51 (ids_access -> id .)
    gosub           reduce using rule 51 (ids_access -> id .)
    id              reduce using rule 51 (ids_access -> id .)
    let             reduce using rule 51 (ids_access -> id .)
    dunkelPrint     reduce using rule 51 (ids_access -> id .)
    dunkelRead      reduce using rule 51 (ids_access -> id .)
    end             reduce using rule 51 (ids_access -> id .)
    loop            reduce using rule 51 (ids_access -> id .)
    wend            reduce using rule 51 (ids_access -> id .)
    return          reduce using rule 51 (ids_access -> id .)
    next            reduce using rule 51 (ids_access -> id .)
    sum             reduce using rule 51 (ids_access -> id .)
    substraction    reduce using rule 51 (ids_access -> id .)
    multiplication  reduce using rule 51 (ids_access -> id .)
    division        reduce using rule 51 (ids_access -> id .)
    exponent        reduce using rule 51 (ids_access -> id .)
    is_equal        reduce using rule 51 (ids_access -> id .)
    is_not_equal    reduce using rule 51 (ids_access -> id .)
    and             reduce using rule 51 (ids_access -> id .)
    or              reduce using rule 51 (ids_access -> id .)
    not             reduce using rule 51 (ids_access -> id .)
    greater_than    reduce using rule 51 (ids_access -> id .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id .)
    less_than       reduce using rule 51 (ids_access -> id .)
    less_or_equal_than reduce using rule 51 (ids_access -> id .)
    close_parenthesis reduce using rule 51 (ids_access -> id .)
    to              reduce using rule 51 (ids_access -> id .)
    close_brackets  reduce using rule 51 (ids_access -> id .)
    step            reduce using rule 51 (ids_access -> id .)
    open_brackets   shift and go to state 74

  ! comma           [ reduce using rule 58 (real_value -> id .) ]
  ! dim             [ reduce using rule 58 (real_value -> id .) ]
  ! if              [ reduce using rule 58 (real_value -> id .) ]
  ! while           [ reduce using rule 58 (real_value -> id .) ]
  ! do              [ reduce using rule 58 (real_value -> id .) ]
  ! for             [ reduce using rule 58 (real_value -> id .) ]
  ! gosub           [ reduce using rule 58 (real_value -> id .) ]
  ! id              [ reduce using rule 58 (real_value -> id .) ]
  ! let             [ reduce using rule 58 (real_value -> id .) ]
  ! dunkelPrint     [ reduce using rule 58 (real_value -> id .) ]
  ! dunkelRead      [ reduce using rule 58 (real_value -> id .) ]
  ! end             [ reduce using rule 58 (real_value -> id .) ]
  ! loop            [ reduce using rule 58 (real_value -> id .) ]
  ! wend            [ reduce using rule 58 (real_value -> id .) ]
  ! return          [ reduce using rule 58 (real_value -> id .) ]
  ! next            [ reduce using rule 58 (real_value -> id .) ]
  ! sum             [ reduce using rule 58 (real_value -> id .) ]
  ! substraction    [ reduce using rule 58 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 58 (real_value -> id .) ]
  ! division        [ reduce using rule 58 (real_value -> id .) ]
  ! exponent        [ reduce using rule 58 (real_value -> id .) ]
  ! is_equal        [ reduce using rule 58 (real_value -> id .) ]
  ! is_not_equal    [ reduce using rule 58 (real_value -> id .) ]
  ! and             [ reduce using rule 58 (real_value -> id .) ]
  ! or              [ reduce using rule 58 (real_value -> id .) ]
  ! not             [ reduce using rule 58 (real_value -> id .) ]
  ! greater_than    [ reduce using rule 58 (real_value -> id .) ]
  ! greater_or_equal_than [ reduce using rule 58 (real_value -> id .) ]
  ! less_than       [ reduce using rule 58 (real_value -> id .) ]
  ! less_or_equal_than [ reduce using rule 58 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 58 (real_value -> id .) ]
  ! to              [ reduce using rule 58 (real_value -> id .) ]
  ! close_brackets  [ reduce using rule 58 (real_value -> id .) ]
  ! step            [ reduce using rule 58 (real_value -> id .) ]


state 46

    (83) read -> dunkelRead multiple_read .
    (86) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 83 (read -> dunkelRead multiple_read .)
    if              reduce using rule 83 (read -> dunkelRead multiple_read .)
    while           reduce using rule 83 (read -> dunkelRead multiple_read .)
    do              reduce using rule 83 (read -> dunkelRead multiple_read .)
    for             reduce using rule 83 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 83 (read -> dunkelRead multiple_read .)
    id              reduce using rule 83 (read -> dunkelRead multiple_read .)
    let             reduce using rule 83 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 83 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 83 (read -> dunkelRead multiple_read .)
    end             reduce using rule 83 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 83 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 83 (read -> dunkelRead multiple_read .)
    return          reduce using rule 83 (read -> dunkelRead multiple_read .)
    next            reduce using rule 83 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 75


state 47

    (84) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 76


state 48

    (85) multiple_read -> ids_access .

    comma           reduce using rule 85 (multiple_read -> ids_access .)
    dim             reduce using rule 85 (multiple_read -> ids_access .)
    if              reduce using rule 85 (multiple_read -> ids_access .)
    while           reduce using rule 85 (multiple_read -> ids_access .)
    do              reduce using rule 85 (multiple_read -> ids_access .)
    for             reduce using rule 85 (multiple_read -> ids_access .)
    gosub           reduce using rule 85 (multiple_read -> ids_access .)
    id              reduce using rule 85 (multiple_read -> ids_access .)
    let             reduce using rule 85 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 85 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 85 (multiple_read -> ids_access .)
    end             reduce using rule 85 (multiple_read -> ids_access .)
    loop            reduce using rule 85 (multiple_read -> ids_access .)
    wend            reduce using rule 85 (multiple_read -> ids_access .)
    return          reduce using rule 85 (multiple_read -> ids_access .)
    next            reduce using rule 85 (multiple_read -> ids_access .)


state 49

    (51) ids_access -> id .
    (52) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (53) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 51 (ids_access -> id .)
    dim             reduce using rule 51 (ids_access -> id .)
    if              reduce using rule 51 (ids_access -> id .)
    while           reduce using rule 51 (ids_access -> id .)
    do              reduce using rule 51 (ids_access -> id .)
    for             reduce using rule 51 (ids_access -> id .)
    gosub           reduce using rule 51 (ids_access -> id .)
    id              reduce using rule 51 (ids_access -> id .)
    let             reduce using rule 51 (ids_access -> id .)
    dunkelPrint     reduce using rule 51 (ids_access -> id .)
    dunkelRead      reduce using rule 51 (ids_access -> id .)
    end             reduce using rule 51 (ids_access -> id .)
    loop            reduce using rule 51 (ids_access -> id .)
    wend            reduce using rule 51 (ids_access -> id .)
    return          reduce using rule 51 (ids_access -> id .)
    next            reduce using rule 51 (ids_access -> id .)
    close_parenthesis reduce using rule 51 (ids_access -> id .)
    open_brackets   shift and go to state 74


state 50

    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 49
    open_parenthesis shift and go to state 50

    ids_access                     shift and go to state 77

state 51

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 52

    (61) subroutines -> sub . procedure id inside_logic return subroutines
    (62) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 78
    function        shift and go to state 79


state 53

    (10) variable -> dim id as . variable_type
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 81
    float           shift and go to state 82
    bool            shift and go to state 83

    variable_type                  shift and go to state 80

state 54

    (60) calls -> id open_parenthesis close_parenthesis .

    dim             reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    let             reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 60 (calls -> id open_parenthesis close_parenthesis .)


state 55

    (26) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (49) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 84
    id              shift and go to state 72
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44

    logic_expression               shift and go to state 85
    arithmetic_expression          shift and go to state 86
    ids_access                     shift and go to state 70
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41

state 56

    (17) conditions -> if open_parenthesis logic_expression . close_parenthesis then inside_logic end if
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 87
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

    logic_operand                  shift and go to state 88

state 57

    (21) logic_expression -> arithmetic_expression .
    (23) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (36) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (37) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 21 (logic_expression -> arithmetic_expression .)
    dim             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 21 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 21 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 21 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 21 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 21 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    is_equal        shift and go to state 99
    is_not_equal    shift and go to state 100
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

  ! and             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 98

state 58

    (22) logic_expression -> compared_to_bool .

    close_parenthesis reduce using rule 22 (logic_expression -> compared_to_bool .)
    and             reduce using rule 22 (logic_expression -> compared_to_bool .)
    or              reduce using rule 22 (logic_expression -> compared_to_bool .)
    not             reduce using rule 22 (logic_expression -> compared_to_bool .)
    is_equal        reduce using rule 22 (logic_expression -> compared_to_bool .)
    is_not_equal    reduce using rule 22 (logic_expression -> compared_to_bool .)
    greater_than    reduce using rule 22 (logic_expression -> compared_to_bool .)
    greater_or_equal_than reduce using rule 22 (logic_expression -> compared_to_bool .)
    less_than       reduce using rule 22 (logic_expression -> compared_to_bool .)
    less_or_equal_than reduce using rule 22 (logic_expression -> compared_to_bool .)
    dim             reduce using rule 22 (logic_expression -> compared_to_bool .)
    if              reduce using rule 22 (logic_expression -> compared_to_bool .)
    while           reduce using rule 22 (logic_expression -> compared_to_bool .)
    do              reduce using rule 22 (logic_expression -> compared_to_bool .)
    for             reduce using rule 22 (logic_expression -> compared_to_bool .)
    gosub           reduce using rule 22 (logic_expression -> compared_to_bool .)
    id              reduce using rule 22 (logic_expression -> compared_to_bool .)
    let             reduce using rule 22 (logic_expression -> compared_to_bool .)
    dunkelPrint     reduce using rule 22 (logic_expression -> compared_to_bool .)
    dunkelRead      reduce using rule 22 (logic_expression -> compared_to_bool .)
    end             reduce using rule 22 (logic_expression -> compared_to_bool .)
    loop            reduce using rule 22 (logic_expression -> compared_to_bool .)
    wend            reduce using rule 22 (logic_expression -> compared_to_bool .)
    return          reduce using rule 22 (logic_expression -> compared_to_bool .)
    next            reduce using rule 22 (logic_expression -> compared_to_bool .)


state 59

    (25) logic_expression -> not . logic_expression
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 101
    arithmetic_expression          shift and go to state 57
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 60

    (40) arithmetic_expression -> value .
    (41) arithmetic_expression -> value . arithmetic_operand value
    (42) arithmetic_operand -> . sum
    (43) arithmetic_operand -> . substraction
    (44) arithmetic_operand -> . multiplication
    (45) arithmetic_operand -> . division
    (46) arithmetic_operand -> . exponent

    is_equal        reduce using rule 40 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 40 (arithmetic_expression -> value .)
    and             reduce using rule 40 (arithmetic_expression -> value .)
    or              reduce using rule 40 (arithmetic_expression -> value .)
    not             reduce using rule 40 (arithmetic_expression -> value .)
    greater_than    reduce using rule 40 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 40 (arithmetic_expression -> value .)
    less_than       reduce using rule 40 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 40 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 40 (arithmetic_expression -> value .)
    dim             reduce using rule 40 (arithmetic_expression -> value .)
    if              reduce using rule 40 (arithmetic_expression -> value .)
    while           reduce using rule 40 (arithmetic_expression -> value .)
    do              reduce using rule 40 (arithmetic_expression -> value .)
    for             reduce using rule 40 (arithmetic_expression -> value .)
    gosub           reduce using rule 40 (arithmetic_expression -> value .)
    id              reduce using rule 40 (arithmetic_expression -> value .)
    let             reduce using rule 40 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 40 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 40 (arithmetic_expression -> value .)
    end             reduce using rule 40 (arithmetic_expression -> value .)
    loop            reduce using rule 40 (arithmetic_expression -> value .)
    wend            reduce using rule 40 (arithmetic_expression -> value .)
    return          reduce using rule 40 (arithmetic_expression -> value .)
    next            reduce using rule 40 (arithmetic_expression -> value .)
    to              reduce using rule 40 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 40 (arithmetic_expression -> value .)
    step            reduce using rule 40 (arithmetic_expression -> value .)
    sum             shift and go to state 103
    substraction    shift and go to state 104
    multiplication  shift and go to state 105
    division        shift and go to state 106
    exponent        shift and go to state 107

    arithmetic_operand             shift and go to state 102

state 61

    (38) compared_to_bool -> bool_value . is_equal arithmetic_expression
    (39) compared_to_bool -> bool_value . is_not_equal arithmetic_expression

    is_equal        shift and go to state 108
    is_not_equal    shift and go to state 109


state 62

    (18) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 110
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

    logic_operand                  shift and go to state 88

state 63

    (19) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 111


state 64

    (20) loops -> for id equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 112
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 65

    (67) assign -> let id equals . logic_expression
    (68) assign -> let id equals . arithmetic_expression
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 114
    arithmetic_expression          shift and go to state 115
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 66

    (82) multiple_print -> multiple_print comma . multiple_print
    (80) multiple_print -> . string
    (81) multiple_print -> . value
    (82) multiple_print -> . multiple_print comma multiple_print
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 38
    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    multiple_print                 shift and go to state 116
    value                          shift and go to state 39
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 67

    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (49) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 72
    open_parenthesis shift and go to state 67
    word_value      shift and go to state 43
    float_value     shift and go to state 44

    ids_access                     shift and go to state 70
    arithmetic_expression          shift and go to state 69
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41

state 68

    (79) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (82) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 117
    comma           shift and go to state 66


state 69

    (49) value -> open_parenthesis arithmetic_expression . close_parenthesis

    close_parenthesis shift and go to state 118


state 70

    (55) ids_access -> open_parenthesis ids_access . close_parenthesis
    (50) value -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 119
    sum             reduce using rule 50 (value -> ids_access .)
    substraction    reduce using rule 50 (value -> ids_access .)
    multiplication  reduce using rule 50 (value -> ids_access .)
    division        reduce using rule 50 (value -> ids_access .)
    exponent        reduce using rule 50 (value -> ids_access .)
    comma           reduce using rule 50 (value -> ids_access .)
    is_equal        reduce using rule 50 (value -> ids_access .)
    is_not_equal    reduce using rule 50 (value -> ids_access .)
    and             reduce using rule 50 (value -> ids_access .)
    or              reduce using rule 50 (value -> ids_access .)
    not             reduce using rule 50 (value -> ids_access .)
    greater_than    reduce using rule 50 (value -> ids_access .)
    greater_or_equal_than reduce using rule 50 (value -> ids_access .)
    less_than       reduce using rule 50 (value -> ids_access .)
    less_or_equal_than reduce using rule 50 (value -> ids_access .)

  ! close_parenthesis [ reduce using rule 50 (value -> ids_access .) ]


state 71

    (81) multiple_print -> value .
    (40) arithmetic_expression -> value .
    (41) arithmetic_expression -> value . arithmetic_operand value
    (42) arithmetic_operand -> . sum
    (43) arithmetic_operand -> . substraction
    (44) arithmetic_operand -> . multiplication
    (45) arithmetic_operand -> . division
    (46) arithmetic_operand -> . exponent

  ! reduce/reduce conflict for close_parenthesis resolved using rule 40 (arithmetic_expression -> value .)
    comma           reduce using rule 81 (multiple_print -> value .)
    close_parenthesis reduce using rule 40 (arithmetic_expression -> value .)
    sum             shift and go to state 103
    substraction    shift and go to state 104
    multiplication  shift and go to state 105
    division        shift and go to state 106
    exponent        shift and go to state 107

  ! close_parenthesis [ reduce using rule 81 (multiple_print -> value .) ]

    arithmetic_operand             shift and go to state 102

state 72

    (51) ids_access -> id .
    (52) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (53) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (58) real_value -> id .
    (71) functions -> id . open_parenthesis close_parenthesis
    (72) functions -> id . open_parenthesis arguments close_parenthesis

  ! reduce/reduce conflict for sum resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for comma resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for is_equal resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for and resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for or resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for not resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for greater_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for less_than resolved using rule 51 (ids_access -> id .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 51 (ids_access -> id .)
    close_parenthesis reduce using rule 51 (ids_access -> id .)
    sum             reduce using rule 51 (ids_access -> id .)
    substraction    reduce using rule 51 (ids_access -> id .)
    multiplication  reduce using rule 51 (ids_access -> id .)
    division        reduce using rule 51 (ids_access -> id .)
    exponent        reduce using rule 51 (ids_access -> id .)
    comma           reduce using rule 51 (ids_access -> id .)
    is_equal        reduce using rule 51 (ids_access -> id .)
    is_not_equal    reduce using rule 51 (ids_access -> id .)
    and             reduce using rule 51 (ids_access -> id .)
    or              reduce using rule 51 (ids_access -> id .)
    not             reduce using rule 51 (ids_access -> id .)
    greater_than    reduce using rule 51 (ids_access -> id .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id .)
    less_than       reduce using rule 51 (ids_access -> id .)
    less_or_equal_than reduce using rule 51 (ids_access -> id .)
    open_brackets   shift and go to state 74
    open_parenthesis shift and go to state 73

  ! sum             [ reduce using rule 58 (real_value -> id .) ]
  ! substraction    [ reduce using rule 58 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 58 (real_value -> id .) ]
  ! division        [ reduce using rule 58 (real_value -> id .) ]
  ! exponent        [ reduce using rule 58 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 58 (real_value -> id .) ]
  ! comma           [ reduce using rule 58 (real_value -> id .) ]
  ! is_equal        [ reduce using rule 58 (real_value -> id .) ]
  ! is_not_equal    [ reduce using rule 58 (real_value -> id .) ]
  ! and             [ reduce using rule 58 (real_value -> id .) ]
  ! or              [ reduce using rule 58 (real_value -> id .) ]
  ! not             [ reduce using rule 58 (real_value -> id .) ]
  ! greater_than    [ reduce using rule 58 (real_value -> id .) ]
  ! greater_or_equal_than [ reduce using rule 58 (real_value -> id .) ]
  ! less_than       [ reduce using rule 58 (real_value -> id .) ]
  ! less_or_equal_than [ reduce using rule 58 (real_value -> id .) ]


state 73

    (71) functions -> id open_parenthesis . close_parenthesis
    (72) functions -> id open_parenthesis . arguments close_parenthesis
    (73) arguments -> . ByVal value
    (74) arguments -> . ByRef id
    (75) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 120
    ByVal           shift and go to state 122
    ByRef           shift and go to state 123

    arguments                      shift and go to state 121

state 74

    (52) ids_access -> id open_brackets . arithmetic_expression close_brackets
    (53) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 124
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 75

    (86) multiple_read -> multiple_read comma . multiple_read
    (85) multiple_read -> . ids_access
    (86) multiple_read -> . multiple_read comma multiple_read
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 49
    open_parenthesis shift and go to state 50

    multiple_read                  shift and go to state 125
    ids_access                     shift and go to state 48

state 76

    (84) read -> dunkelRead string comma . multiple_read
    (85) multiple_read -> . ids_access
    (86) multiple_read -> . multiple_read comma multiple_read
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 49
    open_parenthesis shift and go to state 50

    multiple_read                  shift and go to state 126
    ids_access                     shift and go to state 48

state 77

    (55) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 119


state 78

    (61) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 127


state 79

    (62) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 128


state 80

    (10) variable -> dim id as variable_type .
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type .)
    if              reduce using rule 10 (variable -> dim id as variable_type .)
    while           reduce using rule 10 (variable -> dim id as variable_type .)
    do              reduce using rule 10 (variable -> dim id as variable_type .)
    for             reduce using rule 10 (variable -> dim id as variable_type .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type .)
    id              reduce using rule 10 (variable -> dim id as variable_type .)
    let             reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type .)
    end             reduce using rule 10 (variable -> dim id as variable_type .)
    loop            reduce using rule 10 (variable -> dim id as variable_type .)
    wend            reduce using rule 10 (variable -> dim id as variable_type .)
    return          reduce using rule 10 (variable -> dim id as variable_type .)
    next            reduce using rule 10 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type .)
    comma           reduce using rule 10 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 129


state 81

    (14) variable_type -> word .

    open_brackets   reduce using rule 14 (variable_type -> word .)
    dim             reduce using rule 14 (variable_type -> word .)
    if              reduce using rule 14 (variable_type -> word .)
    while           reduce using rule 14 (variable_type -> word .)
    do              reduce using rule 14 (variable_type -> word .)
    for             reduce using rule 14 (variable_type -> word .)
    gosub           reduce using rule 14 (variable_type -> word .)
    id              reduce using rule 14 (variable_type -> word .)
    let             reduce using rule 14 (variable_type -> word .)
    dunkelPrint     reduce using rule 14 (variable_type -> word .)
    dunkelRead      reduce using rule 14 (variable_type -> word .)
    end             reduce using rule 14 (variable_type -> word .)
    loop            reduce using rule 14 (variable_type -> word .)
    wend            reduce using rule 14 (variable_type -> word .)
    return          reduce using rule 14 (variable_type -> word .)
    next            reduce using rule 14 (variable_type -> word .)
    close_parenthesis reduce using rule 14 (variable_type -> word .)
    comma           reduce using rule 14 (variable_type -> word .)


state 82

    (15) variable_type -> float .

    open_brackets   reduce using rule 15 (variable_type -> float .)
    dim             reduce using rule 15 (variable_type -> float .)
    if              reduce using rule 15 (variable_type -> float .)
    while           reduce using rule 15 (variable_type -> float .)
    do              reduce using rule 15 (variable_type -> float .)
    for             reduce using rule 15 (variable_type -> float .)
    gosub           reduce using rule 15 (variable_type -> float .)
    id              reduce using rule 15 (variable_type -> float .)
    let             reduce using rule 15 (variable_type -> float .)
    dunkelPrint     reduce using rule 15 (variable_type -> float .)
    dunkelRead      reduce using rule 15 (variable_type -> float .)
    end             reduce using rule 15 (variable_type -> float .)
    loop            reduce using rule 15 (variable_type -> float .)
    wend            reduce using rule 15 (variable_type -> float .)
    return          reduce using rule 15 (variable_type -> float .)
    next            reduce using rule 15 (variable_type -> float .)
    close_parenthesis reduce using rule 15 (variable_type -> float .)
    comma           reduce using rule 15 (variable_type -> float .)


state 83

    (16) variable_type -> bool .

    open_brackets   reduce using rule 16 (variable_type -> bool .)
    dim             reduce using rule 16 (variable_type -> bool .)
    if              reduce using rule 16 (variable_type -> bool .)
    while           reduce using rule 16 (variable_type -> bool .)
    do              reduce using rule 16 (variable_type -> bool .)
    for             reduce using rule 16 (variable_type -> bool .)
    gosub           reduce using rule 16 (variable_type -> bool .)
    id              reduce using rule 16 (variable_type -> bool .)
    let             reduce using rule 16 (variable_type -> bool .)
    dunkelPrint     reduce using rule 16 (variable_type -> bool .)
    dunkelRead      reduce using rule 16 (variable_type -> bool .)
    end             reduce using rule 16 (variable_type -> bool .)
    loop            reduce using rule 16 (variable_type -> bool .)
    wend            reduce using rule 16 (variable_type -> bool .)
    return          reduce using rule 16 (variable_type -> bool .)
    next            reduce using rule 16 (variable_type -> bool .)
    close_parenthesis reduce using rule 16 (variable_type -> bool .)
    comma           reduce using rule 16 (variable_type -> bool .)


state 84

    (26) logic_expression -> open_parenthesis . logic_expression close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (49) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 84
    id              shift and go to state 72
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44

    logic_expression               shift and go to state 85
    ids_access                     shift and go to state 70
    arithmetic_expression          shift and go to state 86
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41

state 85

    (26) logic_expression -> open_parenthesis logic_expression . close_parenthesis
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 130
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

    logic_operand                  shift and go to state 88

state 86

    (49) value -> open_parenthesis arithmetic_expression . close_parenthesis
    (21) logic_expression -> arithmetic_expression .
    (23) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (36) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (37) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for close_parenthesis resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis shift and go to state 118
    is_equal        shift and go to state 99
    is_not_equal    shift and go to state 100
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

  ! close_parenthesis [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! and             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 98

state 87

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis . then inside_logic end if

    then            shift and go to state 131


state 88

    (24) logic_expression -> logic_expression logic_operand . logic_expression
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 132
    arithmetic_expression          shift and go to state 57
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 89

    (27) logic_operand -> and .

    not             reduce using rule 27 (logic_operand -> and .)
    open_parenthesis reduce using rule 27 (logic_operand -> and .)
    bool_value      reduce using rule 27 (logic_operand -> and .)
    word_value      reduce using rule 27 (logic_operand -> and .)
    float_value     reduce using rule 27 (logic_operand -> and .)
    id              reduce using rule 27 (logic_operand -> and .)


state 90

    (28) logic_operand -> or .

    not             reduce using rule 28 (logic_operand -> or .)
    open_parenthesis reduce using rule 28 (logic_operand -> or .)
    bool_value      reduce using rule 28 (logic_operand -> or .)
    word_value      reduce using rule 28 (logic_operand -> or .)
    float_value     reduce using rule 28 (logic_operand -> or .)
    id              reduce using rule 28 (logic_operand -> or .)


state 91

    (29) logic_operand -> not .

    not             reduce using rule 29 (logic_operand -> not .)
    open_parenthesis reduce using rule 29 (logic_operand -> not .)
    bool_value      reduce using rule 29 (logic_operand -> not .)
    word_value      reduce using rule 29 (logic_operand -> not .)
    float_value     reduce using rule 29 (logic_operand -> not .)
    id              reduce using rule 29 (logic_operand -> not .)


state 92

    (30) logic_operand -> is_equal .

    not             reduce using rule 30 (logic_operand -> is_equal .)
    open_parenthesis reduce using rule 30 (logic_operand -> is_equal .)
    bool_value      reduce using rule 30 (logic_operand -> is_equal .)
    word_value      reduce using rule 30 (logic_operand -> is_equal .)
    float_value     reduce using rule 30 (logic_operand -> is_equal .)
    id              reduce using rule 30 (logic_operand -> is_equal .)


state 93

    (31) logic_operand -> is_not_equal .

    not             reduce using rule 31 (logic_operand -> is_not_equal .)
    open_parenthesis reduce using rule 31 (logic_operand -> is_not_equal .)
    bool_value      reduce using rule 31 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 31 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 31 (logic_operand -> is_not_equal .)
    id              reduce using rule 31 (logic_operand -> is_not_equal .)


state 94

    (32) logic_operand -> greater_than .

    not             reduce using rule 32 (logic_operand -> greater_than .)
    open_parenthesis reduce using rule 32 (logic_operand -> greater_than .)
    bool_value      reduce using rule 32 (logic_operand -> greater_than .)
    word_value      reduce using rule 32 (logic_operand -> greater_than .)
    float_value     reduce using rule 32 (logic_operand -> greater_than .)
    id              reduce using rule 32 (logic_operand -> greater_than .)


state 95

    (33) logic_operand -> greater_or_equal_than .

    not             reduce using rule 33 (logic_operand -> greater_or_equal_than .)
    open_parenthesis reduce using rule 33 (logic_operand -> greater_or_equal_than .)
    bool_value      reduce using rule 33 (logic_operand -> greater_or_equal_than .)
    word_value      reduce using rule 33 (logic_operand -> greater_or_equal_than .)
    float_value     reduce using rule 33 (logic_operand -> greater_or_equal_than .)
    id              reduce using rule 33 (logic_operand -> greater_or_equal_than .)


state 96

    (34) logic_operand -> less_than .

    not             reduce using rule 34 (logic_operand -> less_than .)
    open_parenthesis reduce using rule 34 (logic_operand -> less_than .)
    bool_value      reduce using rule 34 (logic_operand -> less_than .)
    word_value      reduce using rule 34 (logic_operand -> less_than .)
    float_value     reduce using rule 34 (logic_operand -> less_than .)
    id              reduce using rule 34 (logic_operand -> less_than .)


state 97

    (35) logic_operand -> less_or_equal_than .

    not             reduce using rule 35 (logic_operand -> less_or_equal_than .)
    open_parenthesis reduce using rule 35 (logic_operand -> less_or_equal_than .)
    bool_value      reduce using rule 35 (logic_operand -> less_or_equal_than .)
    word_value      reduce using rule 35 (logic_operand -> less_or_equal_than .)
    float_value     reduce using rule 35 (logic_operand -> less_or_equal_than .)
    id              reduce using rule 35 (logic_operand -> less_or_equal_than .)


state 98

    (23) logic_expression -> arithmetic_expression logic_operand . arithmetic_expression
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 133
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 99

    (36) compared_to_bool -> arithmetic_expression is_equal . bool_value
    (30) logic_operand -> is_equal .

    bool_value      shift and go to state 134
    open_parenthesis reduce using rule 30 (logic_operand -> is_equal .)
    word_value      reduce using rule 30 (logic_operand -> is_equal .)
    float_value     reduce using rule 30 (logic_operand -> is_equal .)
    id              reduce using rule 30 (logic_operand -> is_equal .)


state 100

    (37) compared_to_bool -> arithmetic_expression is_not_equal . bool_value
    (31) logic_operand -> is_not_equal .

    bool_value      shift and go to state 135
    open_parenthesis reduce using rule 31 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 31 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 31 (logic_operand -> is_not_equal .)
    id              reduce using rule 31 (logic_operand -> is_not_equal .)


state 101

    (25) logic_expression -> not logic_expression .
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 25 (logic_expression -> not logic_expression .)
    dim             reduce using rule 25 (logic_expression -> not logic_expression .)
    if              reduce using rule 25 (logic_expression -> not logic_expression .)
    while           reduce using rule 25 (logic_expression -> not logic_expression .)
    do              reduce using rule 25 (logic_expression -> not logic_expression .)
    for             reduce using rule 25 (logic_expression -> not logic_expression .)
    gosub           reduce using rule 25 (logic_expression -> not logic_expression .)
    id              reduce using rule 25 (logic_expression -> not logic_expression .)
    let             reduce using rule 25 (logic_expression -> not logic_expression .)
    dunkelPrint     reduce using rule 25 (logic_expression -> not logic_expression .)
    dunkelRead      reduce using rule 25 (logic_expression -> not logic_expression .)
    end             reduce using rule 25 (logic_expression -> not logic_expression .)
    loop            reduce using rule 25 (logic_expression -> not logic_expression .)
    wend            reduce using rule 25 (logic_expression -> not logic_expression .)
    return          reduce using rule 25 (logic_expression -> not logic_expression .)
    next            reduce using rule 25 (logic_expression -> not logic_expression .)
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

  ! and             [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! or              [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! not             [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! is_equal        [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! is_not_equal    [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! greater_than    [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! less_than       [ reduce using rule 25 (logic_expression -> not logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 25 (logic_expression -> not logic_expression .) ]

    logic_operand                  shift and go to state 88

state 102

    (41) arithmetic_expression -> value arithmetic_operand . value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    value                          shift and go to state 136
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 103

    (42) arithmetic_operand -> sum .

    open_parenthesis reduce using rule 42 (arithmetic_operand -> sum .)
    word_value      reduce using rule 42 (arithmetic_operand -> sum .)
    float_value     reduce using rule 42 (arithmetic_operand -> sum .)
    id              reduce using rule 42 (arithmetic_operand -> sum .)


state 104

    (43) arithmetic_operand -> substraction .

    open_parenthesis reduce using rule 43 (arithmetic_operand -> substraction .)
    word_value      reduce using rule 43 (arithmetic_operand -> substraction .)
    float_value     reduce using rule 43 (arithmetic_operand -> substraction .)
    id              reduce using rule 43 (arithmetic_operand -> substraction .)


state 105

    (44) arithmetic_operand -> multiplication .

    open_parenthesis reduce using rule 44 (arithmetic_operand -> multiplication .)
    word_value      reduce using rule 44 (arithmetic_operand -> multiplication .)
    float_value     reduce using rule 44 (arithmetic_operand -> multiplication .)
    id              reduce using rule 44 (arithmetic_operand -> multiplication .)


state 106

    (45) arithmetic_operand -> division .

    open_parenthesis reduce using rule 45 (arithmetic_operand -> division .)
    word_value      reduce using rule 45 (arithmetic_operand -> division .)
    float_value     reduce using rule 45 (arithmetic_operand -> division .)
    id              reduce using rule 45 (arithmetic_operand -> division .)


state 107

    (46) arithmetic_operand -> exponent .

    open_parenthesis reduce using rule 46 (arithmetic_operand -> exponent .)
    word_value      reduce using rule 46 (arithmetic_operand -> exponent .)
    float_value     reduce using rule 46 (arithmetic_operand -> exponent .)
    id              reduce using rule 46 (arithmetic_operand -> exponent .)


state 108

    (38) compared_to_bool -> bool_value is_equal . arithmetic_expression
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 137
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 109

    (39) compared_to_bool -> bool_value is_not_equal . arithmetic_expression
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 138
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 110

    (18) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 139
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 111

    (19) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 140


state 112

    (20) loops -> for id equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id

    to              shift and go to state 141


state 113

    (49) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (55) ids_access -> open_parenthesis . ids_access close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 72
    open_parenthesis shift and go to state 67
    word_value      shift and go to state 43
    float_value     shift and go to state 44

    arithmetic_expression          shift and go to state 69
    ids_access                     shift and go to state 70
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41

state 114

    (67) assign -> let id equals logic_expression .
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

    dim             reduce using rule 67 (assign -> let id equals logic_expression .)
    if              reduce using rule 67 (assign -> let id equals logic_expression .)
    while           reduce using rule 67 (assign -> let id equals logic_expression .)
    do              reduce using rule 67 (assign -> let id equals logic_expression .)
    for             reduce using rule 67 (assign -> let id equals logic_expression .)
    gosub           reduce using rule 67 (assign -> let id equals logic_expression .)
    id              reduce using rule 67 (assign -> let id equals logic_expression .)
    let             reduce using rule 67 (assign -> let id equals logic_expression .)
    dunkelPrint     reduce using rule 67 (assign -> let id equals logic_expression .)
    dunkelRead      reduce using rule 67 (assign -> let id equals logic_expression .)
    end             reduce using rule 67 (assign -> let id equals logic_expression .)
    loop            reduce using rule 67 (assign -> let id equals logic_expression .)
    wend            reduce using rule 67 (assign -> let id equals logic_expression .)
    return          reduce using rule 67 (assign -> let id equals logic_expression .)
    next            reduce using rule 67 (assign -> let id equals logic_expression .)
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

    logic_operand                  shift and go to state 88

state 115

    (68) assign -> let id equals arithmetic_expression .
    (21) logic_expression -> arithmetic_expression .
    (23) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (36) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (37) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

  ! reduce/reduce conflict for dim resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for if resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for while resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for do resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for for resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for gosub resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for id resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for let resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for end resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for loop resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for wend resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for return resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! reduce/reduce conflict for next resolved using rule 21 (logic_expression -> arithmetic_expression .)
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    dim             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    if              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    while           reduce using rule 21 (logic_expression -> arithmetic_expression .)
    do              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    for             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    gosub           reduce using rule 21 (logic_expression -> arithmetic_expression .)
    id              reduce using rule 21 (logic_expression -> arithmetic_expression .)
    let             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    dunkelPrint     reduce using rule 21 (logic_expression -> arithmetic_expression .)
    dunkelRead      reduce using rule 21 (logic_expression -> arithmetic_expression .)
    end             reduce using rule 21 (logic_expression -> arithmetic_expression .)
    loop            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    wend            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    return          reduce using rule 21 (logic_expression -> arithmetic_expression .)
    next            reduce using rule 21 (logic_expression -> arithmetic_expression .)
    is_equal        shift and go to state 99
    is_not_equal    shift and go to state 100
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

  ! dim             [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! if              [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! while           [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! do              [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! for             [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! gosub           [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! id              [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! let             [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! dunkelPrint     [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! dunkelRead      [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! end             [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! loop            [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! wend            [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! return          [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! next            [ reduce using rule 68 (assign -> let id equals arithmetic_expression .) ]
  ! and             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 21 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 98

state 116

    (82) multiple_print -> multiple_print comma multiple_print .
    (82) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    let             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 66

  ! comma           [ reduce using rule 82 (multiple_print -> multiple_print comma multiple_print .) ]


state 117

    (79) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    let             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 79 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 118

    (49) value -> open_parenthesis arithmetic_expression close_parenthesis .

    comma           reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dim             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    if              reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    while           reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    do              reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    for             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    gosub           reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    id              reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    let             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelRead      reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    end             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    loop            reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    wend            reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    return          reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    next            reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    sum             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    substraction    reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    multiplication  reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    division        reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    exponent        reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_equal        reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_not_equal    reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    and             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    or              reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    not             reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_than    reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_than       reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_parenthesis reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    to              reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_brackets  reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    step            reduce using rule 49 (value -> open_parenthesis arithmetic_expression close_parenthesis .)


state 119

    (55) ids_access -> open_parenthesis ids_access close_parenthesis .

    comma           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    let             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    not             reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 55 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 120

    (71) functions -> id open_parenthesis close_parenthesis .

    comma           reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    dim             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    let             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    sum             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    substraction    reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    division        reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    exponent        reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    and             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    or              reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    not             reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    less_than       reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    to              reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)
    step            reduce using rule 71 (functions -> id open_parenthesis close_parenthesis .)


state 121

    (72) functions -> id open_parenthesis arguments . close_parenthesis
    (75) arguments -> arguments . comma arguments

    close_parenthesis shift and go to state 142
    comma           shift and go to state 143


state 122

    (73) arguments -> ByVal . value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    value                          shift and go to state 144
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 123

    (74) arguments -> ByRef . id

    id              shift and go to state 145


state 124

    (52) ids_access -> id open_brackets arithmetic_expression . close_brackets
    (53) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 146


state 125

    (86) multiple_read -> multiple_read comma multiple_read .
    (86) multiple_read -> multiple_read . comma multiple_read

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    if              reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    while           reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    do              reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    for             reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    gosub           reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    id              reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    let             reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    dunkelPrint     reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    dunkelRead      reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    end             reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    loop            reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    wend            reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    return          reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    next            reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .)
    comma           shift and go to state 75

  ! comma           [ reduce using rule 86 (multiple_read -> multiple_read comma multiple_read .) ]


state 126

    (84) read -> dunkelRead string comma multiple_read .
    (86) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    let             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 84 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 75


state 127

    (61) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 147
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 128

    (62) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 148


state 129

    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 149


state 130

    (26) logic_expression -> open_parenthesis logic_expression close_parenthesis .

    close_parenthesis reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    and             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    or              reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    not             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_equal        reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    is_not_equal    reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_than    reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_than       reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dim             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 26 (logic_expression -> open_parenthesis logic_expression close_parenthesis .)


state 131

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then . inside_logic end if
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 150
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 132

    (24) logic_expression -> logic_expression logic_operand logic_expression .
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    dim             reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    if              reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    while           reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    do              reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    for             reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    gosub           reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    id              reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    let             reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    dunkelPrint     reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    dunkelRead      reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    end             reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    loop            reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    wend            reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    return          reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    next            reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .)
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

  ! and             [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! or              [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! not             [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_equal        [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_not_equal    [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_than    [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_than       [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 24 (logic_expression -> logic_expression logic_operand logic_expression .) ]

    logic_operand                  shift and go to state 88

state 133

    (23) logic_expression -> arithmetic_expression logic_operand arithmetic_expression .

    close_parenthesis reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    and             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    or              reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    not             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_equal        reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_not_equal    reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_than    reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_or_equal_than reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_than       reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_or_equal_than reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dim             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    if              reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    while           reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    do              reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    for             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    gosub           reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    id              reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    let             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dunkelPrint     reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    dunkelRead      reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    end             reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    loop            reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    wend            reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    return          reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    next            reduce using rule 23 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)


state 134

    (36) compared_to_bool -> arithmetic_expression is_equal bool_value .

    close_parenthesis reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    and             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    or              reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    not             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_equal        reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_not_equal    reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_than    reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_or_equal_than reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_than       reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_or_equal_than reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dim             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    if              reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    while           reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    do              reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    for             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    gosub           reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    id              reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    let             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dunkelPrint     reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    dunkelRead      reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    end             reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    loop            reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    wend            reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    return          reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    next            reduce using rule 36 (compared_to_bool -> arithmetic_expression is_equal bool_value .)


state 135

    (37) compared_to_bool -> arithmetic_expression is_not_equal bool_value .

    close_parenthesis reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    and             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    or              reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    not             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_equal        reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_not_equal    reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_than    reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_or_equal_than reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_than       reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_or_equal_than reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dim             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    if              reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    while           reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    do              reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    for             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    gosub           reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    id              reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    let             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dunkelPrint     reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    dunkelRead      reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    end             reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    loop            reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    wend            reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    return          reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    next            reduce using rule 37 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)


state 136

    (41) arithmetic_expression -> value arithmetic_operand value .

    is_equal        reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    is_not_equal    reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    and             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    or              reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    not             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    greater_than    reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    greater_or_equal_than reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    less_than       reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    less_or_equal_than reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    close_parenthesis reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    dim             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    if              reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    while           reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    do              reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    for             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    gosub           reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    id              reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    let             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelPrint     reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelRead      reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    end             reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    loop            reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    wend            reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    return          reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    next            reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    to              reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    close_brackets  reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)
    step            reduce using rule 41 (arithmetic_expression -> value arithmetic_operand value .)


state 137

    (38) compared_to_bool -> bool_value is_equal arithmetic_expression .

    close_parenthesis reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    and             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    or              reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    not             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_equal        reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_not_equal    reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_than    reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_than       reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dim             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    if              reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    while           reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    do              reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    for             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    gosub           reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    id              reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    let             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dunkelPrint     reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    dunkelRead      reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    end             reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    loop            reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    wend            reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    return          reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    next            reduce using rule 38 (compared_to_bool -> bool_value is_equal arithmetic_expression .)


state 138

    (39) compared_to_bool -> bool_value is_not_equal arithmetic_expression .

    close_parenthesis reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    and             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    or              reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    not             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_equal        reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_not_equal    reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_than    reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_than       reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dim             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    if              reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    while           reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    do              reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    for             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    gosub           reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    id              reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    let             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dunkelPrint     reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    dunkelRead      reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    end             reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    loop            reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    wend            reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    return          reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    next            reduce using rule 39 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)


state 139

    (18) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 151


state 140

    (19) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (21) logic_expression -> . arithmetic_expression
    (22) logic_expression -> . compared_to_bool
    (23) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (24) logic_expression -> . logic_expression logic_operand logic_expression
    (25) logic_expression -> . not logic_expression
    (26) logic_expression -> . open_parenthesis logic_expression close_parenthesis
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (36) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (37) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (38) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (39) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    not             shift and go to state 59
    open_parenthesis shift and go to state 55
    bool_value      shift and go to state 61
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    logic_expression               shift and go to state 152
    arithmetic_expression          shift and go to state 57
    compared_to_bool               shift and go to state 58
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 141

    (20) loops -> for id equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 153
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 142

    (72) functions -> id open_parenthesis arguments close_parenthesis .

    comma           reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    dim             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    if              reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    while           reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    do              reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    for             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    gosub           reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    id              reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    let             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelPrint     reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelRead      reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    end             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    loop            reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    wend            reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    return          reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    next            reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    sum             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    substraction    reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    multiplication  reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    division        reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    exponent        reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_equal        reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_not_equal    reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    and             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    or              reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    not             reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_than    reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_or_equal_than reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_than       reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_or_equal_than reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_parenthesis reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    to              reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_brackets  reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)
    step            reduce using rule 72 (functions -> id open_parenthesis arguments close_parenthesis .)


state 143

    (75) arguments -> arguments comma . arguments
    (73) arguments -> . ByVal value
    (74) arguments -> . ByRef id
    (75) arguments -> . arguments comma arguments

    ByVal           shift and go to state 122
    ByRef           shift and go to state 123

    arguments                      shift and go to state 154

state 144

    (73) arguments -> ByVal value .

    close_parenthesis reduce using rule 73 (arguments -> ByVal value .)
    comma           reduce using rule 73 (arguments -> ByVal value .)


state 145

    (74) arguments -> ByRef id .

    close_parenthesis reduce using rule 74 (arguments -> ByRef id .)
    comma           reduce using rule 74 (arguments -> ByRef id .)


state 146

    (52) ids_access -> id open_brackets arithmetic_expression close_brackets .
    (53) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets
    (54) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 52 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 155


state 147

    (61) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 156


state 148

    (62) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (69) parameters -> . variable
    (70) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 157
    dim             shift and go to state 9

    parameters                     shift and go to state 158
    variable                       shift and go to state 159

state 149

    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 160


state 150

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic . end if

    end             shift and go to state 161


state 151

    (18) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    let             reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 18 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 152

    (19) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (24) logic_expression -> logic_expression . logic_operand logic_expression
    (27) logic_operand -> . and
    (28) logic_operand -> . or
    (29) logic_operand -> . not
    (30) logic_operand -> . is_equal
    (31) logic_operand -> . is_not_equal
    (32) logic_operand -> . greater_than
    (33) logic_operand -> . greater_or_equal_than
    (34) logic_operand -> . less_than
    (35) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 162
    and             shift and go to state 89
    or              shift and go to state 90
    not             shift and go to state 91
    is_equal        shift and go to state 92
    is_not_equal    shift and go to state 93
    greater_than    shift and go to state 94
    greater_or_equal_than shift and go to state 95
    less_than       shift and go to state 96
    less_or_equal_than shift and go to state 97

    logic_operand                  shift and go to state 88

state 153

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id

    step            shift and go to state 163


state 154

    (75) arguments -> arguments comma arguments .
    (75) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 75 (arguments -> arguments comma arguments .)
    comma           shift and go to state 143

  ! comma           [ reduce using rule 75 (arguments -> arguments comma arguments .) ]


state 155

    (53) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 164
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 156

    (61) subroutines -> sub procedure id inside_logic return . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

    sub             shift and go to state 52
    $end            reduce using rule 66 (subroutines -> .)

    subroutines                    shift and go to state 165

state 157

    (62) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (64) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 167
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 166
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 158

    (63) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (70) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 168
    comma           shift and go to state 169


state 159

    (69) parameters -> variable .

    close_parenthesis reduce using rule 69 (parameters -> variable .)
    comma           reduce using rule 69 (parameters -> variable .)


state 160

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    let             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 170


state 161

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end . if

    if              shift and go to state 171


state 162

    (19) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    let             reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 19 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 163

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 172
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 164

    (53) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets
    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 173


state 165

    (61) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 61 (subroutines -> sub procedure id inside_logic return subroutines .)


state 166

    (62) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 174


state 167

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 81
    float           shift and go to state 82
    bool            shift and go to state 83

    variable_type                  shift and go to state 175

state 168

    (63) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 177
    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 176
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 169

    (70) parameters -> parameters comma . parameters
    (69) parameters -> . variable
    (70) parameters -> . parameters comma parameters
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 9

    parameters                     shift and go to state 178
    variable                       shift and go to state 159

state 170

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 179


state 171

    (17) conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .

    dim             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    if              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    while           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    do              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    for             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    gosub           reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    id              reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    let             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelPrint     reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    dunkelRead      reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    end             reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    loop            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    wend            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    return          reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)
    next            reduce using rule 17 (conditions -> if open_parenthesis logic_expression close_parenthesis then inside_logic end if .)


state 172

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 180
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 173

    (53) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .
    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 53 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 181


state 174

    (62) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 182


state 175

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 183
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 176

    (63) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 184


state 177

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (14) variable_type -> . word
    (15) variable_type -> . float
    (16) variable_type -> . bool

    word            shift and go to state 81
    float           shift and go to state 82
    bool            shift and go to state 83

    variable_type                  shift and go to state 185

state 178

    (70) parameters -> parameters comma parameters .
    (70) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 70 (parameters -> parameters comma parameters .)
    comma           shift and go to state 169

  ! comma           [ reduce using rule 70 (parameters -> parameters comma parameters .) ]


state 179

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 186


state 180

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 187


state 181

    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (40) arithmetic_expression -> . value
    (41) arithmetic_expression -> . value arithmetic_operand value
    (47) value -> . real_value
    (48) value -> . functions
    (49) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (50) value -> . ids_access
    (56) real_value -> . word_value
    (57) real_value -> . float_value
    (58) real_value -> . id
    (71) functions -> . id open_parenthesis close_parenthesis
    (72) functions -> . id open_parenthesis arguments close_parenthesis
    (51) ids_access -> . id
    (52) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (53) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (54) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 113
    word_value      shift and go to state 43
    float_value     shift and go to state 44
    id              shift and go to state 45

    arithmetic_expression          shift and go to state 188
    value                          shift and go to state 60
    real_value                     shift and go to state 40
    functions                      shift and go to state 41
    ids_access                     shift and go to state 42

state 182

    (62) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

    sub             shift and go to state 52
    $end            reduce using rule 66 (subroutines -> .)

    subroutines                    shift and go to state 189

state 183

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 190


state 184

    (63) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 191


state 185

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> . assign inside_logic
    (9) inside_logic -> .
    (10) variable -> . dim id as variable_type
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (17) conditions -> . if open_parenthesis logic_expression close_parenthesis then inside_logic end if
    (18) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (19) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (20) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (59) calls -> . gosub id
    (60) calls -> . id open_parenthesis close_parenthesis
    (76) read_or_write -> . print
    (77) read_or_write -> . read
    (67) assign -> . let id equals logic_expression
    (68) assign -> . let id equals arithmetic_expression
    (78) print -> . dunkelPrint multiple_print
    (79) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (83) read -> . dunkelRead multiple_read
    (84) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 9 (inside_logic -> .)
    dim             shift and go to state 9
    if              shift and go to state 11
    while           shift and go to state 12
    do              shift and go to state 13
    for             shift and go to state 14
    gosub           shift and go to state 15
    id              shift and go to state 10
    let             shift and go to state 18
    dunkelPrint     shift and go to state 19
    dunkelRead      shift and go to state 20

    inside_logic                   shift and go to state 192
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    assign                         shift and go to state 8
    print                          shift and go to state 16
    read                           shift and go to state 17

state 186

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 193


state 187

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 194


state 188

    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets

    close_brackets  shift and go to state 195


state 189

    (62) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 62 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 190

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 196


state 191

    (63) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

    sub             shift and go to state 52
    $end            reduce using rule 66 (subroutines -> .)

    subroutines                    shift and go to state 197

state 192

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 198


state 193

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 199


state 194

    (20) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    let             reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 20 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 195

    (54) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .

    comma           reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    let             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 54 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)


state 196

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

    sub             shift and go to state 52
    $end            reduce using rule 66 (subroutines -> .)

    subroutines                    shift and go to state 200

state 197

    (63) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 63 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 198

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 201


state 199

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 202


state 200

    (64) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 64 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 201

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (61) subroutines -> . sub procedure id inside_logic return subroutines
    (62) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (63) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (64) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (65) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (66) subroutines -> .

    sub             shift and go to state 52
    $end            reduce using rule 66 (subroutines -> .)

    subroutines                    shift and go to state 203

state 202

    (13) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    let             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 13 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 203

    (65) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 65 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for is_equal in state 57 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 57 resolved as shift
WARNING: shift/reduce conflict for and in state 57 resolved as shift
WARNING: shift/reduce conflict for or in state 57 resolved as shift
WARNING: shift/reduce conflict for not in state 57 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 57 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 57 resolved as shift
WARNING: shift/reduce conflict for less_than in state 57 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 57 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 70 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 86 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 86 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 86 resolved as shift
WARNING: shift/reduce conflict for and in state 86 resolved as shift
WARNING: shift/reduce conflict for or in state 86 resolved as shift
WARNING: shift/reduce conflict for not in state 86 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 86 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 86 resolved as shift
WARNING: shift/reduce conflict for less_than in state 86 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 86 resolved as shift
WARNING: shift/reduce conflict for and in state 101 resolved as shift
WARNING: shift/reduce conflict for or in state 101 resolved as shift
WARNING: shift/reduce conflict for not in state 101 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 101 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 101 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 101 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 101 resolved as shift
WARNING: shift/reduce conflict for less_than in state 101 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 101 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for and in state 115 resolved as shift
WARNING: shift/reduce conflict for or in state 115 resolved as shift
WARNING: shift/reduce conflict for not in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for comma in state 116 resolved as shift
WARNING: shift/reduce conflict for comma in state 125 resolved as shift
WARNING: shift/reduce conflict for and in state 132 resolved as shift
WARNING: shift/reduce conflict for or in state 132 resolved as shift
WARNING: shift/reduce conflict for not in state 132 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 132 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 132 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 132 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 132 resolved as shift
WARNING: shift/reduce conflict for less_than in state 132 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 132 resolved as shift
WARNING: shift/reduce conflict for comma in state 154 resolved as shift
WARNING: shift/reduce conflict for comma in state 178 resolved as shift
WARNING: reduce/reduce conflict in state 21 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 45 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 45
WARNING: reduce/reduce conflict in state 71 resolved using rule (arithmetic_expression -> value)
WARNING: rejected rule (multiple_print -> value) in state 71
WARNING: reduce/reduce conflict in state 72 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 72
WARNING: reduce/reduce conflict in state 115 resolved using rule (logic_expression -> arithmetic_expression)
WARNING: rejected rule (assign -> let id equals arithmetic_expression) in state 115
WARNING: Rule (real_value -> id) is never reduced
WARNING: Rule (assign -> let id equals arithmetic_expression) is never reduced
