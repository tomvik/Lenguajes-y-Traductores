Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    close_braces
    colon
    dunkelCls
    else
    elsif
    end_if
    exit
    false
    goto
    let
    open_braces
    result
    semicolon
    then
    true

Grammar

Rule 0     S' -> program
Rule 1     program -> inside_logic end
Rule 2     program -> inside_logic end subroutines
Rule 3     inside_logic -> variable inside_logic
Rule 4     inside_logic -> conditions inside_logic
Rule 5     inside_logic -> loops inside_logic
Rule 6     inside_logic -> calls inside_logic
Rule 7     inside_logic -> read_or_write inside_logic
Rule 8     inside_logic -> <empty>
Rule 9     variable -> dim id as variable_type
Rule 10    variable -> dim id as variable_type open_brackets word_value close_brackets
Rule 11    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 12    variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
Rule 13    variable_type -> word
Rule 14    variable_type -> float
Rule 15    variable_type -> bool
Rule 16    conditions -> if
Rule 17    loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend
Rule 18    loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis
Rule 19    loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
Rule 20    logic_expression -> arithmetic_expression
Rule 21    logic_expression -> compared_to_bool
Rule 22    logic_expression -> arithmetic_expression logic_operand arithmetic_expression
Rule 23    logic_expression -> logic_expression logic_operand logic_expression
Rule 24    logic_operand -> and
Rule 25    logic_operand -> or
Rule 26    logic_operand -> not
Rule 27    logic_operand -> is_equal
Rule 28    logic_operand -> is_not_equal
Rule 29    logic_operand -> greater_than
Rule 30    logic_operand -> greater_or_equal_than
Rule 31    logic_operand -> less_than
Rule 32    logic_operand -> less_or_equal_than
Rule 33    compared_to_bool -> arithmetic_expression is_equal bool_value
Rule 34    compared_to_bool -> arithmetic_expression is_not_equal bool_value
Rule 35    compared_to_bool -> bool_value is_equal arithmetic_expression
Rule 36    compared_to_bool -> bool_value is_not_equal arithmetic_expression
Rule 37    arithmetic_expression -> value
Rule 38    arithmetic_expression -> value arithmetic_operand value
Rule 39    arithmetic_operand -> sum
Rule 40    arithmetic_operand -> substraction
Rule 41    arithmetic_operand -> multiplication
Rule 42    arithmetic_operand -> division
Rule 43    arithmetic_operand -> exponent
Rule 44    value -> real_value
Rule 45    value -> functions
Rule 46    value -> open_parenthesis arithmetic_expression close_parenthesis
Rule 47    value -> ids_access
Rule 48    ids_access -> id
Rule 49    ids_access -> id open_brackets arithmetic_expression close_brackets
Rule 50    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 51    ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
Rule 52    ids_access -> open_parenthesis ids_access close_parenthesis
Rule 53    real_value -> word_value
Rule 54    real_value -> float_value
Rule 55    real_value -> id
Rule 56    calls -> gosub id
Rule 57    calls -> id open_parenthesis close_parenthesis
Rule 58    subroutines -> sub procedure id inside_logic return subroutines
Rule 59    subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
Rule 60    subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
Rule 61    subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
Rule 62    subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
Rule 63    subroutines -> <empty>
Rule 64    parameters -> variable
Rule 65    parameters -> parameters comma parameters
Rule 66    functions -> id open_parenthesis close_parenthesis
Rule 67    functions -> id open_parenthesis arguments close_parenthesis
Rule 68    arguments -> ByVal value
Rule 69    arguments -> ByRef id
Rule 70    arguments -> arguments comma arguments
Rule 71    read_or_write -> print
Rule 72    read_or_write -> read
Rule 73    print -> dunkelPrint multiple_print
Rule 74    print -> dunkelPrint open_parenthesis multiple_print close_parenthesis
Rule 75    multiple_print -> string
Rule 76    multiple_print -> value
Rule 77    multiple_print -> multiple_print comma multiple_print
Rule 78    read -> dunkelRead multiple_read
Rule 79    read -> dunkelRead string comma multiple_read
Rule 80    multiple_read -> ids_access
Rule 81    multiple_read -> multiple_read comma multiple_read

Terminals, with rules where they appear

ByRef                : 69
ByVal                : 68
and                  : 24
as                   : 9 10 11 12 61 62
bool                 : 15
bool_value           : 33 34 35 36
close_braces         : 
close_brackets       : 10 11 11 12 12 12 49 50 50 51 51 51
close_parenthesis    : 17 18 46 52 57 59 60 61 62 66 67 74
colon                : 
comma                : 65 70 77 79 81
dim                  : 9 10 11 12
division             : 42
do                   : 18
dunkelCls            : 
dunkelPrint          : 73 74
dunkelRead           : 78 79
else                 : 
elsif                : 
end                  : 1 2 59 60 61 62
end_if               : 
equals               : 19
error                : 
exit                 : 
exponent             : 43
false                : 
float                : 14
float_value          : 54
for                  : 19
function             : 59 60 61 62
gosub                : 56
goto                 : 
greater_or_equal_than : 30
greater_than         : 29
id                   : 9 10 11 12 19 19 48 49 50 51 55 56 57 58 59 60 61 62 66 67 69
if                   : 16
is_equal             : 27 33 35
is_not_equal         : 28 34 36
less_or_equal_than   : 32
less_than            : 31
let                  : 
loop                 : 18
multiplication       : 41
next                 : 19
not                  : 26
open_braces          : 
open_brackets        : 10 11 11 12 12 12 49 50 50 51 51 51
open_parenthesis     : 17 18 46 52 57 59 60 61 62 66 67 74
or                   : 25
procedure            : 58
result               : 
return               : 58
semicolon            : 
step                 : 19
string               : 75 79
sub                  : 58 59 59 60 60 61 61 62 62
substraction         : 40
sum                  : 39
then                 : 
to                   : 19
true                 : 
until                : 18
wend                 : 17
while                : 17
word                 : 13
word_value           : 10 11 11 12 12 12 53

Nonterminals, with rules where they appear

arguments            : 67 70 70
arithmetic_expression : 19 19 19 20 22 22 33 34 35 36 46 49 50 50 51 51 51
arithmetic_operand   : 38
calls                : 6
compared_to_bool     : 21
conditions           : 4
functions            : 45
ids_access           : 47 52 80
inside_logic         : 1 2 3 4 5 6 7 17 18 19 58 59 60 61 62
logic_expression     : 17 18 23 23
logic_operand        : 22 23
loops                : 5
multiple_print       : 73 74 77 77
multiple_read        : 78 79 81 81
parameters           : 60 62 65 65
print                : 71
program              : 0
read                 : 72
read_or_write        : 7
real_value           : 44
subroutines          : 2 58 59 60 61 62
value                : 37 38 38 68 76
variable             : 3 64
variable_type        : 9 10 11 12 61 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . inside_logic end
    (2) program -> . inside_logic end subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    program                        shift and go to state 1
    inside_logic                   shift and go to state 2
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> inside_logic . end
    (2) program -> inside_logic . end subroutines

    end             shift and go to state 19


state 3

    (3) inside_logic -> variable . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    loop            reduce using rule 8 (inside_logic -> .)
    wend            reduce using rule 8 (inside_logic -> .)
    return          reduce using rule 8 (inside_logic -> .)
    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    variable                       shift and go to state 3
    inside_logic                   shift and go to state 20
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 4

    (4) inside_logic -> conditions . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    loop            reduce using rule 8 (inside_logic -> .)
    wend            reduce using rule 8 (inside_logic -> .)
    return          reduce using rule 8 (inside_logic -> .)
    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    conditions                     shift and go to state 4
    inside_logic                   shift and go to state 21
    variable                       shift and go to state 3
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 5

    (5) inside_logic -> loops . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    loop            reduce using rule 8 (inside_logic -> .)
    wend            reduce using rule 8 (inside_logic -> .)
    return          reduce using rule 8 (inside_logic -> .)
    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    loops                          shift and go to state 5
    inside_logic                   shift and go to state 22
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 6

    (6) inside_logic -> calls . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    loop            reduce using rule 8 (inside_logic -> .)
    wend            reduce using rule 8 (inside_logic -> .)
    return          reduce using rule 8 (inside_logic -> .)
    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    calls                          shift and go to state 6
    inside_logic                   shift and go to state 23
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 7

    (7) inside_logic -> read_or_write . inside_logic
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    loop            reduce using rule 8 (inside_logic -> .)
    wend            reduce using rule 8 (inside_logic -> .)
    return          reduce using rule 8 (inside_logic -> .)
    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    read_or_write                  shift and go to state 7
    inside_logic                   shift and go to state 24
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    print                          shift and go to state 15
    read                           shift and go to state 16

state 8

    (9) variable -> dim . id as variable_type
    (10) variable -> dim . id as variable_type open_brackets word_value close_brackets
    (11) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> dim . id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    id              shift and go to state 25


state 9

    (57) calls -> id . open_parenthesis close_parenthesis

    open_parenthesis shift and go to state 26


state 10

    (16) conditions -> if .

    dim             reduce using rule 16 (conditions -> if .)
    if              reduce using rule 16 (conditions -> if .)
    while           reduce using rule 16 (conditions -> if .)
    do              reduce using rule 16 (conditions -> if .)
    for             reduce using rule 16 (conditions -> if .)
    gosub           reduce using rule 16 (conditions -> if .)
    id              reduce using rule 16 (conditions -> if .)
    dunkelPrint     reduce using rule 16 (conditions -> if .)
    dunkelRead      reduce using rule 16 (conditions -> if .)
    end             reduce using rule 16 (conditions -> if .)
    loop            reduce using rule 16 (conditions -> if .)
    wend            reduce using rule 16 (conditions -> if .)
    return          reduce using rule 16 (conditions -> if .)
    next            reduce using rule 16 (conditions -> if .)


state 11

    (17) loops -> while . open_parenthesis logic_expression close_parenthesis inside_logic wend

    open_parenthesis shift and go to state 27


state 12

    (18) loops -> do . inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    loop            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 28
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 13

    (19) loops -> for . id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    id              shift and go to state 29


state 14

    (56) calls -> gosub . id

    id              shift and go to state 30


state 15

    (71) read_or_write -> print .

    dim             reduce using rule 71 (read_or_write -> print .)
    if              reduce using rule 71 (read_or_write -> print .)
    while           reduce using rule 71 (read_or_write -> print .)
    do              reduce using rule 71 (read_or_write -> print .)
    for             reduce using rule 71 (read_or_write -> print .)
    gosub           reduce using rule 71 (read_or_write -> print .)
    id              reduce using rule 71 (read_or_write -> print .)
    dunkelPrint     reduce using rule 71 (read_or_write -> print .)
    dunkelRead      reduce using rule 71 (read_or_write -> print .)
    end             reduce using rule 71 (read_or_write -> print .)
    loop            reduce using rule 71 (read_or_write -> print .)
    wend            reduce using rule 71 (read_or_write -> print .)
    return          reduce using rule 71 (read_or_write -> print .)
    next            reduce using rule 71 (read_or_write -> print .)


state 16

    (72) read_or_write -> read .

    dim             reduce using rule 72 (read_or_write -> read .)
    if              reduce using rule 72 (read_or_write -> read .)
    while           reduce using rule 72 (read_or_write -> read .)
    do              reduce using rule 72 (read_or_write -> read .)
    for             reduce using rule 72 (read_or_write -> read .)
    gosub           reduce using rule 72 (read_or_write -> read .)
    id              reduce using rule 72 (read_or_write -> read .)
    dunkelPrint     reduce using rule 72 (read_or_write -> read .)
    dunkelRead      reduce using rule 72 (read_or_write -> read .)
    end             reduce using rule 72 (read_or_write -> read .)
    loop            reduce using rule 72 (read_or_write -> read .)
    wend            reduce using rule 72 (read_or_write -> read .)
    return          reduce using rule 72 (read_or_write -> read .)
    next            reduce using rule 72 (read_or_write -> read .)


state 17

    (73) print -> dunkelPrint . multiple_print
    (74) print -> dunkelPrint . open_parenthesis multiple_print close_parenthesis
    (75) multiple_print -> . string
    (76) multiple_print -> . value
    (77) multiple_print -> . multiple_print comma multiple_print
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 32
    string          shift and go to state 33
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    multiple_print                 shift and go to state 31
    value                          shift and go to state 34
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 18

    (78) read -> dunkelRead . multiple_read
    (79) read -> dunkelRead . string comma multiple_read
    (80) multiple_read -> . ids_access
    (81) multiple_read -> . multiple_read comma multiple_read
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 42
    id              shift and go to state 44
    open_parenthesis shift and go to state 45

    multiple_read                  shift and go to state 41
    ids_access                     shift and go to state 43

state 19

    (1) program -> inside_logic end .
    (2) program -> inside_logic end . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> inside_logic end .)
    $end            reduce using rule 1 (program -> inside_logic end .)
    sub             shift and go to state 47

  ! $end            [ reduce using rule 63 (subroutines -> .) ]

    subroutines                    shift and go to state 46

state 20

    (3) inside_logic -> variable inside_logic .

    end             reduce using rule 3 (inside_logic -> variable inside_logic .)
    loop            reduce using rule 3 (inside_logic -> variable inside_logic .)
    wend            reduce using rule 3 (inside_logic -> variable inside_logic .)
    return          reduce using rule 3 (inside_logic -> variable inside_logic .)
    next            reduce using rule 3 (inside_logic -> variable inside_logic .)


state 21

    (4) inside_logic -> conditions inside_logic .

    end             reduce using rule 4 (inside_logic -> conditions inside_logic .)
    loop            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    wend            reduce using rule 4 (inside_logic -> conditions inside_logic .)
    return          reduce using rule 4 (inside_logic -> conditions inside_logic .)
    next            reduce using rule 4 (inside_logic -> conditions inside_logic .)


state 22

    (5) inside_logic -> loops inside_logic .

    end             reduce using rule 5 (inside_logic -> loops inside_logic .)
    loop            reduce using rule 5 (inside_logic -> loops inside_logic .)
    wend            reduce using rule 5 (inside_logic -> loops inside_logic .)
    return          reduce using rule 5 (inside_logic -> loops inside_logic .)
    next            reduce using rule 5 (inside_logic -> loops inside_logic .)


state 23

    (6) inside_logic -> calls inside_logic .

    end             reduce using rule 6 (inside_logic -> calls inside_logic .)
    loop            reduce using rule 6 (inside_logic -> calls inside_logic .)
    wend            reduce using rule 6 (inside_logic -> calls inside_logic .)
    return          reduce using rule 6 (inside_logic -> calls inside_logic .)
    next            reduce using rule 6 (inside_logic -> calls inside_logic .)


state 24

    (7) inside_logic -> read_or_write inside_logic .

    end             reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    loop            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    wend            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    return          reduce using rule 7 (inside_logic -> read_or_write inside_logic .)
    next            reduce using rule 7 (inside_logic -> read_or_write inside_logic .)


state 25

    (9) variable -> dim id . as variable_type
    (10) variable -> dim id . as variable_type open_brackets word_value close_brackets
    (11) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> dim id . as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    as              shift and go to state 48


state 26

    (57) calls -> id open_parenthesis . close_parenthesis

    close_parenthesis shift and go to state 49


state 27

    (17) loops -> while open_parenthesis . logic_expression close_parenthesis inside_logic wend
    (20) logic_expression -> . arithmetic_expression
    (21) logic_expression -> . compared_to_bool
    (22) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (23) logic_expression -> . logic_expression logic_operand logic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (33) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (34) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (35) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (36) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 55
    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    logic_expression               shift and go to state 51
    arithmetic_expression          shift and go to state 52
    compared_to_bool               shift and go to state 53
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 28

    (18) loops -> do inside_logic . loop until open_parenthesis logic_expression close_parenthesis

    loop            shift and go to state 56


state 29

    (19) loops -> for id . equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id

    equals          shift and go to state 57


state 30

    (56) calls -> gosub id .

    dim             reduce using rule 56 (calls -> gosub id .)
    if              reduce using rule 56 (calls -> gosub id .)
    while           reduce using rule 56 (calls -> gosub id .)
    do              reduce using rule 56 (calls -> gosub id .)
    for             reduce using rule 56 (calls -> gosub id .)
    gosub           reduce using rule 56 (calls -> gosub id .)
    id              reduce using rule 56 (calls -> gosub id .)
    dunkelPrint     reduce using rule 56 (calls -> gosub id .)
    dunkelRead      reduce using rule 56 (calls -> gosub id .)
    end             reduce using rule 56 (calls -> gosub id .)
    loop            reduce using rule 56 (calls -> gosub id .)
    wend            reduce using rule 56 (calls -> gosub id .)
    return          reduce using rule 56 (calls -> gosub id .)
    next            reduce using rule 56 (calls -> gosub id .)


state 31

    (73) print -> dunkelPrint multiple_print .
    (77) multiple_print -> multiple_print . comma multiple_print

    dim             reduce using rule 73 (print -> dunkelPrint multiple_print .)
    if              reduce using rule 73 (print -> dunkelPrint multiple_print .)
    while           reduce using rule 73 (print -> dunkelPrint multiple_print .)
    do              reduce using rule 73 (print -> dunkelPrint multiple_print .)
    for             reduce using rule 73 (print -> dunkelPrint multiple_print .)
    gosub           reduce using rule 73 (print -> dunkelPrint multiple_print .)
    id              reduce using rule 73 (print -> dunkelPrint multiple_print .)
    dunkelPrint     reduce using rule 73 (print -> dunkelPrint multiple_print .)
    dunkelRead      reduce using rule 73 (print -> dunkelPrint multiple_print .)
    end             reduce using rule 73 (print -> dunkelPrint multiple_print .)
    loop            reduce using rule 73 (print -> dunkelPrint multiple_print .)
    wend            reduce using rule 73 (print -> dunkelPrint multiple_print .)
    return          reduce using rule 73 (print -> dunkelPrint multiple_print .)
    next            reduce using rule 73 (print -> dunkelPrint multiple_print .)
    comma           shift and go to state 58


state 32

    (74) print -> dunkelPrint open_parenthesis . multiple_print close_parenthesis
    (46) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (52) ids_access -> open_parenthesis . ids_access close_parenthesis
    (75) multiple_print -> . string
    (76) multiple_print -> . value
    (77) multiple_print -> . multiple_print comma multiple_print
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis

    string          shift and go to state 33
    id              shift and go to state 64
    open_parenthesis shift and go to state 59
    word_value      shift and go to state 38
    float_value     shift and go to state 39

    multiple_print                 shift and go to state 60
    arithmetic_expression          shift and go to state 61
    ids_access                     shift and go to state 62
    value                          shift and go to state 63
    real_value                     shift and go to state 35
    functions                      shift and go to state 36

state 33

    (75) multiple_print -> string .

    comma           reduce using rule 75 (multiple_print -> string .)
    dim             reduce using rule 75 (multiple_print -> string .)
    if              reduce using rule 75 (multiple_print -> string .)
    while           reduce using rule 75 (multiple_print -> string .)
    do              reduce using rule 75 (multiple_print -> string .)
    for             reduce using rule 75 (multiple_print -> string .)
    gosub           reduce using rule 75 (multiple_print -> string .)
    id              reduce using rule 75 (multiple_print -> string .)
    dunkelPrint     reduce using rule 75 (multiple_print -> string .)
    dunkelRead      reduce using rule 75 (multiple_print -> string .)
    end             reduce using rule 75 (multiple_print -> string .)
    loop            reduce using rule 75 (multiple_print -> string .)
    wend            reduce using rule 75 (multiple_print -> string .)
    return          reduce using rule 75 (multiple_print -> string .)
    next            reduce using rule 75 (multiple_print -> string .)
    close_parenthesis reduce using rule 75 (multiple_print -> string .)


state 34

    (76) multiple_print -> value .

    comma           reduce using rule 76 (multiple_print -> value .)
    dim             reduce using rule 76 (multiple_print -> value .)
    if              reduce using rule 76 (multiple_print -> value .)
    while           reduce using rule 76 (multiple_print -> value .)
    do              reduce using rule 76 (multiple_print -> value .)
    for             reduce using rule 76 (multiple_print -> value .)
    gosub           reduce using rule 76 (multiple_print -> value .)
    id              reduce using rule 76 (multiple_print -> value .)
    dunkelPrint     reduce using rule 76 (multiple_print -> value .)
    dunkelRead      reduce using rule 76 (multiple_print -> value .)
    end             reduce using rule 76 (multiple_print -> value .)
    loop            reduce using rule 76 (multiple_print -> value .)
    wend            reduce using rule 76 (multiple_print -> value .)
    return          reduce using rule 76 (multiple_print -> value .)
    next            reduce using rule 76 (multiple_print -> value .)
    close_parenthesis reduce using rule 76 (multiple_print -> value .)


state 35

    (44) value -> real_value .

    comma           reduce using rule 44 (value -> real_value .)
    dim             reduce using rule 44 (value -> real_value .)
    if              reduce using rule 44 (value -> real_value .)
    while           reduce using rule 44 (value -> real_value .)
    do              reduce using rule 44 (value -> real_value .)
    for             reduce using rule 44 (value -> real_value .)
    gosub           reduce using rule 44 (value -> real_value .)
    id              reduce using rule 44 (value -> real_value .)
    dunkelPrint     reduce using rule 44 (value -> real_value .)
    dunkelRead      reduce using rule 44 (value -> real_value .)
    end             reduce using rule 44 (value -> real_value .)
    loop            reduce using rule 44 (value -> real_value .)
    wend            reduce using rule 44 (value -> real_value .)
    return          reduce using rule 44 (value -> real_value .)
    next            reduce using rule 44 (value -> real_value .)
    sum             reduce using rule 44 (value -> real_value .)
    substraction    reduce using rule 44 (value -> real_value .)
    multiplication  reduce using rule 44 (value -> real_value .)
    division        reduce using rule 44 (value -> real_value .)
    exponent        reduce using rule 44 (value -> real_value .)
    is_equal        reduce using rule 44 (value -> real_value .)
    is_not_equal    reduce using rule 44 (value -> real_value .)
    and             reduce using rule 44 (value -> real_value .)
    or              reduce using rule 44 (value -> real_value .)
    not             reduce using rule 44 (value -> real_value .)
    greater_than    reduce using rule 44 (value -> real_value .)
    greater_or_equal_than reduce using rule 44 (value -> real_value .)
    less_than       reduce using rule 44 (value -> real_value .)
    less_or_equal_than reduce using rule 44 (value -> real_value .)
    close_parenthesis reduce using rule 44 (value -> real_value .)
    to              reduce using rule 44 (value -> real_value .)
    close_brackets  reduce using rule 44 (value -> real_value .)
    step            reduce using rule 44 (value -> real_value .)


state 36

    (45) value -> functions .

    comma           reduce using rule 45 (value -> functions .)
    dim             reduce using rule 45 (value -> functions .)
    if              reduce using rule 45 (value -> functions .)
    while           reduce using rule 45 (value -> functions .)
    do              reduce using rule 45 (value -> functions .)
    for             reduce using rule 45 (value -> functions .)
    gosub           reduce using rule 45 (value -> functions .)
    id              reduce using rule 45 (value -> functions .)
    dunkelPrint     reduce using rule 45 (value -> functions .)
    dunkelRead      reduce using rule 45 (value -> functions .)
    end             reduce using rule 45 (value -> functions .)
    loop            reduce using rule 45 (value -> functions .)
    wend            reduce using rule 45 (value -> functions .)
    return          reduce using rule 45 (value -> functions .)
    next            reduce using rule 45 (value -> functions .)
    sum             reduce using rule 45 (value -> functions .)
    substraction    reduce using rule 45 (value -> functions .)
    multiplication  reduce using rule 45 (value -> functions .)
    division        reduce using rule 45 (value -> functions .)
    exponent        reduce using rule 45 (value -> functions .)
    is_equal        reduce using rule 45 (value -> functions .)
    is_not_equal    reduce using rule 45 (value -> functions .)
    and             reduce using rule 45 (value -> functions .)
    or              reduce using rule 45 (value -> functions .)
    not             reduce using rule 45 (value -> functions .)
    greater_than    reduce using rule 45 (value -> functions .)
    greater_or_equal_than reduce using rule 45 (value -> functions .)
    less_than       reduce using rule 45 (value -> functions .)
    less_or_equal_than reduce using rule 45 (value -> functions .)
    close_parenthesis reduce using rule 45 (value -> functions .)
    to              reduce using rule 45 (value -> functions .)
    close_brackets  reduce using rule 45 (value -> functions .)
    step            reduce using rule 45 (value -> functions .)


state 37

    (47) value -> ids_access .

    comma           reduce using rule 47 (value -> ids_access .)
    dim             reduce using rule 47 (value -> ids_access .)
    if              reduce using rule 47 (value -> ids_access .)
    while           reduce using rule 47 (value -> ids_access .)
    do              reduce using rule 47 (value -> ids_access .)
    for             reduce using rule 47 (value -> ids_access .)
    gosub           reduce using rule 47 (value -> ids_access .)
    id              reduce using rule 47 (value -> ids_access .)
    dunkelPrint     reduce using rule 47 (value -> ids_access .)
    dunkelRead      reduce using rule 47 (value -> ids_access .)
    end             reduce using rule 47 (value -> ids_access .)
    loop            reduce using rule 47 (value -> ids_access .)
    wend            reduce using rule 47 (value -> ids_access .)
    return          reduce using rule 47 (value -> ids_access .)
    next            reduce using rule 47 (value -> ids_access .)
    sum             reduce using rule 47 (value -> ids_access .)
    substraction    reduce using rule 47 (value -> ids_access .)
    multiplication  reduce using rule 47 (value -> ids_access .)
    division        reduce using rule 47 (value -> ids_access .)
    exponent        reduce using rule 47 (value -> ids_access .)
    is_equal        reduce using rule 47 (value -> ids_access .)
    is_not_equal    reduce using rule 47 (value -> ids_access .)
    and             reduce using rule 47 (value -> ids_access .)
    or              reduce using rule 47 (value -> ids_access .)
    not             reduce using rule 47 (value -> ids_access .)
    greater_than    reduce using rule 47 (value -> ids_access .)
    greater_or_equal_than reduce using rule 47 (value -> ids_access .)
    less_than       reduce using rule 47 (value -> ids_access .)
    less_or_equal_than reduce using rule 47 (value -> ids_access .)
    close_parenthesis reduce using rule 47 (value -> ids_access .)
    to              reduce using rule 47 (value -> ids_access .)
    close_brackets  reduce using rule 47 (value -> ids_access .)
    step            reduce using rule 47 (value -> ids_access .)


state 38

    (53) real_value -> word_value .

    comma           reduce using rule 53 (real_value -> word_value .)
    dim             reduce using rule 53 (real_value -> word_value .)
    if              reduce using rule 53 (real_value -> word_value .)
    while           reduce using rule 53 (real_value -> word_value .)
    do              reduce using rule 53 (real_value -> word_value .)
    for             reduce using rule 53 (real_value -> word_value .)
    gosub           reduce using rule 53 (real_value -> word_value .)
    id              reduce using rule 53 (real_value -> word_value .)
    dunkelPrint     reduce using rule 53 (real_value -> word_value .)
    dunkelRead      reduce using rule 53 (real_value -> word_value .)
    end             reduce using rule 53 (real_value -> word_value .)
    loop            reduce using rule 53 (real_value -> word_value .)
    wend            reduce using rule 53 (real_value -> word_value .)
    return          reduce using rule 53 (real_value -> word_value .)
    next            reduce using rule 53 (real_value -> word_value .)
    sum             reduce using rule 53 (real_value -> word_value .)
    substraction    reduce using rule 53 (real_value -> word_value .)
    multiplication  reduce using rule 53 (real_value -> word_value .)
    division        reduce using rule 53 (real_value -> word_value .)
    exponent        reduce using rule 53 (real_value -> word_value .)
    is_equal        reduce using rule 53 (real_value -> word_value .)
    is_not_equal    reduce using rule 53 (real_value -> word_value .)
    and             reduce using rule 53 (real_value -> word_value .)
    or              reduce using rule 53 (real_value -> word_value .)
    not             reduce using rule 53 (real_value -> word_value .)
    greater_than    reduce using rule 53 (real_value -> word_value .)
    greater_or_equal_than reduce using rule 53 (real_value -> word_value .)
    less_than       reduce using rule 53 (real_value -> word_value .)
    less_or_equal_than reduce using rule 53 (real_value -> word_value .)
    close_parenthesis reduce using rule 53 (real_value -> word_value .)
    to              reduce using rule 53 (real_value -> word_value .)
    close_brackets  reduce using rule 53 (real_value -> word_value .)
    step            reduce using rule 53 (real_value -> word_value .)


state 39

    (54) real_value -> float_value .

    comma           reduce using rule 54 (real_value -> float_value .)
    dim             reduce using rule 54 (real_value -> float_value .)
    if              reduce using rule 54 (real_value -> float_value .)
    while           reduce using rule 54 (real_value -> float_value .)
    do              reduce using rule 54 (real_value -> float_value .)
    for             reduce using rule 54 (real_value -> float_value .)
    gosub           reduce using rule 54 (real_value -> float_value .)
    id              reduce using rule 54 (real_value -> float_value .)
    dunkelPrint     reduce using rule 54 (real_value -> float_value .)
    dunkelRead      reduce using rule 54 (real_value -> float_value .)
    end             reduce using rule 54 (real_value -> float_value .)
    loop            reduce using rule 54 (real_value -> float_value .)
    wend            reduce using rule 54 (real_value -> float_value .)
    return          reduce using rule 54 (real_value -> float_value .)
    next            reduce using rule 54 (real_value -> float_value .)
    sum             reduce using rule 54 (real_value -> float_value .)
    substraction    reduce using rule 54 (real_value -> float_value .)
    multiplication  reduce using rule 54 (real_value -> float_value .)
    division        reduce using rule 54 (real_value -> float_value .)
    exponent        reduce using rule 54 (real_value -> float_value .)
    is_equal        reduce using rule 54 (real_value -> float_value .)
    is_not_equal    reduce using rule 54 (real_value -> float_value .)
    and             reduce using rule 54 (real_value -> float_value .)
    or              reduce using rule 54 (real_value -> float_value .)
    not             reduce using rule 54 (real_value -> float_value .)
    greater_than    reduce using rule 54 (real_value -> float_value .)
    greater_or_equal_than reduce using rule 54 (real_value -> float_value .)
    less_than       reduce using rule 54 (real_value -> float_value .)
    less_or_equal_than reduce using rule 54 (real_value -> float_value .)
    close_parenthesis reduce using rule 54 (real_value -> float_value .)
    to              reduce using rule 54 (real_value -> float_value .)
    close_brackets  reduce using rule 54 (real_value -> float_value .)
    step            reduce using rule 54 (real_value -> float_value .)


state 40

    (55) real_value -> id .
    (66) functions -> id . open_parenthesis close_parenthesis
    (67) functions -> id . open_parenthesis arguments close_parenthesis
    (48) ids_access -> id .
    (49) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (50) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

  ! reduce/reduce conflict for comma resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for dim resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for if resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for while resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for do resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for for resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for gosub resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for id resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelPrint resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for dunkelRead resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for end resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for loop resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for wend resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for return resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for next resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for sum resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for is_equal resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for is_not_equal resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for and resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for or resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for not resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for greater_than resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for greater_or_equal_than resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for less_than resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for less_or_equal_than resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for to resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for close_brackets resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for step resolved using rule 48 (ids_access -> id .)
    open_parenthesis shift and go to state 65
    comma           reduce using rule 48 (ids_access -> id .)
    dim             reduce using rule 48 (ids_access -> id .)
    if              reduce using rule 48 (ids_access -> id .)
    while           reduce using rule 48 (ids_access -> id .)
    do              reduce using rule 48 (ids_access -> id .)
    for             reduce using rule 48 (ids_access -> id .)
    gosub           reduce using rule 48 (ids_access -> id .)
    id              reduce using rule 48 (ids_access -> id .)
    dunkelPrint     reduce using rule 48 (ids_access -> id .)
    dunkelRead      reduce using rule 48 (ids_access -> id .)
    end             reduce using rule 48 (ids_access -> id .)
    loop            reduce using rule 48 (ids_access -> id .)
    wend            reduce using rule 48 (ids_access -> id .)
    return          reduce using rule 48 (ids_access -> id .)
    next            reduce using rule 48 (ids_access -> id .)
    sum             reduce using rule 48 (ids_access -> id .)
    substraction    reduce using rule 48 (ids_access -> id .)
    multiplication  reduce using rule 48 (ids_access -> id .)
    division        reduce using rule 48 (ids_access -> id .)
    exponent        reduce using rule 48 (ids_access -> id .)
    is_equal        reduce using rule 48 (ids_access -> id .)
    is_not_equal    reduce using rule 48 (ids_access -> id .)
    and             reduce using rule 48 (ids_access -> id .)
    or              reduce using rule 48 (ids_access -> id .)
    not             reduce using rule 48 (ids_access -> id .)
    greater_than    reduce using rule 48 (ids_access -> id .)
    greater_or_equal_than reduce using rule 48 (ids_access -> id .)
    less_than       reduce using rule 48 (ids_access -> id .)
    less_or_equal_than reduce using rule 48 (ids_access -> id .)
    close_parenthesis reduce using rule 48 (ids_access -> id .)
    to              reduce using rule 48 (ids_access -> id .)
    close_brackets  reduce using rule 48 (ids_access -> id .)
    step            reduce using rule 48 (ids_access -> id .)
    open_brackets   shift and go to state 66

  ! comma           [ reduce using rule 55 (real_value -> id .) ]
  ! dim             [ reduce using rule 55 (real_value -> id .) ]
  ! if              [ reduce using rule 55 (real_value -> id .) ]
  ! while           [ reduce using rule 55 (real_value -> id .) ]
  ! do              [ reduce using rule 55 (real_value -> id .) ]
  ! for             [ reduce using rule 55 (real_value -> id .) ]
  ! gosub           [ reduce using rule 55 (real_value -> id .) ]
  ! id              [ reduce using rule 55 (real_value -> id .) ]
  ! dunkelPrint     [ reduce using rule 55 (real_value -> id .) ]
  ! dunkelRead      [ reduce using rule 55 (real_value -> id .) ]
  ! end             [ reduce using rule 55 (real_value -> id .) ]
  ! loop            [ reduce using rule 55 (real_value -> id .) ]
  ! wend            [ reduce using rule 55 (real_value -> id .) ]
  ! return          [ reduce using rule 55 (real_value -> id .) ]
  ! next            [ reduce using rule 55 (real_value -> id .) ]
  ! sum             [ reduce using rule 55 (real_value -> id .) ]
  ! substraction    [ reduce using rule 55 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 55 (real_value -> id .) ]
  ! division        [ reduce using rule 55 (real_value -> id .) ]
  ! exponent        [ reduce using rule 55 (real_value -> id .) ]
  ! is_equal        [ reduce using rule 55 (real_value -> id .) ]
  ! is_not_equal    [ reduce using rule 55 (real_value -> id .) ]
  ! and             [ reduce using rule 55 (real_value -> id .) ]
  ! or              [ reduce using rule 55 (real_value -> id .) ]
  ! not             [ reduce using rule 55 (real_value -> id .) ]
  ! greater_than    [ reduce using rule 55 (real_value -> id .) ]
  ! greater_or_equal_than [ reduce using rule 55 (real_value -> id .) ]
  ! less_than       [ reduce using rule 55 (real_value -> id .) ]
  ! less_or_equal_than [ reduce using rule 55 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 55 (real_value -> id .) ]
  ! to              [ reduce using rule 55 (real_value -> id .) ]
  ! close_brackets  [ reduce using rule 55 (real_value -> id .) ]
  ! step            [ reduce using rule 55 (real_value -> id .) ]


state 41

    (78) read -> dunkelRead multiple_read .
    (81) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 78 (read -> dunkelRead multiple_read .)
    if              reduce using rule 78 (read -> dunkelRead multiple_read .)
    while           reduce using rule 78 (read -> dunkelRead multiple_read .)
    do              reduce using rule 78 (read -> dunkelRead multiple_read .)
    for             reduce using rule 78 (read -> dunkelRead multiple_read .)
    gosub           reduce using rule 78 (read -> dunkelRead multiple_read .)
    id              reduce using rule 78 (read -> dunkelRead multiple_read .)
    dunkelPrint     reduce using rule 78 (read -> dunkelRead multiple_read .)
    dunkelRead      reduce using rule 78 (read -> dunkelRead multiple_read .)
    end             reduce using rule 78 (read -> dunkelRead multiple_read .)
    loop            reduce using rule 78 (read -> dunkelRead multiple_read .)
    wend            reduce using rule 78 (read -> dunkelRead multiple_read .)
    return          reduce using rule 78 (read -> dunkelRead multiple_read .)
    next            reduce using rule 78 (read -> dunkelRead multiple_read .)
    comma           shift and go to state 67


state 42

    (79) read -> dunkelRead string . comma multiple_read

    comma           shift and go to state 68


state 43

    (80) multiple_read -> ids_access .

    comma           reduce using rule 80 (multiple_read -> ids_access .)
    dim             reduce using rule 80 (multiple_read -> ids_access .)
    if              reduce using rule 80 (multiple_read -> ids_access .)
    while           reduce using rule 80 (multiple_read -> ids_access .)
    do              reduce using rule 80 (multiple_read -> ids_access .)
    for             reduce using rule 80 (multiple_read -> ids_access .)
    gosub           reduce using rule 80 (multiple_read -> ids_access .)
    id              reduce using rule 80 (multiple_read -> ids_access .)
    dunkelPrint     reduce using rule 80 (multiple_read -> ids_access .)
    dunkelRead      reduce using rule 80 (multiple_read -> ids_access .)
    end             reduce using rule 80 (multiple_read -> ids_access .)
    loop            reduce using rule 80 (multiple_read -> ids_access .)
    wend            reduce using rule 80 (multiple_read -> ids_access .)
    return          reduce using rule 80 (multiple_read -> ids_access .)
    next            reduce using rule 80 (multiple_read -> ids_access .)


state 44

    (48) ids_access -> id .
    (49) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (50) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 48 (ids_access -> id .)
    dim             reduce using rule 48 (ids_access -> id .)
    if              reduce using rule 48 (ids_access -> id .)
    while           reduce using rule 48 (ids_access -> id .)
    do              reduce using rule 48 (ids_access -> id .)
    for             reduce using rule 48 (ids_access -> id .)
    gosub           reduce using rule 48 (ids_access -> id .)
    id              reduce using rule 48 (ids_access -> id .)
    dunkelPrint     reduce using rule 48 (ids_access -> id .)
    dunkelRead      reduce using rule 48 (ids_access -> id .)
    end             reduce using rule 48 (ids_access -> id .)
    loop            reduce using rule 48 (ids_access -> id .)
    wend            reduce using rule 48 (ids_access -> id .)
    return          reduce using rule 48 (ids_access -> id .)
    next            reduce using rule 48 (ids_access -> id .)
    close_parenthesis reduce using rule 48 (ids_access -> id .)
    open_brackets   shift and go to state 66


state 45

    (52) ids_access -> open_parenthesis . ids_access close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 44
    open_parenthesis shift and go to state 45

    ids_access                     shift and go to state 69

state 46

    (2) program -> inside_logic end subroutines .

    $end            reduce using rule 2 (program -> inside_logic end subroutines .)


state 47

    (58) subroutines -> sub . procedure id inside_logic return subroutines
    (59) subroutines -> sub . function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> sub . function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> sub . function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> sub . function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    procedure       shift and go to state 70
    function        shift and go to state 71


state 48

    (9) variable -> dim id as . variable_type
    (10) variable -> dim id as . variable_type open_brackets word_value close_brackets
    (11) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> dim id as . variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (13) variable_type -> . word
    (14) variable_type -> . float
    (15) variable_type -> . bool

    word            shift and go to state 73
    float           shift and go to state 74
    bool            shift and go to state 75

    variable_type                  shift and go to state 72

state 49

    (57) calls -> id open_parenthesis close_parenthesis .

    dim             reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 57 (calls -> id open_parenthesis close_parenthesis .)


state 50

    (46) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (52) ids_access -> open_parenthesis . ids_access close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 64
    open_parenthesis shift and go to state 59
    word_value      shift and go to state 38
    float_value     shift and go to state 39

    arithmetic_expression          shift and go to state 61
    ids_access                     shift and go to state 62
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36

state 51

    (17) loops -> while open_parenthesis logic_expression . close_parenthesis inside_logic wend
    (23) logic_expression -> logic_expression . logic_operand logic_expression
    (24) logic_operand -> . and
    (25) logic_operand -> . or
    (26) logic_operand -> . not
    (27) logic_operand -> . is_equal
    (28) logic_operand -> . is_not_equal
    (29) logic_operand -> . greater_than
    (30) logic_operand -> . greater_or_equal_than
    (31) logic_operand -> . less_than
    (32) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 76
    and             shift and go to state 78
    or              shift and go to state 79
    not             shift and go to state 80
    is_equal        shift and go to state 81
    is_not_equal    shift and go to state 82
    greater_than    shift and go to state 83
    greater_or_equal_than shift and go to state 84
    less_than       shift and go to state 85
    less_or_equal_than shift and go to state 86

    logic_operand                  shift and go to state 77

state 52

    (20) logic_expression -> arithmetic_expression .
    (22) logic_expression -> arithmetic_expression . logic_operand arithmetic_expression
    (33) compared_to_bool -> arithmetic_expression . is_equal bool_value
    (34) compared_to_bool -> arithmetic_expression . is_not_equal bool_value
    (24) logic_operand -> . and
    (25) logic_operand -> . or
    (26) logic_operand -> . not
    (27) logic_operand -> . is_equal
    (28) logic_operand -> . is_not_equal
    (29) logic_operand -> . greater_than
    (30) logic_operand -> . greater_or_equal_than
    (31) logic_operand -> . less_than
    (32) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 20 (logic_expression -> arithmetic_expression .)
    is_equal        shift and go to state 88
    is_not_equal    shift and go to state 89
    and             shift and go to state 78
    or              shift and go to state 79
    not             shift and go to state 80
    greater_than    shift and go to state 83
    greater_or_equal_than shift and go to state 84
    less_than       shift and go to state 85
    less_or_equal_than shift and go to state 86

  ! and             [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! or              [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! not             [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! is_equal        [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! is_not_equal    [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! greater_than    [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! less_than       [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]
  ! less_or_equal_than [ reduce using rule 20 (logic_expression -> arithmetic_expression .) ]

    logic_operand                  shift and go to state 87

state 53

    (21) logic_expression -> compared_to_bool .

    close_parenthesis reduce using rule 21 (logic_expression -> compared_to_bool .)
    and             reduce using rule 21 (logic_expression -> compared_to_bool .)
    or              reduce using rule 21 (logic_expression -> compared_to_bool .)
    not             reduce using rule 21 (logic_expression -> compared_to_bool .)
    is_equal        reduce using rule 21 (logic_expression -> compared_to_bool .)
    is_not_equal    reduce using rule 21 (logic_expression -> compared_to_bool .)
    greater_than    reduce using rule 21 (logic_expression -> compared_to_bool .)
    greater_or_equal_than reduce using rule 21 (logic_expression -> compared_to_bool .)
    less_than       reduce using rule 21 (logic_expression -> compared_to_bool .)
    less_or_equal_than reduce using rule 21 (logic_expression -> compared_to_bool .)


state 54

    (37) arithmetic_expression -> value .
    (38) arithmetic_expression -> value . arithmetic_operand value
    (39) arithmetic_operand -> . sum
    (40) arithmetic_operand -> . substraction
    (41) arithmetic_operand -> . multiplication
    (42) arithmetic_operand -> . division
    (43) arithmetic_operand -> . exponent

    is_equal        reduce using rule 37 (arithmetic_expression -> value .)
    is_not_equal    reduce using rule 37 (arithmetic_expression -> value .)
    and             reduce using rule 37 (arithmetic_expression -> value .)
    or              reduce using rule 37 (arithmetic_expression -> value .)
    not             reduce using rule 37 (arithmetic_expression -> value .)
    greater_than    reduce using rule 37 (arithmetic_expression -> value .)
    greater_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)
    less_than       reduce using rule 37 (arithmetic_expression -> value .)
    less_or_equal_than reduce using rule 37 (arithmetic_expression -> value .)
    close_parenthesis reduce using rule 37 (arithmetic_expression -> value .)
    to              reduce using rule 37 (arithmetic_expression -> value .)
    close_brackets  reduce using rule 37 (arithmetic_expression -> value .)
    step            reduce using rule 37 (arithmetic_expression -> value .)
    dim             reduce using rule 37 (arithmetic_expression -> value .)
    if              reduce using rule 37 (arithmetic_expression -> value .)
    while           reduce using rule 37 (arithmetic_expression -> value .)
    do              reduce using rule 37 (arithmetic_expression -> value .)
    for             reduce using rule 37 (arithmetic_expression -> value .)
    gosub           reduce using rule 37 (arithmetic_expression -> value .)
    id              reduce using rule 37 (arithmetic_expression -> value .)
    dunkelPrint     reduce using rule 37 (arithmetic_expression -> value .)
    dunkelRead      reduce using rule 37 (arithmetic_expression -> value .)
    next            reduce using rule 37 (arithmetic_expression -> value .)
    sum             shift and go to state 91
    substraction    shift and go to state 92
    multiplication  shift and go to state 93
    division        shift and go to state 94
    exponent        shift and go to state 95

    arithmetic_operand             shift and go to state 90

state 55

    (35) compared_to_bool -> bool_value . is_equal arithmetic_expression
    (36) compared_to_bool -> bool_value . is_not_equal arithmetic_expression

    is_equal        shift and go to state 96
    is_not_equal    shift and go to state 97


state 56

    (18) loops -> do inside_logic loop . until open_parenthesis logic_expression close_parenthesis

    until           shift and go to state 98


state 57

    (19) loops -> for id equals . arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 99
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 58

    (77) multiple_print -> multiple_print comma . multiple_print
    (75) multiple_print -> . string
    (76) multiple_print -> . value
    (77) multiple_print -> . multiple_print comma multiple_print
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    string          shift and go to state 33
    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    multiple_print                 shift and go to state 100
    value                          shift and go to state 34
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 59

    (52) ids_access -> open_parenthesis . ids_access close_parenthesis
    (46) value -> open_parenthesis . arithmetic_expression close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis

    id              shift and go to state 64
    open_parenthesis shift and go to state 59
    word_value      shift and go to state 38
    float_value     shift and go to state 39

    ids_access                     shift and go to state 62
    arithmetic_expression          shift and go to state 61
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36

state 60

    (74) print -> dunkelPrint open_parenthesis multiple_print . close_parenthesis
    (77) multiple_print -> multiple_print . comma multiple_print

    close_parenthesis shift and go to state 101
    comma           shift and go to state 58


state 61

    (46) value -> open_parenthesis arithmetic_expression . close_parenthesis

    close_parenthesis shift and go to state 102


state 62

    (52) ids_access -> open_parenthesis ids_access . close_parenthesis
    (47) value -> ids_access .

  ! shift/reduce conflict for close_parenthesis resolved as shift
    close_parenthesis shift and go to state 103
    sum             reduce using rule 47 (value -> ids_access .)
    substraction    reduce using rule 47 (value -> ids_access .)
    multiplication  reduce using rule 47 (value -> ids_access .)
    division        reduce using rule 47 (value -> ids_access .)
    exponent        reduce using rule 47 (value -> ids_access .)
    comma           reduce using rule 47 (value -> ids_access .)

  ! close_parenthesis [ reduce using rule 47 (value -> ids_access .) ]


state 63

    (76) multiple_print -> value .
    (37) arithmetic_expression -> value .
    (38) arithmetic_expression -> value . arithmetic_operand value
    (39) arithmetic_operand -> . sum
    (40) arithmetic_operand -> . substraction
    (41) arithmetic_operand -> . multiplication
    (42) arithmetic_operand -> . division
    (43) arithmetic_operand -> . exponent

  ! reduce/reduce conflict for close_parenthesis resolved using rule 37 (arithmetic_expression -> value .)
    comma           reduce using rule 76 (multiple_print -> value .)
    close_parenthesis reduce using rule 37 (arithmetic_expression -> value .)
    sum             shift and go to state 91
    substraction    shift and go to state 92
    multiplication  shift and go to state 93
    division        shift and go to state 94
    exponent        shift and go to state 95

  ! close_parenthesis [ reduce using rule 76 (multiple_print -> value .) ]

    arithmetic_operand             shift and go to state 90

state 64

    (48) ids_access -> id .
    (49) ids_access -> id . open_brackets arithmetic_expression close_brackets
    (50) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (55) real_value -> id .
    (66) functions -> id . open_parenthesis close_parenthesis
    (67) functions -> id . open_parenthesis arguments close_parenthesis

  ! reduce/reduce conflict for sum resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for substraction resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for multiplication resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for division resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for exponent resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for close_parenthesis resolved using rule 48 (ids_access -> id .)
  ! reduce/reduce conflict for comma resolved using rule 48 (ids_access -> id .)
    close_parenthesis reduce using rule 48 (ids_access -> id .)
    sum             reduce using rule 48 (ids_access -> id .)
    substraction    reduce using rule 48 (ids_access -> id .)
    multiplication  reduce using rule 48 (ids_access -> id .)
    division        reduce using rule 48 (ids_access -> id .)
    exponent        reduce using rule 48 (ids_access -> id .)
    comma           reduce using rule 48 (ids_access -> id .)
    open_brackets   shift and go to state 66
    open_parenthesis shift and go to state 65

  ! sum             [ reduce using rule 55 (real_value -> id .) ]
  ! substraction    [ reduce using rule 55 (real_value -> id .) ]
  ! multiplication  [ reduce using rule 55 (real_value -> id .) ]
  ! division        [ reduce using rule 55 (real_value -> id .) ]
  ! exponent        [ reduce using rule 55 (real_value -> id .) ]
  ! close_parenthesis [ reduce using rule 55 (real_value -> id .) ]
  ! comma           [ reduce using rule 55 (real_value -> id .) ]


state 65

    (66) functions -> id open_parenthesis . close_parenthesis
    (67) functions -> id open_parenthesis . arguments close_parenthesis
    (68) arguments -> . ByVal value
    (69) arguments -> . ByRef id
    (70) arguments -> . arguments comma arguments

    close_parenthesis shift and go to state 104
    ByVal           shift and go to state 106
    ByRef           shift and go to state 107

    arguments                      shift and go to state 105

state 66

    (49) ids_access -> id open_brackets . arithmetic_expression close_brackets
    (50) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 108
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 67

    (81) multiple_read -> multiple_read comma . multiple_read
    (80) multiple_read -> . ids_access
    (81) multiple_read -> . multiple_read comma multiple_read
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 44
    open_parenthesis shift and go to state 45

    multiple_read                  shift and go to state 109
    ids_access                     shift and go to state 43

state 68

    (79) read -> dunkelRead string comma . multiple_read
    (80) multiple_read -> . ids_access
    (81) multiple_read -> . multiple_read comma multiple_read
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    id              shift and go to state 44
    open_parenthesis shift and go to state 45

    multiple_read                  shift and go to state 110
    ids_access                     shift and go to state 43

state 69

    (52) ids_access -> open_parenthesis ids_access . close_parenthesis

    close_parenthesis shift and go to state 103


state 70

    (58) subroutines -> sub procedure . id inside_logic return subroutines

    id              shift and go to state 111


state 71

    (59) subroutines -> sub function . id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> sub function . id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> sub function . id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> sub function . id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    id              shift and go to state 112


state 72

    (9) variable -> dim id as variable_type .
    (10) variable -> dim id as variable_type . open_brackets word_value close_brackets
    (11) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type . open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 9 (variable -> dim id as variable_type .)
    if              reduce using rule 9 (variable -> dim id as variable_type .)
    while           reduce using rule 9 (variable -> dim id as variable_type .)
    do              reduce using rule 9 (variable -> dim id as variable_type .)
    for             reduce using rule 9 (variable -> dim id as variable_type .)
    gosub           reduce using rule 9 (variable -> dim id as variable_type .)
    id              reduce using rule 9 (variable -> dim id as variable_type .)
    dunkelPrint     reduce using rule 9 (variable -> dim id as variable_type .)
    dunkelRead      reduce using rule 9 (variable -> dim id as variable_type .)
    end             reduce using rule 9 (variable -> dim id as variable_type .)
    loop            reduce using rule 9 (variable -> dim id as variable_type .)
    wend            reduce using rule 9 (variable -> dim id as variable_type .)
    return          reduce using rule 9 (variable -> dim id as variable_type .)
    next            reduce using rule 9 (variable -> dim id as variable_type .)
    close_parenthesis reduce using rule 9 (variable -> dim id as variable_type .)
    comma           reduce using rule 9 (variable -> dim id as variable_type .)
    open_brackets   shift and go to state 113


state 73

    (13) variable_type -> word .

    open_brackets   reduce using rule 13 (variable_type -> word .)
    dim             reduce using rule 13 (variable_type -> word .)
    if              reduce using rule 13 (variable_type -> word .)
    while           reduce using rule 13 (variable_type -> word .)
    do              reduce using rule 13 (variable_type -> word .)
    for             reduce using rule 13 (variable_type -> word .)
    gosub           reduce using rule 13 (variable_type -> word .)
    id              reduce using rule 13 (variable_type -> word .)
    dunkelPrint     reduce using rule 13 (variable_type -> word .)
    dunkelRead      reduce using rule 13 (variable_type -> word .)
    end             reduce using rule 13 (variable_type -> word .)
    loop            reduce using rule 13 (variable_type -> word .)
    wend            reduce using rule 13 (variable_type -> word .)
    return          reduce using rule 13 (variable_type -> word .)
    next            reduce using rule 13 (variable_type -> word .)
    close_parenthesis reduce using rule 13 (variable_type -> word .)
    comma           reduce using rule 13 (variable_type -> word .)


state 74

    (14) variable_type -> float .

    open_brackets   reduce using rule 14 (variable_type -> float .)
    dim             reduce using rule 14 (variable_type -> float .)
    if              reduce using rule 14 (variable_type -> float .)
    while           reduce using rule 14 (variable_type -> float .)
    do              reduce using rule 14 (variable_type -> float .)
    for             reduce using rule 14 (variable_type -> float .)
    gosub           reduce using rule 14 (variable_type -> float .)
    id              reduce using rule 14 (variable_type -> float .)
    dunkelPrint     reduce using rule 14 (variable_type -> float .)
    dunkelRead      reduce using rule 14 (variable_type -> float .)
    end             reduce using rule 14 (variable_type -> float .)
    loop            reduce using rule 14 (variable_type -> float .)
    wend            reduce using rule 14 (variable_type -> float .)
    return          reduce using rule 14 (variable_type -> float .)
    next            reduce using rule 14 (variable_type -> float .)
    close_parenthesis reduce using rule 14 (variable_type -> float .)
    comma           reduce using rule 14 (variable_type -> float .)


state 75

    (15) variable_type -> bool .

    open_brackets   reduce using rule 15 (variable_type -> bool .)
    dim             reduce using rule 15 (variable_type -> bool .)
    if              reduce using rule 15 (variable_type -> bool .)
    while           reduce using rule 15 (variable_type -> bool .)
    do              reduce using rule 15 (variable_type -> bool .)
    for             reduce using rule 15 (variable_type -> bool .)
    gosub           reduce using rule 15 (variable_type -> bool .)
    id              reduce using rule 15 (variable_type -> bool .)
    dunkelPrint     reduce using rule 15 (variable_type -> bool .)
    dunkelRead      reduce using rule 15 (variable_type -> bool .)
    end             reduce using rule 15 (variable_type -> bool .)
    loop            reduce using rule 15 (variable_type -> bool .)
    wend            reduce using rule 15 (variable_type -> bool .)
    return          reduce using rule 15 (variable_type -> bool .)
    next            reduce using rule 15 (variable_type -> bool .)
    close_parenthesis reduce using rule 15 (variable_type -> bool .)
    comma           reduce using rule 15 (variable_type -> bool .)


state 76

    (17) loops -> while open_parenthesis logic_expression close_parenthesis . inside_logic wend
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    wend            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 114
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 77

    (23) logic_expression -> logic_expression logic_operand . logic_expression
    (20) logic_expression -> . arithmetic_expression
    (21) logic_expression -> . compared_to_bool
    (22) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (23) logic_expression -> . logic_expression logic_operand logic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (33) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (34) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (35) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (36) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 55
    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    logic_expression               shift and go to state 115
    arithmetic_expression          shift and go to state 52
    compared_to_bool               shift and go to state 53
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 78

    (24) logic_operand -> and .

    bool_value      reduce using rule 24 (logic_operand -> and .)
    open_parenthesis reduce using rule 24 (logic_operand -> and .)
    word_value      reduce using rule 24 (logic_operand -> and .)
    float_value     reduce using rule 24 (logic_operand -> and .)
    id              reduce using rule 24 (logic_operand -> and .)


state 79

    (25) logic_operand -> or .

    bool_value      reduce using rule 25 (logic_operand -> or .)
    open_parenthesis reduce using rule 25 (logic_operand -> or .)
    word_value      reduce using rule 25 (logic_operand -> or .)
    float_value     reduce using rule 25 (logic_operand -> or .)
    id              reduce using rule 25 (logic_operand -> or .)


state 80

    (26) logic_operand -> not .

    bool_value      reduce using rule 26 (logic_operand -> not .)
    open_parenthesis reduce using rule 26 (logic_operand -> not .)
    word_value      reduce using rule 26 (logic_operand -> not .)
    float_value     reduce using rule 26 (logic_operand -> not .)
    id              reduce using rule 26 (logic_operand -> not .)


state 81

    (27) logic_operand -> is_equal .

    bool_value      reduce using rule 27 (logic_operand -> is_equal .)
    open_parenthesis reduce using rule 27 (logic_operand -> is_equal .)
    word_value      reduce using rule 27 (logic_operand -> is_equal .)
    float_value     reduce using rule 27 (logic_operand -> is_equal .)
    id              reduce using rule 27 (logic_operand -> is_equal .)


state 82

    (28) logic_operand -> is_not_equal .

    bool_value      reduce using rule 28 (logic_operand -> is_not_equal .)
    open_parenthesis reduce using rule 28 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 28 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 28 (logic_operand -> is_not_equal .)
    id              reduce using rule 28 (logic_operand -> is_not_equal .)


state 83

    (29) logic_operand -> greater_than .

    bool_value      reduce using rule 29 (logic_operand -> greater_than .)
    open_parenthesis reduce using rule 29 (logic_operand -> greater_than .)
    word_value      reduce using rule 29 (logic_operand -> greater_than .)
    float_value     reduce using rule 29 (logic_operand -> greater_than .)
    id              reduce using rule 29 (logic_operand -> greater_than .)


state 84

    (30) logic_operand -> greater_or_equal_than .

    bool_value      reduce using rule 30 (logic_operand -> greater_or_equal_than .)
    open_parenthesis reduce using rule 30 (logic_operand -> greater_or_equal_than .)
    word_value      reduce using rule 30 (logic_operand -> greater_or_equal_than .)
    float_value     reduce using rule 30 (logic_operand -> greater_or_equal_than .)
    id              reduce using rule 30 (logic_operand -> greater_or_equal_than .)


state 85

    (31) logic_operand -> less_than .

    bool_value      reduce using rule 31 (logic_operand -> less_than .)
    open_parenthesis reduce using rule 31 (logic_operand -> less_than .)
    word_value      reduce using rule 31 (logic_operand -> less_than .)
    float_value     reduce using rule 31 (logic_operand -> less_than .)
    id              reduce using rule 31 (logic_operand -> less_than .)


state 86

    (32) logic_operand -> less_or_equal_than .

    bool_value      reduce using rule 32 (logic_operand -> less_or_equal_than .)
    open_parenthesis reduce using rule 32 (logic_operand -> less_or_equal_than .)
    word_value      reduce using rule 32 (logic_operand -> less_or_equal_than .)
    float_value     reduce using rule 32 (logic_operand -> less_or_equal_than .)
    id              reduce using rule 32 (logic_operand -> less_or_equal_than .)


state 87

    (22) logic_expression -> arithmetic_expression logic_operand . arithmetic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 116
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 88

    (33) compared_to_bool -> arithmetic_expression is_equal . bool_value
    (27) logic_operand -> is_equal .

    bool_value      shift and go to state 117
    open_parenthesis reduce using rule 27 (logic_operand -> is_equal .)
    word_value      reduce using rule 27 (logic_operand -> is_equal .)
    float_value     reduce using rule 27 (logic_operand -> is_equal .)
    id              reduce using rule 27 (logic_operand -> is_equal .)


state 89

    (34) compared_to_bool -> arithmetic_expression is_not_equal . bool_value
    (28) logic_operand -> is_not_equal .

    bool_value      shift and go to state 118
    open_parenthesis reduce using rule 28 (logic_operand -> is_not_equal .)
    word_value      reduce using rule 28 (logic_operand -> is_not_equal .)
    float_value     reduce using rule 28 (logic_operand -> is_not_equal .)
    id              reduce using rule 28 (logic_operand -> is_not_equal .)


state 90

    (38) arithmetic_expression -> value arithmetic_operand . value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    value                          shift and go to state 119
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 91

    (39) arithmetic_operand -> sum .

    open_parenthesis reduce using rule 39 (arithmetic_operand -> sum .)
    word_value      reduce using rule 39 (arithmetic_operand -> sum .)
    float_value     reduce using rule 39 (arithmetic_operand -> sum .)
    id              reduce using rule 39 (arithmetic_operand -> sum .)


state 92

    (40) arithmetic_operand -> substraction .

    open_parenthesis reduce using rule 40 (arithmetic_operand -> substraction .)
    word_value      reduce using rule 40 (arithmetic_operand -> substraction .)
    float_value     reduce using rule 40 (arithmetic_operand -> substraction .)
    id              reduce using rule 40 (arithmetic_operand -> substraction .)


state 93

    (41) arithmetic_operand -> multiplication .

    open_parenthesis reduce using rule 41 (arithmetic_operand -> multiplication .)
    word_value      reduce using rule 41 (arithmetic_operand -> multiplication .)
    float_value     reduce using rule 41 (arithmetic_operand -> multiplication .)
    id              reduce using rule 41 (arithmetic_operand -> multiplication .)


state 94

    (42) arithmetic_operand -> division .

    open_parenthesis reduce using rule 42 (arithmetic_operand -> division .)
    word_value      reduce using rule 42 (arithmetic_operand -> division .)
    float_value     reduce using rule 42 (arithmetic_operand -> division .)
    id              reduce using rule 42 (arithmetic_operand -> division .)


state 95

    (43) arithmetic_operand -> exponent .

    open_parenthesis reduce using rule 43 (arithmetic_operand -> exponent .)
    word_value      reduce using rule 43 (arithmetic_operand -> exponent .)
    float_value     reduce using rule 43 (arithmetic_operand -> exponent .)
    id              reduce using rule 43 (arithmetic_operand -> exponent .)


state 96

    (35) compared_to_bool -> bool_value is_equal . arithmetic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 120
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 97

    (36) compared_to_bool -> bool_value is_not_equal . arithmetic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 121
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 98

    (18) loops -> do inside_logic loop until . open_parenthesis logic_expression close_parenthesis

    open_parenthesis shift and go to state 122


state 99

    (19) loops -> for id equals arithmetic_expression . to arithmetic_expression step arithmetic_expression inside_logic next id

    to              shift and go to state 123


state 100

    (77) multiple_print -> multiple_print comma multiple_print .
    (77) multiple_print -> multiple_print . comma multiple_print

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    if              reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    while           reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    do              reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    for             reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    gosub           reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    id              reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    dunkelPrint     reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    dunkelRead      reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    end             reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    loop            reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    wend            reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    return          reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    next            reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    close_parenthesis reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .)
    comma           shift and go to state 58

  ! comma           [ reduce using rule 77 (multiple_print -> multiple_print comma multiple_print .) ]


state 101

    (74) print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .

    dim             reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    if              reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    while           reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    do              reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    for             reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    gosub           reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    id              reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelPrint     reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    dunkelRead      reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    end             reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    loop            reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    wend            reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    return          reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)
    next            reduce using rule 74 (print -> dunkelPrint open_parenthesis multiple_print close_parenthesis .)


state 102

    (46) value -> open_parenthesis arithmetic_expression close_parenthesis .

    comma           reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dim             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    if              reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    while           reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    do              reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    for             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    gosub           reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    id              reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    dunkelRead      reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    end             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    loop            reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    wend            reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    return          reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    next            reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    sum             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    substraction    reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    multiplication  reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    division        reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    exponent        reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_equal        reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    is_not_equal    reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    and             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    or              reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    not             reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_than    reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    greater_or_equal_than reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_than       reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    less_or_equal_than reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_parenthesis reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    to              reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    close_brackets  reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)
    step            reduce using rule 46 (value -> open_parenthesis arithmetic_expression close_parenthesis .)


state 103

    (52) ids_access -> open_parenthesis ids_access close_parenthesis .

    comma           reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dim             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    if              reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    while           reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    do              reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    for             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    gosub           reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    id              reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelPrint     reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    dunkelRead      reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    end             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    loop            reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    wend            reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    return          reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    next            reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    sum             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    substraction    reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    multiplication  reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    division        reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    exponent        reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_equal        reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    is_not_equal    reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    and             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    or              reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    not             reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_than    reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    greater_or_equal_than reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_than       reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    less_or_equal_than reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_parenthesis reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    to              reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    close_brackets  reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)
    step            reduce using rule 52 (ids_access -> open_parenthesis ids_access close_parenthesis .)


state 104

    (66) functions -> id open_parenthesis close_parenthesis .

    comma           reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    dim             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    if              reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    while           reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    do              reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    for             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    gosub           reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    id              reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    dunkelPrint     reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    dunkelRead      reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    end             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    loop            reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    wend            reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    return          reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    next            reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    sum             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    substraction    reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    multiplication  reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    division        reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    exponent        reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    is_equal        reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    is_not_equal    reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    and             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    or              reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    not             reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    greater_than    reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    greater_or_equal_than reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    less_than       reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    less_or_equal_than reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    close_parenthesis reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    to              reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    close_brackets  reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)
    step            reduce using rule 66 (functions -> id open_parenthesis close_parenthesis .)


state 105

    (67) functions -> id open_parenthesis arguments . close_parenthesis
    (70) arguments -> arguments . comma arguments

    close_parenthesis shift and go to state 124
    comma           shift and go to state 125


state 106

    (68) arguments -> ByVal . value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    value                          shift and go to state 126
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 107

    (69) arguments -> ByRef . id

    id              shift and go to state 127


state 108

    (49) ids_access -> id open_brackets arithmetic_expression . close_brackets
    (50) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 128


state 109

    (81) multiple_read -> multiple_read comma multiple_read .
    (81) multiple_read -> multiple_read . comma multiple_read

  ! shift/reduce conflict for comma resolved as shift
    dim             reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    if              reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    while           reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    do              reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    for             reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    gosub           reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    id              reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    dunkelPrint     reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    dunkelRead      reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    end             reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    loop            reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    wend            reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    return          reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    next            reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .)
    comma           shift and go to state 67

  ! comma           [ reduce using rule 81 (multiple_read -> multiple_read comma multiple_read .) ]


state 110

    (79) read -> dunkelRead string comma multiple_read .
    (81) multiple_read -> multiple_read . comma multiple_read

    dim             reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    if              reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    while           reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    do              reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    for             reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    gosub           reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    id              reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    dunkelPrint     reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    dunkelRead      reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    end             reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    loop            reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    wend            reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    return          reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    next            reduce using rule 79 (read -> dunkelRead string comma multiple_read .)
    comma           shift and go to state 67


state 111

    (58) subroutines -> sub procedure id . inside_logic return subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    return          reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 129
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 112

    (59) subroutines -> sub function id . open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> sub function id . open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> sub function id . open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> sub function id . open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines

    open_parenthesis shift and go to state 130


state 113

    (10) variable -> dim id as variable_type open_brackets . word_value close_brackets
    (11) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets . word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 131


state 114

    (17) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic . wend

    wend            shift and go to state 132


state 115

    (23) logic_expression -> logic_expression logic_operand logic_expression .
    (23) logic_expression -> logic_expression . logic_operand logic_expression
    (24) logic_operand -> . and
    (25) logic_operand -> . or
    (26) logic_operand -> . not
    (27) logic_operand -> . is_equal
    (28) logic_operand -> . is_not_equal
    (29) logic_operand -> . greater_than
    (30) logic_operand -> . greater_or_equal_than
    (31) logic_operand -> . less_than
    (32) logic_operand -> . less_or_equal_than

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for not resolved as shift
  ! shift/reduce conflict for is_equal resolved as shift
  ! shift/reduce conflict for is_not_equal resolved as shift
  ! shift/reduce conflict for greater_than resolved as shift
  ! shift/reduce conflict for greater_or_equal_than resolved as shift
  ! shift/reduce conflict for less_than resolved as shift
  ! shift/reduce conflict for less_or_equal_than resolved as shift
    close_parenthesis reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .)
    and             shift and go to state 78
    or              shift and go to state 79
    not             shift and go to state 80
    is_equal        shift and go to state 81
    is_not_equal    shift and go to state 82
    greater_than    shift and go to state 83
    greater_or_equal_than shift and go to state 84
    less_than       shift and go to state 85
    less_or_equal_than shift and go to state 86

  ! and             [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! or              [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! not             [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_equal        [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! is_not_equal    [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_than    [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! greater_or_equal_than [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_than       [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]
  ! less_or_equal_than [ reduce using rule 23 (logic_expression -> logic_expression logic_operand logic_expression .) ]

    logic_operand                  shift and go to state 77

state 116

    (22) logic_expression -> arithmetic_expression logic_operand arithmetic_expression .

    close_parenthesis reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    and             reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    or              reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    not             reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_equal        reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    is_not_equal    reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_than    reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    greater_or_equal_than reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_than       reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)
    less_or_equal_than reduce using rule 22 (logic_expression -> arithmetic_expression logic_operand arithmetic_expression .)


state 117

    (33) compared_to_bool -> arithmetic_expression is_equal bool_value .

    close_parenthesis reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    and             reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    or              reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    not             reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_equal        reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    is_not_equal    reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_than    reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    greater_or_equal_than reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_than       reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)
    less_or_equal_than reduce using rule 33 (compared_to_bool -> arithmetic_expression is_equal bool_value .)


state 118

    (34) compared_to_bool -> arithmetic_expression is_not_equal bool_value .

    close_parenthesis reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    and             reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    or              reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    not             reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_equal        reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    is_not_equal    reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_than    reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    greater_or_equal_than reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_than       reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)
    less_or_equal_than reduce using rule 34 (compared_to_bool -> arithmetic_expression is_not_equal bool_value .)


state 119

    (38) arithmetic_expression -> value arithmetic_operand value .

    is_equal        reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    is_not_equal    reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    and             reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    or              reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    not             reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    greater_than    reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    greater_or_equal_than reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    less_than       reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    less_or_equal_than reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    close_parenthesis reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    to              reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    close_brackets  reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    step            reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    dim             reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    if              reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    while           reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    do              reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    for             reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    gosub           reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    id              reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelPrint     reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    dunkelRead      reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)
    next            reduce using rule 38 (arithmetic_expression -> value arithmetic_operand value .)


state 120

    (35) compared_to_bool -> bool_value is_equal arithmetic_expression .

    close_parenthesis reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    and             reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    or              reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    not             reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_equal        reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    is_not_equal    reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_than    reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_than       reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 35 (compared_to_bool -> bool_value is_equal arithmetic_expression .)


state 121

    (36) compared_to_bool -> bool_value is_not_equal arithmetic_expression .

    close_parenthesis reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    and             reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    or              reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    not             reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_equal        reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    is_not_equal    reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_than    reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    greater_or_equal_than reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_than       reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)
    less_or_equal_than reduce using rule 36 (compared_to_bool -> bool_value is_not_equal arithmetic_expression .)


state 122

    (18) loops -> do inside_logic loop until open_parenthesis . logic_expression close_parenthesis
    (20) logic_expression -> . arithmetic_expression
    (21) logic_expression -> . compared_to_bool
    (22) logic_expression -> . arithmetic_expression logic_operand arithmetic_expression
    (23) logic_expression -> . logic_expression logic_operand logic_expression
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (33) compared_to_bool -> . arithmetic_expression is_equal bool_value
    (34) compared_to_bool -> . arithmetic_expression is_not_equal bool_value
    (35) compared_to_bool -> . bool_value is_equal arithmetic_expression
    (36) compared_to_bool -> . bool_value is_not_equal arithmetic_expression
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    bool_value      shift and go to state 55
    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    logic_expression               shift and go to state 133
    arithmetic_expression          shift and go to state 52
    compared_to_bool               shift and go to state 53
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 123

    (19) loops -> for id equals arithmetic_expression to . arithmetic_expression step arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 134
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 124

    (67) functions -> id open_parenthesis arguments close_parenthesis .

    comma           reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    dim             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    if              reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    while           reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    do              reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    for             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    gosub           reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    id              reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelPrint     reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    dunkelRead      reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    end             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    loop            reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    wend            reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    return          reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    next            reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    sum             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    substraction    reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    multiplication  reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    division        reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    exponent        reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_equal        reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    is_not_equal    reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    and             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    or              reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    not             reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_than    reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    greater_or_equal_than reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_than       reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    less_or_equal_than reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_parenthesis reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    to              reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    close_brackets  reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)
    step            reduce using rule 67 (functions -> id open_parenthesis arguments close_parenthesis .)


state 125

    (70) arguments -> arguments comma . arguments
    (68) arguments -> . ByVal value
    (69) arguments -> . ByRef id
    (70) arguments -> . arguments comma arguments

    ByVal           shift and go to state 106
    ByRef           shift and go to state 107

    arguments                      shift and go to state 135

state 126

    (68) arguments -> ByVal value .

    close_parenthesis reduce using rule 68 (arguments -> ByVal value .)
    comma           reduce using rule 68 (arguments -> ByVal value .)


state 127

    (69) arguments -> ByRef id .

    close_parenthesis reduce using rule 69 (arguments -> ByRef id .)
    comma           reduce using rule 69 (arguments -> ByRef id .)


state 128

    (49) ids_access -> id open_brackets arithmetic_expression close_brackets .
    (50) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets
    (51) ids_access -> id open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 49 (ids_access -> id open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 136


state 129

    (58) subroutines -> sub procedure id inside_logic . return subroutines

    return          shift and go to state 137


state 130

    (59) subroutines -> sub function id open_parenthesis . close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> sub function id open_parenthesis . parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> sub function id open_parenthesis . close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> sub function id open_parenthesis . parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (64) parameters -> . variable
    (65) parameters -> . parameters comma parameters
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_parenthesis shift and go to state 138
    dim             shift and go to state 8

    parameters                     shift and go to state 139
    variable                       shift and go to state 140

state 131

    (10) variable -> dim id as variable_type open_brackets word_value . close_brackets
    (11) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value . close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 141


state 132

    (17) loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .

    dim             reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    if              reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    while           reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    do              reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    for             reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    gosub           reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    id              reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelPrint     reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    dunkelRead      reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    end             reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    loop            reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    wend            reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    return          reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)
    next            reduce using rule 17 (loops -> while open_parenthesis logic_expression close_parenthesis inside_logic wend .)


state 133

    (18) loops -> do inside_logic loop until open_parenthesis logic_expression . close_parenthesis
    (23) logic_expression -> logic_expression . logic_operand logic_expression
    (24) logic_operand -> . and
    (25) logic_operand -> . or
    (26) logic_operand -> . not
    (27) logic_operand -> . is_equal
    (28) logic_operand -> . is_not_equal
    (29) logic_operand -> . greater_than
    (30) logic_operand -> . greater_or_equal_than
    (31) logic_operand -> . less_than
    (32) logic_operand -> . less_or_equal_than

    close_parenthesis shift and go to state 142
    and             shift and go to state 78
    or              shift and go to state 79
    not             shift and go to state 80
    is_equal        shift and go to state 81
    is_not_equal    shift and go to state 82
    greater_than    shift and go to state 83
    greater_or_equal_than shift and go to state 84
    less_than       shift and go to state 85
    less_or_equal_than shift and go to state 86

    logic_operand                  shift and go to state 77

state 134

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression . step arithmetic_expression inside_logic next id

    step            shift and go to state 143


state 135

    (70) arguments -> arguments comma arguments .
    (70) arguments -> arguments . comma arguments

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 70 (arguments -> arguments comma arguments .)
    comma           shift and go to state 125

  ! comma           [ reduce using rule 70 (arguments -> arguments comma arguments .) ]


state 136

    (50) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 144
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 137

    (58) subroutines -> sub procedure id inside_logic return . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

    sub             shift and go to state 47
    $end            reduce using rule 63 (subroutines -> .)

    subroutines                    shift and go to state 145

state 138

    (59) subroutines -> sub function id open_parenthesis close_parenthesis . inside_logic end sub subroutines
    (61) subroutines -> sub function id open_parenthesis close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 147
    end             reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 146
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 139

    (60) subroutines -> sub function id open_parenthesis parameters . close_parenthesis inside_logic end sub subroutines
    (62) subroutines -> sub function id open_parenthesis parameters . close_parenthesis as variable_type inside_logic end sub subroutines
    (65) parameters -> parameters . comma parameters

    close_parenthesis shift and go to state 148
    comma           shift and go to state 149


state 140

    (64) parameters -> variable .

    close_parenthesis reduce using rule 64 (parameters -> variable .)
    comma           reduce using rule 64 (parameters -> variable .)


state 141

    (10) variable -> dim id as variable_type open_brackets word_value close_brackets .
    (11) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets . open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    if              reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    while           reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    do              reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    for             reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    gosub           reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    id              reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    end             reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    loop            reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    wend            reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    return          reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    next            reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    comma           reduce using rule 10 (variable -> dim id as variable_type open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 150


state 142

    (18) loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .

    dim             reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    if              reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    while           reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    do              reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    for             reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    gosub           reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    id              reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelPrint     reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    dunkelRead      reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    end             reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    loop            reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    wend            reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    return          reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)
    next            reduce using rule 18 (loops -> do inside_logic loop until open_parenthesis logic_expression close_parenthesis .)


state 143

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression step . arithmetic_expression inside_logic next id
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 151
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 144

    (50) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets
    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets open_brackets arithmetic_expression close_brackets

    close_brackets  shift and go to state 152


state 145

    (58) subroutines -> sub procedure id inside_logic return subroutines .

    $end            reduce using rule 58 (subroutines -> sub procedure id inside_logic return subroutines .)


state 146

    (59) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 153


state 147

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as . variable_type inside_logic end sub subroutines
    (13) variable_type -> . word
    (14) variable_type -> . float
    (15) variable_type -> . bool

    word            shift and go to state 73
    float           shift and go to state 74
    bool            shift and go to state 75

    variable_type                  shift and go to state 154

state 148

    (60) subroutines -> sub function id open_parenthesis parameters close_parenthesis . inside_logic end sub subroutines
    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis . as variable_type inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    as              shift and go to state 156
    end             reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 155
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 149

    (65) parameters -> parameters comma . parameters
    (64) parameters -> . variable
    (65) parameters -> . parameters comma parameters
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets

    dim             shift and go to state 8

    parameters                     shift and go to state 157
    variable                       shift and go to state 140

state 150

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets . word_value close_brackets open_brackets word_value close_brackets

    word_value      shift and go to state 158


state 151

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression . inside_logic next id
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    next            reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 159
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 152

    (50) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .
    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets . open_brackets arithmetic_expression close_brackets

    comma           reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 50 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    open_brackets   shift and go to state 160


state 153

    (59) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 161


state 154

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 162
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 155

    (60) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic . end sub subroutines

    end             shift and go to state 163


state 156

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as . variable_type inside_logic end sub subroutines
    (13) variable_type -> . word
    (14) variable_type -> . float
    (15) variable_type -> . bool

    word            shift and go to state 73
    float           shift and go to state 74
    bool            shift and go to state 75

    variable_type                  shift and go to state 164

state 157

    (65) parameters -> parameters comma parameters .
    (65) parameters -> parameters . comma parameters

  ! shift/reduce conflict for comma resolved as shift
    close_parenthesis reduce using rule 65 (parameters -> parameters comma parameters .)
    comma           shift and go to state 149

  ! comma           [ reduce using rule 65 (parameters -> parameters comma parameters .) ]


state 158

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value . close_brackets open_brackets word_value close_brackets

    close_brackets  shift and go to state 165


state 159

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic . next id

    next            shift and go to state 166


state 160

    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets . arithmetic_expression close_brackets
    (37) arithmetic_expression -> . value
    (38) arithmetic_expression -> . value arithmetic_operand value
    (44) value -> . real_value
    (45) value -> . functions
    (46) value -> . open_parenthesis arithmetic_expression close_parenthesis
    (47) value -> . ids_access
    (53) real_value -> . word_value
    (54) real_value -> . float_value
    (55) real_value -> . id
    (66) functions -> . id open_parenthesis close_parenthesis
    (67) functions -> . id open_parenthesis arguments close_parenthesis
    (48) ids_access -> . id
    (49) ids_access -> . id open_brackets arithmetic_expression close_brackets
    (50) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (51) ids_access -> . id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets
    (52) ids_access -> . open_parenthesis ids_access close_parenthesis

    open_parenthesis shift and go to state 50
    word_value      shift and go to state 38
    float_value     shift and go to state 39
    id              shift and go to state 40

    arithmetic_expression          shift and go to state 167
    value                          shift and go to state 54
    real_value                     shift and go to state 35
    functions                      shift and go to state 36
    ids_access                     shift and go to state 37

state 161

    (59) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

    sub             shift and go to state 47
    $end            reduce using rule 63 (subroutines -> .)

    subroutines                    shift and go to state 168

state 162

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 169


state 163

    (60) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end . sub subroutines

    sub             shift and go to state 170


state 164

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type . inside_logic end sub subroutines
    (3) inside_logic -> . variable inside_logic
    (4) inside_logic -> . conditions inside_logic
    (5) inside_logic -> . loops inside_logic
    (6) inside_logic -> . calls inside_logic
    (7) inside_logic -> . read_or_write inside_logic
    (8) inside_logic -> .
    (9) variable -> . dim id as variable_type
    (10) variable -> . dim id as variable_type open_brackets word_value close_brackets
    (11) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets
    (12) variable -> . dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets
    (16) conditions -> . if
    (17) loops -> . while open_parenthesis logic_expression close_parenthesis inside_logic wend
    (18) loops -> . do inside_logic loop until open_parenthesis logic_expression close_parenthesis
    (19) loops -> . for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id
    (56) calls -> . gosub id
    (57) calls -> . id open_parenthesis close_parenthesis
    (71) read_or_write -> . print
    (72) read_or_write -> . read
    (73) print -> . dunkelPrint multiple_print
    (74) print -> . dunkelPrint open_parenthesis multiple_print close_parenthesis
    (78) read -> . dunkelRead multiple_read
    (79) read -> . dunkelRead string comma multiple_read

    end             reduce using rule 8 (inside_logic -> .)
    dim             shift and go to state 8
    if              shift and go to state 10
    while           shift and go to state 11
    do              shift and go to state 12
    for             shift and go to state 13
    gosub           shift and go to state 14
    id              shift and go to state 9
    dunkelPrint     shift and go to state 17
    dunkelRead      shift and go to state 18

    inside_logic                   shift and go to state 171
    variable                       shift and go to state 3
    conditions                     shift and go to state 4
    loops                          shift and go to state 5
    calls                          shift and go to state 6
    read_or_write                  shift and go to state 7
    print                          shift and go to state 15
    read                           shift and go to state 16

state 165

    (11) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .
    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets . open_brackets word_value close_brackets

    dim             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 11 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    open_brackets   shift and go to state 172


state 166

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next . id

    id              shift and go to state 173


state 167

    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression . close_brackets

    close_brackets  shift and go to state 174


state 168

    (59) subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 59 (subroutines -> sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines .)


state 169

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 175


state 170

    (60) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

    sub             shift and go to state 47
    $end            reduce using rule 63 (subroutines -> .)

    subroutines                    shift and go to state 176

state 171

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic . end sub subroutines

    end             shift and go to state 177


state 172

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets . word_value close_brackets

    word_value      shift and go to state 178


state 173

    (19) loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .

    dim             reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    if              reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    while           reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    do              reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    for             reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    gosub           reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    id              reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelPrint     reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    dunkelRead      reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    end             reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    loop            reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    wend            reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    return          reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)
    next            reduce using rule 19 (loops -> for id equals arithmetic_expression to arithmetic_expression step arithmetic_expression inside_logic next id .)


state 174

    (51) ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .

    comma           reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dim             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    if              reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    while           reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    do              reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    for             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    gosub           reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    id              reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelPrint     reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    dunkelRead      reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    end             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    loop            reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    wend            reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    return          reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    next            reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    sum             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    substraction    reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    multiplication  reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    division        reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    exponent        reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_equal        reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    is_not_equal    reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    and             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    or              reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    not             reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_than    reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    greater_or_equal_than reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_than       reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    less_or_equal_than reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_parenthesis reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    to              reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    close_brackets  reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)
    step            reduce using rule 51 (ids_access -> id open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets open_brackets arithmetic_expression close_brackets .)


state 175

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

    sub             shift and go to state 47
    $end            reduce using rule 63 (subroutines -> .)

    subroutines                    shift and go to state 179

state 176

    (60) subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .

    $end            reduce using rule 60 (subroutines -> sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines .)


state 177

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end . sub subroutines

    sub             shift and go to state 180


state 178

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value . close_brackets

    close_brackets  shift and go to state 181


state 179

    (61) subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 61 (subroutines -> sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines .)


state 180

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub . subroutines
    (58) subroutines -> . sub procedure id inside_logic return subroutines
    (59) subroutines -> . sub function id open_parenthesis close_parenthesis inside_logic end sub subroutines
    (60) subroutines -> . sub function id open_parenthesis parameters close_parenthesis inside_logic end sub subroutines
    (61) subroutines -> . sub function id open_parenthesis close_parenthesis as variable_type inside_logic end sub subroutines
    (62) subroutines -> . sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines
    (63) subroutines -> .

    sub             shift and go to state 47
    $end            reduce using rule 63 (subroutines -> .)

    subroutines                    shift and go to state 182

state 181

    (12) variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .

    dim             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    if              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    while           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    do              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    for             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    gosub           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    id              reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelPrint     reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    dunkelRead      reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    end             reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    loop            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    wend            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    return          reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    next            reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    close_parenthesis reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)
    comma           reduce using rule 12 (variable -> dim id as variable_type open_brackets word_value close_brackets open_brackets word_value close_brackets open_brackets word_value close_brackets .)


state 182

    (62) subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .

    $end            reduce using rule 62 (subroutines -> sub function id open_parenthesis parameters close_parenthesis as variable_type inside_logic end sub subroutines .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for is_equal in state 52 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 52 resolved as shift
WARNING: shift/reduce conflict for and in state 52 resolved as shift
WARNING: shift/reduce conflict for or in state 52 resolved as shift
WARNING: shift/reduce conflict for not in state 52 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 52 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 52 resolved as shift
WARNING: shift/reduce conflict for less_than in state 52 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 52 resolved as shift
WARNING: shift/reduce conflict for close_parenthesis in state 62 resolved as shift
WARNING: shift/reduce conflict for comma in state 100 resolved as shift
WARNING: shift/reduce conflict for comma in state 109 resolved as shift
WARNING: shift/reduce conflict for and in state 115 resolved as shift
WARNING: shift/reduce conflict for or in state 115 resolved as shift
WARNING: shift/reduce conflict for not in state 115 resolved as shift
WARNING: shift/reduce conflict for is_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for is_not_equal in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_than in state 115 resolved as shift
WARNING: shift/reduce conflict for greater_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_than in state 115 resolved as shift
WARNING: shift/reduce conflict for less_or_equal_than in state 115 resolved as shift
WARNING: shift/reduce conflict for comma in state 135 resolved as shift
WARNING: shift/reduce conflict for comma in state 157 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (program -> inside_logic end)
WARNING: rejected rule (subroutines -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 40 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 40
WARNING: reduce/reduce conflict in state 63 resolved using rule (arithmetic_expression -> value)
WARNING: rejected rule (multiple_print -> value) in state 63
WARNING: reduce/reduce conflict in state 64 resolved using rule (ids_access -> id)
WARNING: rejected rule (real_value -> id) in state 64
WARNING: Rule (real_value -> id) is never reduced
